<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-01-31T15:43:45+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">MN Lee’s IT Blog</title><subtitle>이 사이트의 Article들은 개인의 경험을 기술한 것으로 특정 제품의 공식 가이드가 아닙니다. 기술된 제품들의 버전에 따라 문서의 방법이 바르게 동작하지 않을 수 있습니다.</subtitle><entry><title type="html">챗봇 Hands-on Lab (4) - [채널 연결] Web Chat 연결하기</title><link href="http://localhost:4000/chatbot/2019/%EC%B1%97%EB%B4%87-Hands-on-Lab_4/" rel="alternate" type="text/html" title="챗봇 Hands-on Lab (4) - [채널 연결] Web Chat 연결하기" /><published>2019-01-24T02:50:00+09:00</published><updated>2019-01-24T02:50:00+09:00</updated><id>http://localhost:4000/chatbot/2019/%EC%B1%97%EB%B4%87%20Hands-on%20Lab_4</id><content type="html" xml:base="http://localhost:4000/chatbot/2019/%EC%B1%97%EB%B4%87-Hands-on-Lab_4/">&lt;h1 id=&quot;챗봇-hands-on-lab-4&quot;&gt;챗봇 Hands-on Lab (4)&lt;/h1&gt;
&lt;h1 id=&quot;채널-연결-web-chat-연결하기&quot;&gt;[채널 연결] Web Chat 연결하기&lt;/h1&gt;

&lt;p&gt;이 Lab에서는 지금까지 만든 피자봇을 웹 채팅 창을 통해서 연결해 보는 실습을 할 것입니다.&lt;/p&gt;

&lt;h2 id=&quot;웹-채널-생성&quot;&gt;웹 채널 생성&lt;/h2&gt;
&lt;p&gt;이전 Lab에서 생성한 각자의 피자봇 &lt;strong&gt;PizzaBot_{SEQ}&lt;/strong&gt; (예 : PizzaBot_01)를 선택하고 들어갑니다.&lt;/p&gt;

&lt;p&gt;좌측의 &lt;strong&gt;톱니바퀴&lt;/strong&gt; 모양의 설정 아이콘을 클릭하여 설정 페이지로 들어가서 &lt;strong&gt;Channels&lt;/strong&gt; 탭을 선택합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;System_Bot_Test&lt;/strong&gt;라는 Test UI에서 사용하는 채널이 기본적으로 등록되어 있습니다. 이 설정은 그대로 두고 &lt;strong&gt;+ Channel&lt;/strong&gt; 버튼을 클릭하여 새로운 채널을 생성하도록 합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/channel/01_channel_settings.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;다음과 같이 입력하고 &lt;strong&gt;Create&lt;/strong&gt; 버튼을 클릭합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Name : web&lt;/li&gt;
  &lt;li&gt;Descrption : 웹 채널 용&lt;/li&gt;
  &lt;li&gt;Channel Type : Web&lt;/li&gt;
  &lt;li&gt;Channel Enabled : Enabled&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/channel/02_create_channel.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;다음과 같이 채널이 만들어 진 것을 확인 합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/channel/03_Channel_created.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;채널 생성은 완료되었습니다.&lt;/p&gt;

&lt;h2 id=&quot;웹-페이지에서-테스트-하기&quot;&gt;웹 페이지에서 테스트 하기&lt;/h2&gt;
&lt;p&gt;Oracle Digital Assistant는 웹채널을 태스트 하기 위한 chat-sample-web 코드를 제공하고 있습니다.&lt;/p&gt;

&lt;p&gt;이 코드가 구동되고 있는 환경 정보가 제공되었을 것입니다. 브라우저를 통해 제공된 URL에 접속합니다. 아래 화면의 왼쪽 브라우저와 같은 페이지가 보여질 것입니다.
Text Box에 자신의 PizzaBot에서 만든 &lt;strong&gt;Web&lt;/strong&gt; 채널의 &lt;strong&gt;App Id&lt;/strong&gt;를 복사해서 입력해 줍니다. &lt;strong&gt;Continue&lt;/strong&gt;를 누르면 해당 웹페이지의 채팅은 자신의 PizzaBot에 연결 될 것입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/channel/04_web_app_id.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Chat with your BOT&lt;/strong&gt; 버튼을 클릭하여 대화를 시작해 봅니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/channel/05_chat_with_your_bot.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;다음과 같이 채팅창이 열리게 됩니다. &lt;strong&gt;Type a message&lt;/strong&gt; 텍스트 박스에 대화를 입력합니다.
피자봇에서 구현했던 4개의 Intent들을 차례로 테스트 해보면 됩니다.
&lt;img src=&quot;/assets/images/chatbot_lecture/channel/06_chat.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;사용환경-정리&quot;&gt;사용환경 정리&lt;/h2&gt;
&lt;p&gt;생성한 PizzaBot_{SEQ}를 이전 lab에서 처럼 삭제합니다.&lt;/p&gt;

&lt;p&gt;과정을 완료하였습니다.&lt;/p&gt;

&lt;h1 id=&quot;chatbot-workshop-lab&quot;&gt;Chatbot-Workshop Lab&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Lab 개요 : &lt;a href=&quot;/chatbot/2019/챗봇-Hands-on-Lab_1/&quot;&gt;챗봇 Hands-on Lab (1) - Lab 개요&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Lab 100 : &lt;a href=&quot;/chatbot/2019/챗봇-Hands-on-Lab_2/&quot;&gt;챗봇 Hands-on Lab (2) - 금융봇을 이용하여 챗봇 기본 기능 익히기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Lab 200 : &lt;a href=&quot;/chatbot/2019/챗봇-Hands-on-Lab_3/&quot;&gt;챗봇 Hands-on Lab (3) - 피자봇 만들기 &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Lab 300 : &lt;a href=&quot;/chatbot/2019/챗봇-Hands-on-Lab_4/&quot;&gt;챗봇 Hands-on Lab (4) - [채널 연결] Web Chat 연결하기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">챗봇 Hands-on Lab (4) [채널 연결] Web Chat 연결하기</summary></entry><entry><title type="html">챗봇 Hands-on Lab (3) - 피자봇 만들기</title><link href="http://localhost:4000/chatbot/2019/%EC%B1%97%EB%B4%87-Hands-on-Lab_3/" rel="alternate" type="text/html" title="챗봇 Hands-on Lab (3) - 피자봇 만들기" /><published>2019-01-24T02:50:00+09:00</published><updated>2019-01-24T02:50:00+09:00</updated><id>http://localhost:4000/chatbot/2019/%EC%B1%97%EB%B4%87%20Hands-on%20Lab_3</id><content type="html" xml:base="http://localhost:4000/chatbot/2019/%EC%B1%97%EB%B4%87-Hands-on-Lab_3/">&lt;h1 id=&quot;챗봇-hands-on-lab-3&quot;&gt;챗봇 Hands-on Lab (3)&lt;/h1&gt;
&lt;h1 id=&quot;피자봇-만들기&quot;&gt;피자봇 만들기&lt;/h1&gt;

&lt;h2 id=&quot;학습-내용&quot;&gt;학습 내용&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Flow 구현&lt;/li&gt;
  &lt;li&gt;Intent / Dialog 테스트&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 Lab에서는 피자봇을 직접 만들어 볼 것입니다. 구현에 들어가기 앞서서 피자봇이 어떤 기능을 가지고 있는지 먼저 살펴봅니다.
제공되는 피자봇은 다음과 같이 4개의 &lt;strong&gt;Intent&lt;/strong&gt;를 가지고 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/pizzalab/01_pizza_intent.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Flow가 구현되어 있는 제공된 &lt;strong&gt;피자봇(PizzaBot)&lt;/strong&gt; 으로 먼저 4개의 Intent가 어떻게 동작하는지 확인한 후에 각 기능을 구현해 보도록 하겠습니다.&lt;/p&gt;

&lt;p&gt;## Test UI로 피자봇 테스트 하기&lt;/p&gt;
&lt;blockquote&gt;

  &lt;p&gt;공통으로 사용할 것이기 때문에 Flow나 Intent를 수정하지 않도록 조심하세요.&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;PizzaBot&lt;/strong&gt; 타이틀을 클릭하여 PizzaBot으로 들어갑니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/pizzalab/02_pizzabot.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;우측 상단의 &lt;strong&gt;▶&lt;/strong&gt; 버튼을 클릭하여 Test UI를 엽니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/pizzalab/03_pizza_test_ui.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;피자-주문하기&quot;&gt;피자 주문하기&lt;/h3&gt;

&lt;p&gt;다음 예시의 문장을 입력하여 테스트 합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;피자 주문해줘&lt;/li&gt;
  &lt;li&gt;피자 주문하고 싶어요&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/pizzalab/04_orderpizza_test1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;피자 더 보기&lt;/strong&gt;를 클릭하거나 이미지 왼쪽 / 오른쪽의 &amp;lt; / &amp;gt; 를 클릭하여 더 많은 피자를 볼 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/pizzalab/04_orderpizza_test2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;지금 주문&lt;/strong&gt;을 클릭합니다. 사이즈를 묻는 질문에 원하는 크기를 선택합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/pizzalab/04_orderpizza_test3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Send Location&lt;/strong&gt; 버튼을 클릭하면 사용자의 위치가 전송되고 주문이 완료됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/pizzalab/04_orderpizza_test4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;파스타-주문하기--주문-취소하기--메뉴-보기&quot;&gt;파스타 주문하기 / 주문 취소하기 / 메뉴 보기&lt;/h3&gt;

&lt;p&gt;Test UI 창 상단의 &lt;strong&gt;Reset&lt;/strong&gt; 버튼을 클릭하고 다른 기능도 테스트 해봅니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/pizzalab/05_showmenu.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;파스타 주문&lt;/strong&gt;과 &lt;strong&gt;주문 취소&lt;/strong&gt; Intent가 잘 인지되고 있는 것을 볼 수 있습니다. 이 Lab에서는 해당 기능은 구현하지 않을 것이기 때문에 다음과 같이 구현되지 않았다고 대답합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/pizzalab/06_pasta.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;피자봇-구현해-보기&quot;&gt;피자봇 구현해 보기&lt;/h2&gt;
&lt;p&gt;이제 본격적으로 피자봇의 기능을 구현해 보겠습니다.&lt;/p&gt;

&lt;p&gt;피자봇의 4개의 Intent와 Entity 그리고 약간의 기본 Flow를 담고 있는 초기 버전의 &lt;strong&gt;PizzaBot_Initial&lt;/strong&gt;이 등록되어 있습니다. 이 Bot을 복제하여 구현을 시작하도록 하겠습니다.
&lt;strong&gt;PizzaBot_Initial&lt;/strong&gt;의 &lt;strong&gt;Clone&lt;/strong&gt; 메뉴를 클릭하여 복제본을 만듭니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/pizzalab/10_PizzaBot_clone.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Name 항목을 본인에게 부여된 SEQ를 suffix로 하여 &lt;strong&gt;PizzaBot_{SEQ}&lt;/strong&gt; 형태가 되도록 입력합니다.&lt;/li&gt;
  &lt;li&gt;Description에 본인의 이름을 입력합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/pizzalab/11_pizzabot_clone_window.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;복제가 잘 되었는지 확인합니다. Intent 아이콘과 Flow 아이콘을 클릭해 봅니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/pizzalab/12_PizzaBot_intent.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/pizzalab/12_PizzaBot_Flow.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 Flow를 추가해 보도록 하겠습니다.&lt;/p&gt;

&lt;h2 id=&quot;파스타-주문하기&quot;&gt;파스타 주문하기&lt;/h2&gt;
&lt;p&gt;파스타 주문하기는 세부 Flow가 없이 바로 단답형으로 대답하는 가장 간단한 형태이므로 제일 먼저 추가해 보겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OrderPasta&lt;/strong&gt;에 매칭되는 &lt;strong&gt;Utterance&lt;/strong&gt;가 들어오면 &lt;strong&gt;OrderPasta&lt;/strong&gt; 단계를 호출할 수 있도록 &lt;strong&gt;Intent&lt;/strong&gt; 단계의 Action에 &lt;strong&gt;OrderPaster&lt;/strong&gt;를 부르도록 다음과 같이 추가 합니다.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;na&quot;&gt;Intent&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;System.Intent&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;variable&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;iresult&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;confidenceThreshold &lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0.8&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;transitions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;unresolvedIntent&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Unresolved&quot;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# OrderPasta 추가&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;OrderPasta &lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;OrderPasta&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;호출되는 &lt;strong&gt;OrderPasta&lt;/strong&gt; 단계를 &lt;strong&gt;”####### OrderPasta 단계를 아래에 복사헤 주세요”&lt;/strong&gt; 주석 아래에 복사해 주세요.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;####### OrderPasta 단계를 아래에 복사헤 주세요&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;OrderPasta&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;System.CommonResponse&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;responseItems&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;text&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;죄송합니다.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;오늘은&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;파스타가&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;없네요.&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;pasta&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;processUserMessage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;transitions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;done&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Flow가 완성되었으면 우측 상단의 &lt;strong&gt;Validate&lt;/strong&gt;를 클릭하여 flow에 오류가 없는지 확인합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/pizzalab/07_OrderPasta_Flow.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;오류가 없다면 Test UI를 열어서 해당 flow가 잘 동작하는지 확인합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/pizzalab/08_OrderPasta_Test.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;피자-주문하기-구현&quot;&gt;피자 주문하기 구현&lt;/h2&gt;
&lt;p&gt;이제 여러 단계의 flow를 가지는 피자주문 (OrderPizza) 로직을 추가하도록 하겠습니다.&lt;/p&gt;

&lt;p&gt;피자 주문하기는 다음과 같은 Flow를 가집니다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;순서&lt;/th&gt;
      &lt;th&gt;State 명&lt;/th&gt;
      &lt;th&gt;실행 내용&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;OrderPizza&lt;/td&gt;
      &lt;td&gt;Pizza 리스트 보여주기&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;AskPizzaSize&lt;/td&gt;
      &lt;td&gt;주문할 피자 크기 물어보기 (Small / Medium / Large)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;AskLocation&lt;/td&gt;
      &lt;td&gt;배달할 위치 물어보기 (Send Location)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;Confirmation&lt;/td&gt;
      &lt;td&gt;주문 확인&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;OrderPizza&lt;/strong&gt;에 매칭되는 &lt;strong&gt;Utterance&lt;/strong&gt;가 들어오면 &lt;strong&gt;OrderPizza&lt;/strong&gt; 단계를 호출할 수 있도록 &lt;strong&gt;Intent&lt;/strong&gt; 단계의 Action에 &lt;strong&gt;OrderPizza&lt;/strong&gt;를 부르도록 다음과 같이 추가 합니다.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;na&quot;&gt;Intent&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;System.Intent&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;variable&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;iresult&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;confidenceThreshold &lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0.8&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;transitions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;unresolvedIntent&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Unresolved&quot;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# OrderPasta 추가&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;OrderPasta &lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;OrderPasta&quot;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# OrderPizza 추가&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;OrderPizza &lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;OrderPizza&quot;&lt;/span&gt;        
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;불리어지는 &lt;strong&gt;OrderPizza&lt;/strong&gt; 단계를 &lt;strong&gt;”####### OrderPizza 단계를 아래에 복사헤 주세요”&lt;/strong&gt; 주석 아래에 복사해 주세요.
&lt;strong&gt;OrderPizza&lt;/strong&gt; 단계는 여러개의 피자를 Card layout으로 이미지와 함께 보여주는 로직 입니다.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;####### OrderPizza 단계를 아래에 복사헤 주세요&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;OrderPizza&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;System.CommonResponse&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;responseItems&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;text&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;오늘의&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;피자&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;입니다.&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;separateBubbles&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;visible&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;expression&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;lt;#if&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;cardsRangeStart?number&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0&amp;gt;true&amp;lt;#else&amp;gt;false&amp;lt;/#if&amp;gt;&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Our&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;pizzas&quot;&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;text&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;더&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;많은&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;피자들이&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;있습니다.&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;separateBubbles&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;visible&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;expression&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;lt;#if&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;cardsRangeStart?number&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0&amp;gt;true&amp;lt;#else&amp;gt;false&amp;lt;/#if&amp;gt;&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;More&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;pizzas&quot;&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;cards&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;cardLayout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;horizontal&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;PizzaCards&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;피자&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;더&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;보기&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;postback&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;visible&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;expression&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;lt;#if&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;cardsRangeStart?number+4&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;pizzas.value?size&amp;gt;true&amp;lt;#else&amp;gt;false&amp;lt;/#if&amp;gt;&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;more&quot;&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;cardsRangeStart&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;${cardsRangeStart?number+4}&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;More&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;cards&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;${pizzas.name}&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;${pizzas.description}&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;imageUrl&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;${pizzas.image}&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;PizzaCard&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;iteratorVariable&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;pizzas&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;rangeStart&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;${cardsRangeStart}&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;rangeSize&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;4&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;지금&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;주문&quot;&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;postback&quot;&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;order&quot;&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
                  &lt;span class=&quot;na&quot;&gt;orderedPizza&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;${pizzas.name}&quot;&lt;/span&gt;
                  &lt;span class=&quot;na&quot;&gt;orderedPizzaImage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;${pizzas.image}&quot;&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Order&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;channelCustomProperties&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;facebook&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;top_element_style&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;large&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;processUserMessage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;transitions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;AskPizzaSize&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;more&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;OrderPizza&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;textReceived&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Intent&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;OrderPizza&lt;/strong&gt; 단계에서 &lt;strong&gt;지금 주문&lt;/strong&gt;을 클릭하게 되면 피자 크기를 묻는 &lt;strong&gt;AskPizzaSize&lt;/strong&gt; 단계로 이동하게 됩니다.&lt;/p&gt;

&lt;p&gt;불리어지는 &lt;strong&gt;AskPizzaSize&lt;/strong&gt; 단계를 &lt;strong&gt;”####### AskPizzaSize 단계를 아래에 복사헤 주세요”&lt;/strong&gt; 주석 아래에 복사해 주세요.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;####### AskPizzaSize 단계를 아래에 복사헤 주세요&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;AskPizzaSize&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;System.CommonResponse&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;variable&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;pizzaSize&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;nlpResultVariable&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;iresult&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;maxPrompts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;2&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;responseItems&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;text&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;lt;#if&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;system.invalidUserInput&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'true'&amp;gt;크기&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;선택이&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;잘못되었습니다.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;다시&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;선택해&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;주세요.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;            &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;lt;/#if&amp;gt;어떤&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;크기의&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;피자를&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;원하십니까?&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;What&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;size&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;separateBubbles&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;${enumValue}&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;postback&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;pizzaSize&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;${enumValue}&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;size&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;iteratorVariable&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;pizzaSize.type.enumValues&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;processUserMessage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;transitions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;cancel&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Intent&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;AskLocation&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;AskPizzaSize&lt;/strong&gt; 단계 후에는 배달 위치를 묻게 되고 사용자가 자신의 Location 정보를 보내는 단계인 &lt;strong&gt;AskLocation&lt;/strong&gt;를 수행하게 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;”####### AskLocation 단계를 아래에 복사헤 주세요”&lt;/strong&gt; 주석 아래에 다음을 추가해 주세요.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;####### AskLocation 단계를 아래에 복사헤 주세요&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;AskLocation&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;System.CommonResponse&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;variable&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;location&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;responseItems&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;어디로&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;배달해&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;드릴까요?&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;text&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;What&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;location&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;separateBubbles&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;globalActions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Send&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Location&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;location&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;SendLocation&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;processUserMessage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;transitions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;cancel&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Intent&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Confirmation&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;마지막 단계로 &lt;strong&gt;주문 확인&lt;/strong&gt;을 수행하는 &lt;strong&gt;Confirmation&lt;/strong&gt; 단계를 추가해 줍니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;”####### Confirmation 단계를 아래에 복사헤 주세요”&lt;/strong&gt; 주석 아래에 다음을 추가해 주세요.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;####### Confirmation 단계를 아래에 복사헤 주세요&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;Confirmation&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;System.CommonResponse&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;responseItems&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;주문해&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;주셔서&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;감사합니다.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;주문하신&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;${pizzaSize}&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;${orderedPizza}&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;피자가&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;30분&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;내로&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;배달될&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;예정입니다.&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;text&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;conf&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;separateBubbles&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;attachment&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;attachmentType&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;image&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;image&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;attachmentUrl&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;${orderedPizzaImage}&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;processUserMessage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;transitions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;done&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;피자 주문을 위한 flow가 모두 완료되었습니다. 우측 상단의 &lt;strong&gt;Validate&lt;/strong&gt;를 클릭하여 flow에 오류가 없는지 확인합니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;bot flow는 Yaml로 되어 있습니다. Yaml은 Indentation이 매우 중요합니다. 오류가 계속 발생한다면 들여쓰기가 잘 맞게 되어있는지 확인해보세요.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mee-nam-lee/chatbot_lecture/blob/master/labfiles/PizzaBot/OrderPizzaFlow.md&quot;&gt;완성된 OrderPizza flow 참고&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;오류가 없다면 Test UI를 열어서 추가된 로직이 잘 동작하는지 확인 합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/pizzalab/09_OrderPizza_Test1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/pizzalab/09_OrderPizza_Test2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/pizzalab/09_OrderPizza_Test3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;피자봇 만들기 실습 과정이 완료되었습니다.&lt;/p&gt;

&lt;h1 id=&quot;chatbot-workshop-lab&quot;&gt;Chatbot-Workshop Lab&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Lab 개요 : &lt;a href=&quot;/chatbot/2019/챗봇-Hands-on-Lab_1/&quot;&gt;챗봇 Hands-on Lab (1) - Lab 개요&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Lab 100 : &lt;a href=&quot;/chatbot/2019/챗봇-Hands-on-Lab_2/&quot;&gt;챗봇 Hands-on Lab (2) - 금융봇을 이용하여 챗봇 기본 기능 익히기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Lab 200 : &lt;a href=&quot;/chatbot/2019/챗봇-Hands-on-Lab_3/&quot;&gt;챗봇 Hands-on Lab (3) - 피자봇 만들기 &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Lab 300 : &lt;a href=&quot;/chatbot/2019/챗봇-Hands-on-Lab_4/&quot;&gt;챗봇 Hands-on Lab (4) - [채널 연결] Web Chat 연결하기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">챗봇 Hands-on Lab (3) 피자봇 만들기</summary></entry><entry><title type="html">챗봇 Hands-on Lab (1) - Lab 개요</title><link href="http://localhost:4000/chatbot/2019/%EC%B1%97%EB%B4%87-Hands-on-Lab_1/" rel="alternate" type="text/html" title="챗봇 Hands-on Lab (1) - Lab 개요" /><published>2019-01-23T02:50:00+09:00</published><updated>2019-01-23T02:50:00+09:00</updated><id>http://localhost:4000/chatbot/2019/%EC%B1%97%EB%B4%87%20Hands-on%20Lab_1</id><content type="html" xml:base="http://localhost:4000/chatbot/2019/%EC%B1%97%EB%B4%87-Hands-on-Lab_1/">&lt;h1 id=&quot;챗봇-hands-on-lab-1---lab-개요&quot;&gt;챗봇 Hands-on Lab (1) - Lab 개요&lt;/h1&gt;

&lt;p&gt;Oracle Cloud를 이용하여 인간의 언어(Natural Language)를 이해하는 챗봇을 간단하게 만들어 보는 Hands on Workshop 입니다.
Training 과정을 통해 더욱 정교한 대화가 가능한 챗봇으로 진화시키는 과정을 체험하고, 비즈니스 처리를 위한 로직을 쉽게 작성하여 챗봇을 통해 서비스하게 하는 경험을 하시게 될 것입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/mobile_overviw.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이 실습에서는 다음과 같은 두 개의 봇을 만들어 보게 될 것 입니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;금융봇 (MasterBot)&lt;/strong&gt; : 잔액 조회, 계좌이체, 지출 이력 조회 업무를 수행하는 봇&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;피자봇 (PizzaBot)&lt;/strong&gt; : 피자 주문, 주문 취소등의 업무를 수행하는 봇&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;prerequisite&quot;&gt;Prerequisite&lt;/h1&gt;
&lt;p&gt;이 핸즈온을 완료하려면 Oracle Digital Assistant 서비스에 접속해야 합니다. 
Oracle Cloud 계정을 이미 가지고 계시다면 Digital Assistant Cloud Service 인스턴스를 생성한 후 이 과정을 수행하시면 됩니다.&lt;/p&gt;

&lt;p&gt;Oracle Cloud 계정이 없다면 무료로 제공되는 Trial 계정을 신청하세요&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.oracloud.kr/post/oracle_cloud_trial_universal/&quot;&gt;Trial 계정 신청하기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;본 과정에서는 Oracle Digital Assitant의 접속 정보가 제공될 것입니다. 제공되는 정보를 이용하여 Digital Assitant Cloud에 연결하세요.&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;chatbot-workshop-lab&quot;&gt;Chatbot-Workshop Lab&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Lab 개요 : &lt;a href=&quot;/chatbot/2019/챗봇-Hands-on-Lab_1/&quot;&gt;챗봇 Hands-on Lab (1) - Lab 개요&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Lab 100 : &lt;a href=&quot;/chatbot/2019/챗봇-Hands-on-Lab_2/&quot;&gt;챗봇 Hands-on Lab (2) - 금융봇을 이용하여 챗봇 기본 기능 익히기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Lab 200 : &lt;a href=&quot;/chatbot/2019/챗봇-Hands-on-Lab_3/&quot;&gt;챗봇 Hands-on Lab (3) - 피자봇 만들기 &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Lab 300 : &lt;a href=&quot;/chatbot/2019/챗봇-Hands-on-Lab_4/&quot;&gt;챗봇 Hands-on Lab (4) - [채널 연결] Web Chat 연결하기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">챗봇 Hands-on Lab (1) - Lab 개요</summary></entry><entry><title type="html">챗봇 Hands-on Lab (2) - 금융봇을 이용하여 챗봇 기본 기능 익히기</title><link href="http://localhost:4000/chatbot/2019/%EC%B1%97%EB%B4%87-Hands-on-Lab_2/" rel="alternate" type="text/html" title="챗봇 Hands-on Lab (2) - 금융봇을 이용하여 챗봇 기본 기능 익히기" /><published>2019-01-23T02:50:00+09:00</published><updated>2019-01-23T02:50:00+09:00</updated><id>http://localhost:4000/chatbot/2019/%EC%B1%97%EB%B4%87%20Hands-on%20Lab_2</id><content type="html" xml:base="http://localhost:4000/chatbot/2019/%EC%B1%97%EB%B4%87-Hands-on-Lab_2/">&lt;h1 id=&quot;챗봇-hands-on-lab-2&quot;&gt;챗봇 Hands-on Lab (2)&lt;/h1&gt;
&lt;h1 id=&quot;금융봇을-이용하여-챗봇-기본-기능-익히기&quot;&gt;금융봇을 이용하여 챗봇 기본 기능 익히기&lt;/h1&gt;

&lt;h2 id=&quot;학습-내용&quot;&gt;학습 내용&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;챗봇 둘러보기&lt;/li&gt;
  &lt;li&gt;Intent / Dialog 테스트&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 랩에서는 MasterBot이라는 이름의 금융 업무를 수행하는 챗봇을 살펴볼 것입니다.&lt;/p&gt;

&lt;h1 id=&quot;bot-console로-들어가기&quot;&gt;&lt;strong&gt;Bot console로 들어가기&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;제공되는 Oracle Digital Assistant의 접속 정보를 확인하여 콘솔에 접속합니다.
로그인 후에 다음과 같은 페이지가 나오면 왼편 상탄의 아이콘을 클릭하여 메뉴바를 펼칩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/00_after_login.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;아래와 같이 왼편 메뉴에서 &lt;strong&gt;Bots&lt;/strong&gt; 메뉴를 클릭합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/01_bot_first_page.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;masterbot-복제&quot;&gt;&lt;strong&gt;MasterBot 복제&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;제공되는 테스트용 MasterBot을 찾아 사용자 별로 복제한 후 테스트 할 것입니다.
다음과 같이 MasterBot이 보이는지 확인하세요.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/02_Masterbot.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;본인에게 할당된 SEQ 번호를 참고하여 복제한 MasterBot의 이름을 다음 처럼 바꿔줍니다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;이름이 중복될 경우 복제 시에 오류가 날수 있으니 주의하세요!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/03_masterbot_clone.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;다음과 같이 입력하고 Clone 합니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Name :  MasterBot_[제공된 SEQ]&lt;/li&gt;
  &lt;li&gt;Description : 본인 이름&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/04_masterbot_clone_window.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;복제가 성공되면 다음과 같이 새로운 BOT이 생성된 걸 볼 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/05_after_clone_master.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;복제된-masterbot에서-intent-사용자-의도-테스트-하기&quot;&gt;&lt;strong&gt;복제된 MasterBot에서 Intent (사용자 의도) 테스트 하기&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;방금 생성한 본인의 MasterBot의 이름을 클릭하거나 아래와 같이 &lt;strong&gt;Edit&lt;/strong&gt; 메뉴를 클릭하여 Bot의 편집 화면으로 이동합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/06_Edit_MasterBot.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이 봇은 이미 플로우가 작성되어 있는 봇입니다. 이봇을 테스트 허기 위해서 이미 등록되어 있는 각 Intent의 샘플 Utterance를 Train 시켜야 합니다. 상단의 Train 버튼을 클릭하여 등록된 샘플 Utterance를 학습 시킵니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/07_Train.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Trainer Ht&lt;/strong&gt; 옵션이 선택되었음을 확인하고 &lt;strong&gt;Submit&lt;/strong&gt;을 클릭합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/08_Train_window.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Train이 완료되었으면 화면에 알림이 뜨고 다시 한번 상단의 &lt;strong&gt;Train&lt;/strong&gt; 버튼을 클릭해 보면 &lt;strong&gt;Trainer Ht&lt;/strong&gt;의 체크 아이콘이 &lt;strong&gt;초록색&lt;/strong&gt;으로 변경되어 있음을 볼 수 있습니다. 이는 학습이 완료되었다는 뜻 입니다.
Train 팝업창 상단의 &lt;strong&gt;X&lt;/strong&gt; 버튼을 클릭하여 Train 윈도우를 닫습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/09_after_train.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 Intent 테스트를 위한 Test 창을 열기 위해 상단의 &lt;strong&gt;▶&lt;/strong&gt; 버튼을 클릭합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/10_play_button.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;챗봇을 테스트 해볼 수 있는 테스트 창이 나옵니다.
Intent를 먼저 테스트 해볼 것이기 때문에 Test 창에서 &lt;strong&gt;Intent&lt;/strong&gt; 탭을 선택합니다. 
&lt;img src=&quot;/assets/images/chatbot_lecture/11_test_ui_intent.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;테스트 창 왼편의 Examples로 등록되어 있는 문장들 몇 개를 &lt;strong&gt;Message&lt;/strong&gt; Text Box에 입력해 봅니다. 입력한 Utterance가 &lt;strong&gt;Balances&lt;/strong&gt;라는 &lt;strong&gt;Intent&lt;/strong&gt;에 매칭된 것을 확인할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/12_intent_test_1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;몇 개 샘플 Utterance를 더 테스트 해 봅니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/12_intent_test_2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 Intent를 변경하여 다시 테스트 해보겠습니다. &lt;strong&gt;Send Money&lt;/strong&gt; Intent를 선택하여 위와 같이 테스트 해봅니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/12_intent_test_3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;masterbot과-대화해-보기&quot;&gt;&lt;strong&gt;MasterBot과 대화해 보기&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;이제 Bot과 실제로 위에서 테스트한 Intent에 반응하는 대화를 해 볼 것입니다. 이 봇은 이미 다음 두 가지의 Intent를 위한 Flow가 작성되어 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Balances : 잔고 조회&lt;/li&gt;
  &lt;li&gt;Send Money : 계좌 이체&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위 두 Intent에 매칭이 될 수 있도록 &lt;strong&gt;Utterance&lt;/strong&gt;를 입력하여 대화를 시도해 봅니다. 
대화 테스트는 Test UI의 &lt;strong&gt;Bot&lt;/strong&gt; 탭에서 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/13_test_ui_dial.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;balances-잔고조회-intent&quot;&gt;Balances (잔고조회) Intent&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Message&lt;/strong&gt; Test Box에 다음과 같이 입력합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/14_Bal_1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;어떤 계좌의 잔고를 보고 싶은지 &lt;strong&gt;Bot&lt;/strong&gt;이 질문을 합니다. 어떤 것이나 선택해도 됩니다. 제공된 리스트 중 하나를 클릭하세요. 선택된 계좌의 잔고를 보여주고 대화가 종료됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/14_Bal_2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Test UI의 &lt;strong&gt;Reset&lt;/strong&gt; 버튼을 클릭하여 창을 clear 합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/15_reset.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;다음은 게좌 유형이 &lt;strong&gt;Utterance&lt;/strong&gt;에 포함된 대화를 테스트 해보겠습니다. 다음과 같이 질문을 하게 되면 Bot이 계좌 유형이 이미 제공되었기 때문에 게좌 유형을 묻는 질문을 하지 않고 바로 해당 계좌의 잔고를 보여주게 됩니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;내 저축 계좌의 잔고가 얼마야?&lt;/li&gt;
  &lt;li&gt;예금 계좌에 잔고가 얼마나 남아 있지?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/14_Bal_3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;send-money-계좌-이체-intent-테스트-하기&quot;&gt;Send Money (계좌 이체) Intent 테스트 하기&lt;/h3&gt;
&lt;p&gt;위 잔고 조회 예제와 같이 &lt;strong&gt;Send Money&lt;/strong&gt; 예제도 테스트 해봅니다. 송금을 수행하기 위한 샘플 Utterance를 입력하여 송금 업무가 수행되게 합니다. 
다음과 같이 대화가 진행되는 것을 볼 수 있습니다. 송금을 진행하기 위해서는 다음 3개의 Entity(정보가) 필요하고 이를 Bot이 계속 질문하게 됩니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;출금 계좌&lt;/li&gt;
  &lt;li&gt;송금 계좌&lt;/li&gt;
  &lt;li&gt;금액&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/Send%20Money%20Test.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;송금을 위한 3개의 Entity를 첫 사용자 Utterance에 포함하여 대화를 수행할 수 있습니다. 첫 문장에서 송금을 위한 모든 정보 (Entity)가 추출된다면 Bot은 추가적인 질문을 하지 않고 바로 송금을 시행합니다. 아래와 같이 입력하여 테스트 해
보세요&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;카드에서 출금해서 팀장님께 $50 보내줘&lt;/li&gt;
  &lt;li&gt;내 예금 계좌에서 $200불 엄마한테 보내줘&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/Send%20Money2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;사용환경-정리&quot;&gt;사용환경 정리&lt;/h2&gt;
&lt;p&gt;생성한 MasterBot_{SEQ}를 다음과 같이 삭제 합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/99_delete_bot.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;과정을 완료하였습니다.&lt;/p&gt;

&lt;h1 id=&quot;chatbot-workshop-lab&quot;&gt;Chatbot-Workshop Lab&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Lab 개요 : &lt;a href=&quot;/chatbot/2019/챗봇-Hands-on-Lab_1/&quot;&gt;챗봇 Hands-on Lab (1) - Lab 개요&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Lab 100 : &lt;a href=&quot;/chatbot/2019/챗봇-Hands-on-Lab_2/&quot;&gt;챗봇 Hands-on Lab (2) - 금융봇을 이용하여 챗봇 기본 기능 익히기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Lab 200 : &lt;a href=&quot;/chatbot/2019/챗봇-Hands-on-Lab_3/&quot;&gt;챗봇 Hands-on Lab (3) - 피자봇 만들기 &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Lab 300 : &lt;a href=&quot;/chatbot/2019/챗봇-Hands-on-Lab_4/&quot;&gt;챗봇 Hands-on Lab (4) - [채널 연결] Web Chat 연결하기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h2&gt;

&lt;p&gt;금융봇(MasterBot)이 등록되어 있지 않다면 아래 파일을 다운 받아 Import 하면 됩니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mee-nam-lee/chatbot_lecture/blob/master/labfiles/MasterBot_Korean/MasterBot_kor_wo_comp.zip&quot;&gt;MasterBot Import 파일&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">챗봇 Hands-on Lab (2) 금융봇을 이용하여 챗봇 기본 기능 익히기</summary></entry><entry><title type="html">Digital Assistant(챗봇)과 Autonomous Data Warehouse(ADW) 연계하기</title><link href="http://localhost:4000/chatbot/2019/chatbot_adw/" rel="alternate" type="text/html" title="Digital Assistant(챗봇)과 Autonomous Data Warehouse(ADW) 연계하기" /><published>2019-01-22T02:50:00+09:00</published><updated>2019-01-22T02:50:00+09:00</updated><id>http://localhost:4000/chatbot/2019/chatbot_adw</id><content type="html" xml:base="http://localhost:4000/chatbot/2019/chatbot_adw/">&lt;h1 id=&quot;digital-assistant챗봇과-autonomous-data-warehouseadw-연계하기&quot;&gt;Digital Assistant(챗봇)과 Autonomous Data Warehouse(ADW) 연계하기&lt;/h1&gt;

&lt;p&gt;오라클 챗봇인 &lt;strong&gt;Digital Assistant&lt;/strong&gt;에서는 커스텀 비즈니스 코드를 작성을 지원하기 위해 &lt;strong&gt;Custom Component&lt;/strong&gt;라는 기능을 제공하고 있습니다. Custom Component는 오라클 &lt;strong&gt;모바일 클라우드&lt;/strong&gt;에서 서비스되도록 작성되거나 &lt;strong&gt;Stand Alone&lt;/strong&gt;으로 동작되도록 작성될 수도 있고, Oracle Digital Assistant가 제공하는 Custom Component를 위한 &lt;strong&gt;임베디드 컨테이너&lt;/strong&gt;에서 구동되도록 작성될 수도 있습니다.&lt;/p&gt;

&lt;p&gt;이 문서에서는 &lt;strong&gt;Oracle Autonomous Data Warehouse&lt;/strong&gt;와 연계하는 방법을 Stand Alone Custom Component를 구현을 통해서 설명할 예정입니다.&lt;/p&gt;

&lt;h2 id=&quot;아키텍쳐&quot;&gt;아키텍쳐&lt;/h2&gt;
&lt;p&gt;연계 아키텍쳐는 다음과 같습니다. Stand Alone Custom Component의 구동 환경은 Oracle Compute Cloud를 사용하였습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ODA_ADW/00.architecture.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;사전-준비-사항&quot;&gt;사전 준비 사항&lt;/h2&gt;
&lt;p&gt;아래 서비스가 미리 생성되어 있어야 합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Oracle Digital Assistant (ODA)&lt;/li&gt;
  &lt;li&gt;Oracle Autonomous Data Warehouse (ADW)&lt;/li&gt;
  &lt;li&gt;Oracle Compute Cloud&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;oracle-compute-cloud에-필요한-software-설치하기&quot;&gt;Oracle Compute Cloud에 필요한 Software 설치하기&lt;/h2&gt;
&lt;p&gt;Compute Cloud를 Digital Assistant의 Custom Component 구동용으로 사용할 것이기 때문에 Custom Component SDK와 Oracle Database 연결을 위한 소프트웨어를 설치해야 합니다.
필요 소프트웨어는 다음과 같습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Node.js&lt;/li&gt;
  &lt;li&gt;Oracle Instant Client&lt;/li&gt;
  &lt;li&gt;GIT Client 설치&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;compute-cloud-생성-및-ssh로-접속하기&quot;&gt;Compute Cloud 생성 및 SSH로 접속하기&lt;/h3&gt;
&lt;p&gt;Compute Cloud 생성은 다음을 참고합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.oracloud.kr/post/oci_workshop_5/&quot;&gt;Compute Cloud 생성&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;생성된 Compute 인스턴스에 Security Rule을 추가합니다. 여기서 추가하는 포트 3000은 향후 component 서버에서 사용할 포트입니다.
Security List 설정의 자세한 방법은 아래를 참고 하세요.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.oracloud.kr/post/oci_workshop_3/&quot;&gt;Security List 설정&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ODA_ADW/08.security_list.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;OS 자체의 firewall 서비스를 사용할 경우 해당 포트를 firewall에서도 open 시켜줘야 합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;생성된 Compute의 Public IP를 확인하고 SSH로 접속합니다.&lt;/p&gt;

&lt;h3 id=&quot;nodejs-설치하기&quot;&gt;Node.js 설치하기&lt;/h3&gt;
&lt;p&gt;Compute Cloud에 Node.js를 설치합니다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; sudo yum -y install nodejs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Node.js 설치 방법 및 바이너리 다운로드는 다음을 참고합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://nodejs.org/en/download/&quot;&gt;Nodejs.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;oracle-instant-client-설치하기&quot;&gt;Oracle Instant Client 설치하기&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.oracle.com/technetwork/database/database-technologies/instant-client/downloads/index.html&quot;&gt;Oracle Instant Client 다운로드&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/en/cloud/paas/autonomous-data-warehouse-cloud/user/connecting-nodejs.html#GUID-AB1E323A-65B9-47C4-840B-EC3453F3AD53&quot;&gt;Oracle Instant Client 설치 참고&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위 다운로드 사이트에서 아래 파일을 다운 받습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ODA_ADW/01.oracle_instant_client_download.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Compute Cloud로 upload 합니다. (SCP나 SFTP 이용)&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; scp -i privatekey instantclient-basic-linux.x64-18.3.0.0.0dbru.zip opc@{Compute Public IP}:/home/opc/.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/ODA_ADW/02.scp_oracle_instant_client.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;업로드된 instant client 파일의 압축을 풉니다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;unzip instantclient-basic-linux.x64-18.3.0.0.0dbru.zip 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;.bash_profile에 다음을 추가해 줍니다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export LD_LIBRARY_PATH=/home/opc/instantclient_18_3:$LD_LIBRARY_PATH 
export TNS_ADMIN=/home/opc/instantclient_18_3/network/admin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Instant Client에서 ADW 연결을 위해서는 ADW Client Wallet을 다운 받아야 합니다. ADW 콘솔에 접속하여 Client Wallet을 다운 받습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ODA_ADW/03.download_client_wallet.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/en/cloud/paas/autonomous-data-warehouse-cloud/user/connect-download-wallet.html#GUID-B06202D2-0597-41AA-9481-3B174F75D4B1&quot;&gt;다운로드 ADW Client Credential (Wallet) 참고&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;다운 받은 Wallet의 내용은 다음과 같습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ODA_ADW/04.wallet_content.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Wallet을 Compute Cloud의 Instant Client 설치 디렉토리로 복사하여 압축을 풀어 줍니다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; scp -i privatekey wallet.zip opc@{Compute Public IP}:/home/opc/instantclient_18_3/network/admin/.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;복사한 Wallet의 압축을 풀고 난 후의 admin 디렉토리 내용은 다음과 같습니다.
&lt;img src=&quot;/assets/images/ODA_ADW/05.admin_dir_content.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;tnsnames.ora 파일을 열어서 접속할 서비스명을 확인합니다. {DB명}_high, {DB명}_medium, {DB명}_low 중에서 선택하여 사용하면 됩니다.
&lt;img src=&quot;/assets/images/ODA_ADW/06.tnsnames_ora.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;custom-component-작성하기&quot;&gt;Custom Component 작성하기&lt;/h2&gt;
&lt;p&gt;ADW에 연결하기 위한 Custom Component 작성을 위한 준비가 완료 되었습니다.
소스를 Git에서 다운 받기 위해 Git Client가 필요합니다. 다음을 실행하여 git을 설치합니다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; sudo yum install git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 Sample로 작성된 ADW 연결용 Custom Component를 다운 받습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; git clone https://github.com/mee-nam-lee/chatbot_adw.git
&amp;gt; cd chatbot_adw/bot-start
&amp;gt; npm install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;샘플 소스 코드에서 ADW 연결을 위한 정보를 수정해 줍니다.
&lt;strong&gt;chatbot_adw/bot-start/components/dbconfig.js&lt;/strong&gt; 파일을 열어서 &lt;strong&gt;user&lt;/strong&gt;, &lt;strong&gt;password&lt;/strong&gt;, &lt;strong&gt;connectString&lt;/strong&gt; 부분을 수정합니다.
tns_name은 &lt;strong&gt;tnsnames.ora&lt;/strong&gt;에서 참고하면 됩니다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;module.exports = {
    user          : process.env.NODE_ORACLEDB_USER || &quot;your_username&quot;,
    password      : process.env.NODE_ORACLEDB_PASSWORD || &quot;your_userpassword&quot;,
    connectString : process.env.NODE_ORACLEDB_CONNECTIONSTRING || &quot;your_tns_name&quot;,

 ... 생략

};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음 명령어를 수행하여 컴포넌트를 구동해 봅니다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; node index.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;3000번 포트를 사용하여 서비스가 구동되었습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;백그라운드로 구동하려면 다음과 깉이 실행합니다.
nohup node index.js &amp;gt; nohup.out  2&amp;gt;&amp;amp;1 &amp;amp;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ODA_ADW/07.component_start.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;브라우저를 통해서 해당 컴포넌트가 잘 구동되었는지 확인합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ODA_ADW/09.component_browser_confirm.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;digital-assistant-chatbot에서-custom-component-연결하기&quot;&gt;Digital Assistant (Chatbot)에서 Custom Component 연결하기&lt;/h2&gt;
&lt;p&gt;작성된 Custom Component를 챗봇에서 사용하기 위해서는 컴포넌트를 사용할 Bot에 Service로 연결해 주어야 합니다. 
Bot 화면으로 이동하여 다음과 같이 서비스 등록 화면에서 서비스 추가 버튼을 클릭합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ODA_ADW/10.add_component.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이름과 Metadata URL(위 브라우저에서 테스트 했던 URL)을 입력하고 Username과 Password를 입력합니다.(이 샘플 컴포넌트 등록을 위해서는 test로 입력)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ODA_ADW/11.register_service.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;서비스가 잘 등록된 것을 확인할 수 있습니다. &lt;strong&gt;oracledb&lt;/strong&gt; 라는 컴포넌트를 Bot Flow에서 호출하여 사용할 것입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ODA_ADW/12.after_reg_service.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;bot-flow에서-사용하기&quot;&gt;Bot Flow에서 사용하기&lt;/h2&gt;
&lt;p&gt;Bot Flow에서 등록한 Custom Component는 다음과 같이 호출합니다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; printcountry:
    component: &quot;oracledb&quot;
    properties:
      human: &quot;meenam&quot;
    transitions:
      return: &quot;done&quot;    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;테스트&quot;&gt;테스트&lt;/h2&gt;
&lt;p&gt;연결이 잘 되고 호출이 정상적으로 이루어지는지 Test UI를 통해 테스트를 싱행합니다. 
정상적으로 수행되면 다음과 같이 ADW에서 Sales History를 조회해 올 것입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ODA_ADW/13.bot_test.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;모두 완료되었습니다.&lt;/p&gt;

&lt;h2 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.oracle.com/webfolder/technetwork/tutorials/obe/cloud/adwc/OBE_Loading%20Your%20Data/loading_your_data.html&quot;&gt;Autonomous Data Warehouse Toturial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Oracle 챗봇 컴포넌트 작성을 위한 자세한 SDK 가이드는 다음을 참고하세요&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/oracle/bots-node-sdk/&quot;&gt;Oracle Bots Node.js SDK&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Node.js용 Oracle DB Driver 상세와 샘플코드는 아래를 참고하세요.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/oracle/node-oracledb&quot;&gt;Node.js Oracle Driver&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Digital Assistant(챗봇)과 Autonomous Data Warehouse(ADW) 연계하기</summary></entry><entry><title type="html">Node.js Fabric SDK를 사용하여 오라클 블록체인 클라우드에 배포된 Fabcar 체인코드 호출</title><link href="http://localhost:4000/blockchain/2018/blockchain003/" rel="alternate" type="text/html" title="Node.js Fabric SDK를 사용하여 오라클 블록체인 클라우드에 배포된 Fabcar 체인코드 호출" /><published>2018-11-01T02:50:00+09:00</published><updated>2018-11-01T02:50:00+09:00</updated><id>http://localhost:4000/blockchain/2018/blockchain003</id><content type="html" xml:base="http://localhost:4000/blockchain/2018/blockchain003/">&lt;h1 id=&quot;nodejs-fabric-client-sdk를-사용하여-오라클-블록체인-클라우드에-배포된-fabcar-체인코드-호출하기&quot;&gt;Node.js Fabric Client SDK를 사용하여 오라클 블록체인 클라우드에 배포된 Fabcar 체인코드 호출하기&lt;/h1&gt;

&lt;p&gt;지난 기고에서 &lt;strong&gt;Oracle Autonomous Blockchain Cloud Service&lt;/strong&gt;에 Hyperledger의 샘플체인 코드인 fabcar의 GO 버전과 Node.js 버전을 배포하고 REST API를 통해 배포된 체인코드를 호출하여 테스트 하는 과정에 대해 설명하였습니다. &lt;br /&gt;
이번 글에서는 이미 배포된 fabcar 체인코드를 &lt;strong&gt;node.js fabric client SDK&lt;/strong&gt;를 사용하여 호출하는 방법에 대해 설명하려고 합니다. 
Fabric Sample에는 Fabcar 체인코드와 Node.js로 작성된 client 코드를 모두 제공하고 있고, 이 코드를 사용하여 연결하는 방법에 대해 설명할 것입니다. &lt;br /&gt;
 &lt;strong&gt;Oracle Blockchain Cloud&lt;/strong&gt;는 보안성을 위하여 각 Peer와 Orderer간에 &lt;strong&gt;TLS(Transport Layer Security)&lt;/strong&gt; 통신을 하기 때문에, 제공된 샘플 Client를 그대로 사용하지 못하고, TLS 연결을 위한 코드를 몇줄 추가하여야 합니다.&lt;/p&gt;

&lt;h2 id=&quot;사전-준비-사항&quot;&gt;사전 준비 사항&lt;/h2&gt;
&lt;p&gt;이전 글에서 Fabric Sample 코드를 다운 받고, fabcar 체인 코드를 배포하는 과정에 대해 이미 다루었기 때문에 여기서는 이 글에서는 체인코드 배포 및 init 과정은 생략합니다. 체인코드가 이미 다음과 같은 환경으로 배포 되어있어야 합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;channel 명  : mychannel&lt;/li&gt;
  &lt;li&gt;chaincode 명 : fabcar&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;fabcar-client-준비하기&quot;&gt;Fabcar Client 준비하기&lt;/h2&gt;
&lt;p&gt;다운 받은 Fabcar Client가 위치하는 디렉토리로 이동합니다. fabric-samples의 fabcar 디렉토리에 다음과 같이 client 코드가 존재합니다.
&lt;img src=&quot;https://monosnap.com/image/swekMjcIDtA4wO2aObcxM1upeq6Lg3.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이 디렉토리 밑에 사용자 인증서와 Oracle Blockchain Cloud에 연결하기 위한 TLS certificate를 저장할 장소로 사용할  &lt;strong&gt;hfc-key-store&lt;/strong&gt;를 생성합니다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir  hfc-key-store
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이제 Oracle Blockchain Cloud 서비스의 콘솔 화면으로 이동하여 필요한 정보들을 다운 받을 것입니다.&lt;/p&gt;
&lt;h3 id=&quot;blockchain-instance-연결을-위한-파일-다운-받기&quot;&gt;Blockchain Instance 연결을 위한 파일 다운 받기&lt;/h3&gt;
&lt;p&gt;Blockchain Cloud 콘솔의 &lt;strong&gt;Developer Tools&lt;/strong&gt; 탭으로 이동하여 &lt;strong&gt;Download the developement package&lt;/strong&gt; 링크를 클릭합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/jQc2PHe4UteHUkWLF7Q9AC47iao9vw.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;detroitauto-instance-info.zip&lt;/strong&gt; 라는 이름의 파일이 다운로드 될 것 입니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;이 파일명은 [Organization Name]-instance-info.zip의 명명 규칙을 따르기 때문에 환경에 따라 다른 이름일 수 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;다운 받은 파일을 &lt;strong&gt;hfc-key-store&lt;/strong&gt; 디렉토리로 복사하여 압축을 풀어줍니다.
압축을 풀고 나서의 fabcar 디렉토리의 구조는 다음과 같아야 합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/D1vwR7q3lKmZuxdOswJyihUGAHIpn6.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;nodejs-sdk-설정을-위한-파일-다운-받기&quot;&gt;Node.js SDK 설정을 위한 파일 다운 받기&lt;/h3&gt;
&lt;p&gt;Fabric Client SDK를 설정을 위해 다시 Blockchain Cloud 콘솔의 &lt;strong&gt;Developer Tools&lt;/strong&gt; 탭으로 이동하여 설정을 위한 스크립트를 다운 받습니다. 사용하는 OS에 맞는 스크립트를 다운 받으면 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/v2iqS2HV2wVYnI9YJgCtC4kdeFA3jM.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;npm_bcs_client.sh&lt;/strong&gt; 파일이 다운로드 될 것입니다. 이 파일을 &lt;strong&gt;fabcar&lt;/strong&gt; 디렉토리로 복사하여 실행 시켜 줍니다.
스크립트에 실행 권한을 주고 실행합니다. 필요한 node module들이 다운로드 될 것입니다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;chmod +x npm_bcs_client.sh
./npm_bcs_client.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;node_modules 디렉토리가 잘 생성되었는지 확인 합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/tYFOiajKyeyl9WqM9CO6IYqxqDumbv.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 환경 구성은 완료 되었습니다.&lt;/p&gt;

&lt;h2 id=&quot;fabcar-client-코드-수정하기&quot;&gt;Fabcar Client 코드 수정하기&lt;/h2&gt;
&lt;p&gt;Fabcar Client에서 이 글에서 사용할 코드는 &lt;strong&gt;enrollAdmin.js, query,js, invoke.js&lt;/strong&gt; 이렇게 세가지 입니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;enrollAdmin.js : CA에 기 등록되어 있는 admin 사용자를 enroll하는 코드 입니다.&lt;/li&gt;
  &lt;li&gt;query.js : 체인코드의 query 메소드를 호출하는 코드 입니다.&lt;/li&gt;
  &lt;li&gt;invoke.js : 체인코드의 invoke 메소드를 호출하는 코드 입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;enrolladminjs-파일-수정&quot;&gt;enrollAdmin.js 파일 수정&lt;/h3&gt;
&lt;p&gt;먼저 사용자 enroll를 위해 enrollAdmin.js 파일을 수정하도록 합니다. &lt;strong&gt;기존 코드&lt;/strong&gt;를  &lt;strong&gt;Oracle Blockchian 연결을 위한 코드 (TLS 사용)&lt;/strong&gt;로 변경해 줍니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 기존 코드
fabric_ca_client = new Fabric_CA_Client('http://localhost:7054', tlsOptions , 'ca.example.com', crypto_suite);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Oracle Blockchian 연결을 위한 코드
var tlsPemFile = '/detroitauto-instance-info/artifacts/crypto/peerOrganizations/detroitauto/tlscacert/detroitauto-tlscacert.pem';
var caURL = 'YOUR CA URL';

let data = fs.readFileSync(path.join(store_path, tlsPemFile));
tlsOptions.trustedRoots.push(data);
tlsOptions.verify = true;

fabric_ca_client = new Fabric_CA_Client(caURL, tlsOptions , '', crypto_suite);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;CA URL은 Oracle Blockchain 콘솔의 Nodes 탭애서 다음과 같이 확인 합니다.
&lt;img src=&quot;https://monosnap.com/image/rqgNT7BqNRFvY2CmxoufB0cqSsWq1A.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;fabric_ca_client.enroll 함수의 &lt;strong&gt;enrollmentID, enrollmentSecret&lt;/strong&gt; 부분과 &lt;strong&gt;mspid&lt;/strong&gt; 부분을 다음과 같이 수정합니다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 기존 코드
    fabric_ca_client.enroll({
          enrollmentID: 'admin',
          enrollmentSecret: 'adminpw'
    }).then((enrollment) =&amp;gt; {
          console.log('Successfully enrolled admin user &quot;admin&quot;');
          return fabric_client.createUser(
              {username: 'admin',
                  mspid: 'Org1MSP',
                  cryptoContent: { privateKeyPEM: enrollment.key.toBytes(), signedCertPEM: enrollment.certificate }
              });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Oracle Blockchian 연결을 위한 코드
fabric_ca_client.enroll({
          enrollmentID: 'Oracle Cloud Account ID',
          enrollmentSecret: 'Oracle Cloud Account ID 패스워드'
        }).then((enrollment) =&amp;gt; {
          console.log('Successfully enrolled admin user &quot;admin&quot;');
          return fabric_client.createUser(
              {username: 'admin',
                  mspid: 'YOUR MSP ID',
                  cryptoContent: { privateKeyPEM: enrollment.key.toBytes(), signedCertPEM: enrollment.certificate }
              });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;enrollmentID는 Oracle Cloud에 접속하는 Account ID 입니다. &lt;br /&gt;
enrollmentSecret은 Oracle Cloud에 접속하는 Account 패스워드를 입력하면 됩니다. &lt;br /&gt;
mspid는 Blockchain MSP ID로 Blockchain Console에서 다음처럼 확인합니다.
&lt;img src=&quot;https://monosnap.com/image/p5X15n538wQYBRaAJL2IA8ZnrnN8aT.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;코드 수정이 완료되었으면 다음과 같이 enrollAdmin.js를 수행합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/0bPSvLXfefBiVC9BjrJzjRdyNHkLWc.png&quot; alt=&quot;Alt text&quot; /&gt;
admin 사용자의 certificate가 hfc-key-store에 잘 저장되었음을 확인 합니다.&lt;/p&gt;

&lt;h3 id=&quot;queryjs-파일-수정&quot;&gt;query.js 파일 수정&lt;/h3&gt;
&lt;p&gt;fabcar 체인코드의 ledger 조회를 위한 query.js 파일을 수정합니다.
이전 글에서 fabcar 체인코드를 배포하고 &lt;strong&gt;initLedger&lt;/strong&gt; 메소드를 수행 했었기 때문에 여기에서는 init 과정 없이 바로 query 부터 수행할 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 기존 코드
var peer = fabric_client.newPeer('grpc://localhost:7051');

// 중간 생략 ...

return fabric_client.getUserContext('user1', true);

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Oracle Blockchian 연결을 위한 코드
var tlsPemFile = '/detroitauto-instance-info/artifacts/crypto/peerOrganizations/detroitauto/tlscacert/detroitauto-tlscacert.pem';

let data = fs.readFileSync(path.join(store_path, tlsPemFile));
var peer = fabric_client.newPeer('YOUR PEER URL', {
		pem: Buffer.from(data).toString()
	});

// 중간 생략 ...

return fabric_client.getUserContext('admin', true);

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;이 예제에서는 &lt;strong&gt;admin&lt;/strong&gt; 이외의 다른 사용자를 추가하지 않았기 때문에 query.js에서 사용하는 user1을 admin으로 변경하여 실행합니다. &lt;br /&gt;
registerUser.js를 이용하여 user1을 등록하였다면 이 부분은 수정할 필요가 없습니다. &lt;br /&gt;
&lt;strong&gt;YOUR PEER URL&lt;/strong&gt;은 Blockchain 콘솔에서 다음과 같이 확인합니다.
&lt;img src=&quot;https://monosnap.com/image/KUKOe6qmmPOAd50YnEh4rAukbnaB6c.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;코드 수정이 완료되었으면 query.js 다음과 같이 실행 합니다. 기본 메소드 요청이 &lt;strong&gt;queryAllCars&lt;/strong&gt;로 되어있기 때문에 모든 ledger 정보가 리턴됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/HnTpAHNeesw9kIaYuxIwkQsRNiGp0a.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;invokejs-파일-수정&quot;&gt;invoke.js 파일 수정&lt;/h3&gt;
&lt;p&gt;fabcar 체인코드의 ledger 업데이트를 위해 invoke.js 파일을 수정합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 기존 코드
var peer = fabric_client.newPeer('grpc://localhost:7051');
channel.addPeer(peer);
var order = fabric_client.newOrderer('grpc://localhost:7050')
channel.addOrderer(order);

// 중간 생략 ...
return fabric_client.getUserContext('user1', true);

// 중간 생략 ...
	var request = {
		//targets: let default to the peer assigned to the client
		chaincodeId: 'fabcar',
		fcn: '',
		args: [''],
		chainId: 'mychannel',
		txId: tx_id
	};

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Oracle Blockchian 연결을 위한 코드
var tlsPemFile = '/detroitauto-instance-info/artifacts/crypto/peerOrganizations/detroitauto/tlscacert/detroitauto-tlscacert.pem';
var ordertlsPemFile = '/detroitauto-instance-info/artifacts/crypto/ordererOrganizations/detroitauto/tlscacert/detroitauto-tlscacert.pem';

let data = fs.readFileSync(path.join(store_path, tlsPemFile));
var peer = fabric_client.newPeer('YOUR PEER URL', {
		pem: Buffer.from(data).toString()
	});

channel.addPeer(peer);

let dataPem = fs.readFileSync(path.join(store_path, ordertlsPemFile));
var order = fabric_client.newOrderer('YOUR ORDERER URL', {
		pem: Buffer.from(dataPem).toString()
	});

channel.addOrderer(order);

// 중간 생략 ...

return fabric_client.getUserContext('admin', true);

// 중간 생략 ...
	var request = {
		//targets: let default to the peer assigned to the client
		chaincodeId: 'fabcar',
		fcn: 'changeCarOwner',
		args: ['CAR0', 'MNLEE'],
		chainId: 'mychannel',
		txId: tx_id
	};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;이 예제에서는 &lt;strong&gt;admin&lt;/strong&gt; 이외의 다른 사용자를 추가하지 않았기 때문에 invoke.js에서 사용하는 user1을 admin으로 변경하여 실행합니다. &lt;br /&gt;
registerUser.js를 이용하여 user1을 등록하였다면 이 부분은 수정할 필요가 없습니다. &lt;br /&gt;
&lt;strong&gt;YOUR PEER URL&lt;/strong&gt;은 query.js에서 사용한 URL을 이용합니다. &lt;br /&gt;
&lt;strong&gt;YOUR ORDERER URL&lt;/strong&gt;은 Blockchain 콘솔에서 다음과 같이 확인합니다.
&lt;img src=&quot;https://monosnap.com/image/eGUEk06N8v4L8dmfLiRMlTuxYlxK1H.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;코드 수정이 완료되었으면 invoke.js 다음과 같이 실행 합니다. 트랜잭션이 정상적으로 수행되었는지 확인 합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/HDfVcMgEVgsC1WIT3NBOLsrjtgGLma.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Car Owner가 잘 변경되었는지 확인하기 위해 query.js를 다시 한번 실행해 봅니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/rLnf3r1Xev9NwzuTaTetPvVJ3w32cc.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;request의 fcn, args를 변경해 가며 다른 메소드들도 수행해 보셔도 좋습니다.&lt;/p&gt;

&lt;p&gt;이상으로 node.js Fabric SDK를 사용하여 Oracle Blockchain Cloud에 연결하여 체인코들 호출하는 방법에 대해 살펴보았습니다. &lt;br /&gt;
더 자세한 사항은 아래 제품 자료를 참고하세요.&lt;/p&gt;

&lt;h2 id=&quot;관련글&quot;&gt;관련글&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;이전글 : &lt;a href=&quot;https://mee-nam-lee.github.io/docs/blockchain002/&quot;&gt;오라클 블록체인 클라우드에 Hyperledger Fabric 샘플 체인코드 Fabcar 배포하기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/en/cloud/paas/blockchain-cloud/index.html&quot;&gt;Oracle Blockchian Cloud&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/en/cloud/paas/blockchain-cloud/devapplicationtasks.html&quot;&gt;Oracle Blockchian Cloud - 애플리케이션 개발&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Node.js Fabric Client SDK를 사용하여 오라클 블록체인 클라우드에 배포된 Fabcar 체인코드 호출하기</summary></entry><entry><title type="html">오라클 블록체인 클라우드에 Hyperledger Fabric 샘플 체인코드 Fabcar 배포하기</title><link href="http://localhost:4000/blockchain/2018/blockchain002/" rel="alternate" type="text/html" title="오라클 블록체인 클라우드에 Hyperledger Fabric 샘플 체인코드 Fabcar 배포하기" /><published>2018-10-30T02:50:00+09:00</published><updated>2018-10-30T02:50:00+09:00</updated><id>http://localhost:4000/blockchain/2018/blockchain002</id><content type="html" xml:base="http://localhost:4000/blockchain/2018/blockchain002/">&lt;h1 id=&quot;오라클-블록체인-클라우드에-hyperledger-fabric-샘플-체인코드-fabcar-배포하기&quot;&gt;오라클 블록체인 클라우드에 Hyperledger Fabric 샘플 체인코드 Fabcar 배포하기&lt;/h1&gt;

&lt;p&gt;지난 기고에서 &lt;strong&gt;Oracle Autonomous Blockchain Cloud Service&lt;/strong&gt;의 편리한 관리기능에 대해 살펴보았고, 이번 글에서는 체인코드 배포 방법과 테스트하는 과정에 대해 설명하려고 합니다. Oracle Blockchain Cloud는 오픈 소스인 Hyperleder Fabric을 기반으로 하고 있기 때문에 &lt;strong&gt;Hyperledger Fabric&lt;/strong&gt;에서 제공하는 샘플 코드들을 그대로 배포할 수 있습니다. 따라서 여기에서는 Hyperleder Fabric에서 샘플 체인코드로 많이 사용되고 있는 &lt;strong&gt;fabcar&lt;/strong&gt; 예제를 사용하여 배포하는 과정을 설명하려고 합니다.&lt;/p&gt;

&lt;h2 id=&quot;fabric-sample-코드--다운-받기&quot;&gt;Fabric Sample 코드  다운 받기&lt;/h2&gt;
&lt;p&gt;먼저 Fabric-Samples를 git을 이용하여 다운 받습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/hyperledger/fabric-samples.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;다운로드가 완료되면 fabric-samples/chaincode 밑에 fabcar 샘플 폴더가 있고 그 아래 &lt;strong&gt;go&lt;/strong&gt;와 &lt;strong&gt;node&lt;/strong&gt; 샘플이 각각 다른 디렉토리로 아래와 같이 존재 합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/jCjWgqqva4Wqf0v5mOp2lyEfrX0Qb3.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;먼저 go 샘플을 Oracle Blockchain Cloud에 배포해 보도록 하겠습니다.&lt;/p&gt;

&lt;h2 id=&quot;fabcar-go-체인코드-배포하기&quot;&gt;Fabcar GO 체인코드 배포하기&lt;/h2&gt;

&lt;p&gt;샘플 fabcar.go를 fabcar_go.zip으로 압축합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/abg4v3iucJF37hzpGlyYHMlLjmWows.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 Oracle Blockchain Cloud 서비스 콘솔로 이동합니다. 콘솔 접속 및 각 메뉴는 &lt;a href=&quot;http://www.oracloud.kr/post/blockchain001/&quot;&gt;이전 글&lt;/a&gt;을 참고하세요.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Chaincodes&lt;/strong&gt; 탭으로 이동하여 &lt;strong&gt;Deploy a New Chaincode&lt;/strong&gt; 버튼을 클릭합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/YdRC18togyaXfGfRSwaMFs4j16hBkP.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Oracle Blockchain Cloud는 다음 두 가지 배포 방법을 제공하고 있습니다. &lt;strong&gt;Quick Deployment&lt;/strong&gt;는 체인코드의 설치(Install), 인스턴스화(Instantiate), 프록시에 등록하는 일련의 과정을 한페이지에서 한번에 수행할 수 있도록 배포 과정을 간략화 한 형태이고 &lt;strong&gt;Advanced Deployment&lt;/strong&gt; 옵션은 이 배포 과정을 몇 스템으로 나누어 좀더 상세한 설정을 할 수 있게 한 옵션입니다. 
여기에서는 &lt;strong&gt;Quick Deployment&lt;/strong&gt; 옵션을 선택합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/baqaaGJtYO1AebWIfWGVA0Z81UJmGC.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;아래와 같이 입력하고 chaincode source 항목에 이전 과정에서 압축해 둔 &lt;strong&gt;fabcar_go.zip&lt;/strong&gt;을 업로드 합니다. &lt;strong&gt;Submit&lt;/strong&gt;을 클릭하면 &lt;strong&gt;Confirm&lt;/strong&gt; 창이 나타나는데, 여기서 &lt;strong&gt;Yes&lt;/strong&gt;를 클릭하여 확인하면 설치 및 instantiate가 모두 완료됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/qNSkaNgBNgOpAW3TI2Za0qyn6zBhat.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;배포가 성공하였습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/67mjPuM1Yxq35uCvhwmKreidO13rcm.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Oracle Blockchain Cloud의 &lt;strong&gt;Chaincodes&lt;/strong&gt; 탭에서도 배포된 체인코드 상태를 확인할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/TO7pjKUf1rQVpC35AYHzc0oCPzgltj.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;배포가 정상적으로 잘 이루어졌는지 체인코드를 테스트 해 보도록 하겠습니다. Oracle Blockchain Cloud에서는 배포된 체인코드의 메소드 invoke 및 query를 편리하게 하기 위해 &lt;strong&gt;REST Proxy&lt;/strong&gt;라는 기능을 두고 있고 이 REST Proxy를 통해 체인코드의 각 메소드가 REST call을 통해 수행될 수 있게 해 줍니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/APaoPaF4WPpxOvBUZ4hiObFB243Hv6.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;따라서 체인코드 Transaction 호출은 REST를 지원하는 cURL 유틸리티나 Postman 같은 툴을 이용할 수 있는데, 여기에서는 Postman을 이용해 테스트 해보도록 하겠습니다.&lt;/p&gt;

&lt;p&gt;fabcar의 Ledger를 initialize하는 &lt;strong&gt;initLedger&lt;/strong&gt; 메소트를 호출할 예정입니다. 이 메소드는 invoke로 호출해야 하는 메소드이며 Oracle Blockchain에서 invoke 메소드를 호출하기 위하여 Postman을 다음과 같이 설정합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HTTP Method : POST&lt;/li&gt;
  &lt;li&gt;url : https://{&lt;strong&gt;REST-PROXY-URL&lt;/strong&gt;}/bcsgw/rest/v1/transaction/invocation&lt;/li&gt;
  &lt;li&gt;Username : Oracle Cloud 사용자 계정&lt;/li&gt;
  &lt;li&gt;Password : Oracle Cloud 사용자 계정에 대한 패스워드&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/jPJ4OoNpl4B47yChVssHvlbb4k9r0G.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;REST PROXY URL은 Oracle Blockchain Cloud의 Nodes 탭에서 다음과 같이 확인할 수 있습니다.
&lt;img src=&quot;https://monosnap.com/image/AJBkkUG5cVuVAZRSjFedmHcNlaunlX.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Headers&lt;/strong&gt; 탭에서 &lt;strong&gt;Content-Type&lt;/strong&gt;을 추가하고 &lt;strong&gt;application/json&lt;/strong&gt;으로 설정합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/EUDeB7U8vvPFg8qAoAItz9EpXPKdxc.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Body&lt;/strong&gt; 탭에서 다음과 같이 request body를 입력하고 &lt;strong&gt;Send&lt;/strong&gt;를 클릭하면 fabcar_go 체인코드에 transaction이 호출되고 호출이 성공하면 Response Body에 아래와 같이 성공 메시지를 받게 됩니다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;channel&quot;: &quot;default&quot;,
  &quot;chaincode&quot;: &quot;fabcar_go&quot;,
  &quot;chaincodeVer&quot;: &quot;v1&quot;,
  &quot;method&quot;: &quot;initLedger&quot;,
  &quot;args&quot;:[]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/PQg22Y0QvXwZDJ30h8IR0ED6w9qNDw.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;fabcar의 Ledger가 잘 생성되었는지 query 메소드를 호출하여 Ledger를 조회해 보겠습니다. invoke 방법과 유사하게 Postman을 설정합니다. REST url이 invoke와 상이하니 url을 정확히 입력합니다. &lt;strong&gt;Authorization&lt;/strong&gt; 설정과 &lt;strong&gt;Headers&lt;/strong&gt; 설정은 invoke 설정과 동일합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HTTP Method : POST&lt;/li&gt;
  &lt;li&gt;url : https://{REST-PROXY-URL}/bcsgw/rest/v1/transaction/query&lt;/li&gt;
  &lt;li&gt;Username : Oracle Cloud 사용자 계정&lt;/li&gt;
  &lt;li&gt;Password : Oracle Cloud 사용자 계정에 대한 패스워드&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Request Body를 다음과 같이 입력하고 &lt;strong&gt;Send&lt;/strong&gt;를 클릭합니다. 여기서는 모든 Fabcar Ledger를 호출하는 &lt;strong&gt;queryAllCars&lt;/strong&gt; 메소드를 호출하는 예시 입니다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;channel&quot;: &quot;default&quot;,
  &quot;chaincode&quot;: &quot;fabcar_go&quot;,
  &quot;chaincodeVer&quot;: &quot;v1&quot;,
  &quot;method&quot;: &quot;queryAllCars&quot;,
  &quot;args&quot;:[]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/oRPi1OOrFYhVXBB5YfA5KjIwiOWSr5.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;fabcar 예제에서 제공하는 다른 메소드들도 동일 방법으로 테스트 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;이제 동일 fabcar 코드 이지만 Node.js로 작성된 체인코드를 Oracle Blockchain Cloud에 배포해 보도록 하겠습니다.&lt;/p&gt;

&lt;h2 id=&quot;fabcar-nodejs-체인코드-배포하기&quot;&gt;Fabcar Node.js 체인코드 배포하기&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://github.com/hyperledger/fabric-sdk-node&quot;&gt;Hyperledger Fabric SDK for Node.js 문서&lt;/a&gt;에 의하면 지원하는 노드 버전이 &lt;strong&gt;8.9.0 or higher&lt;/strong&gt;로 되어있기 때문에, 노드 버전을 맞춰서 테스트하도록 하는 것이 좋습니다. 
다음과 같이 설치된 노드 버전을 확인 합니다.&lt;/p&gt;

  &lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/89kdq8LjN25GGgCdKzsIzaHiyJQYEs.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;fabric-samples의 fabcar 디렉토리에 &lt;strong&gt;node&lt;/strong&gt; 디렉토리로 이동합니다.
node.js로 작성된 fabcar 체인코드 샘플이 있을 것입니다. &lt;br /&gt;
&lt;strong&gt;npm install&lt;/strong&gt; 명령어를 수행하여 필요한 npm_module들을 설치 합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/gniHdsWypRkqf5prYCIzaebO76GmxW.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;설치가 완료된 디렉토리는 다음과 같습니다. 디렉토리 내의 모든 파일들을 다음과 같이 zip으로 archiving 합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/4kvaRBoGmPCxFPhf74suqkwqolwDNC.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위 fabcar_go 체인코드를 배포했던 것과 동일하게 Oracle Blockchain Cloud 콘솔의 &lt;strong&gt;Chaincodes&lt;/strong&gt; 탭에서 &lt;strong&gt;Quick Deployment&lt;/strong&gt; 옵션을 선택하여 fabcar_node 체인코드를 배포합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/g7I2KuOpXLmDUF0AthUi5DIcfqpPSz.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;배포가 완료되면 &lt;strong&gt;Chaincodes&lt;/strong&gt; 탭에서 체인코드 배포 상태를 확인할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/qIWWRRTXNJxniGgvHOEd1ujO9f21QC.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 fabcar_go를 테스트 했던 방법과 동일하게 fabcar_node 체인코드를 테스트 해보겠습니다. fabcar_go와 fabcar_node는 &lt;strong&gt;default&lt;/strong&gt;라는 동일 채널에 배포했지만 이는 서로 다른 체인 코드이기 때문에 서로 다른 Ledger 입니다. 즉 신규로 배포된 fabcar_node는 fabcar ledger가 현재 존재하지 않습니다. 이 ledger를 초기화 하기 위해서는 &lt;strong&gt;initLedger&lt;/strong&gt; 메소드를 수행해 주어야 합니다.&lt;/p&gt;

&lt;p&gt;ledger가 없음을 확인하기 위하여 &lt;strong&gt;initLedger&lt;/strong&gt; 메소드를 호출하기 전에 &lt;strong&gt;queryAllCars&lt;/strong&gt; 메소드 먼저 수행해 보겠습니다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;channel&quot;: &quot;default&quot;,
  &quot;chaincode&quot;: &quot;fabcar_node&quot;,
  &quot;chaincodeVer&quot;: &quot;v1&quot;,
   &quot;method&quot;: &quot;queryAllCars&quot;,
  &quot;args&quot;:[]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;다음에서 보듯이 Response Payload가 empty인 것을 확인할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/B3kTSF3N4QCGlY9TiHqVy0zgWj7xmG.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;initLedger&lt;/strong&gt; 메소드를 호출하여 fabcar_node ledger를 초기화 합니다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;channel&quot;: &quot;default&quot;,
  &quot;chaincode&quot;: &quot;fabcar_node&quot;,
  &quot;chaincodeVer&quot;: &quot;v1&quot;,
  &quot;method&quot;: &quot;initLedger&quot;,
  &quot;args&quot;:[]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;ledger가 초기화 되었습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/uCzXU7NLsmIkhT3cVIDErQY8CEfRqU.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 다시 &lt;strong&gt;queryAllCars&lt;/strong&gt;를 수행하면 초기화된 ledger 정보가 조회될 것입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/IScYL4RANulcQFGmNpndnhoWWVMmiD.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;특정 Car만 조회하는 &lt;strong&gt;queryCar&lt;/strong&gt; 메소드를 호출하고자 한다면 다음과 깉이 method와 args 옵션을 원하는 형태로 입력하면 됩니다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;channel&quot;: &quot;default&quot;,
  &quot;chaincode&quot;: &quot;fabcar_node&quot;,
  &quot;chaincodeVer&quot;: &quot;v1&quot;,
   &quot;method&quot;: &quot;queryCar&quot;,
  &quot;args&quot;:[&quot;CAR0&quot;]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/XzJdTAY4HJC9qRfgYqLaBP2bR1Q9Vy.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;여기까지 Oracle Autonomous Blockchain Cloud Service를 이용하여 Opensource Hyperledger fabric에서 제공하는 fabcar 샘플 체인코드를 배포하고 테스트 하는 과정에 대해 살펴보았습니다.&lt;/p&gt;

&lt;p&gt;더 자세한 사항은 아래 제품 자료를 참고하세요.&lt;/p&gt;

&lt;h2 id=&quot;관련글&quot;&gt;관련글&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;이전글 : &lt;a href=&quot;https://mee-nam-lee.github.io/docs/blockchain001/&quot;&gt;Oracle Autonomous Blockchain Cloud를 이용한 블록체인 네트워크 생성 및 편리한 관리 기능 살펴보기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;다음글 : &lt;a href=&quot;https://mee-nam-lee.github.io/docs/blockchain003/&quot;&gt;Node.js Fabric Client SDK를 사용하여 오라클 블록체인 클라우드에 배포된 Fabcar 체인코드 호출하기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/en/cloud/paas/blockchain-cloud/index.html&quot;&gt;Oracle Blockchian Cloud&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/en/cloud/paas/blockchain-cloud/user/deploy-and-manage-chaincodes.html&quot;&gt;Oracle Blockchian Cloud - 체인코드 배포 및 관리&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">오라클 블록체인 클라우드에 Hyperledger Fabric 샘플 체인코드 Fabcar 배포하기</summary></entry><entry><title type="html">Oracle Blockchain Cloud를 이용한 블록체인 네트워크 생성 및 편리한 관리 기능 살펴보기</title><link href="http://localhost:4000/blockchain/2018/blockchain001/" rel="alternate" type="text/html" title="Oracle Blockchain Cloud를 이용한 블록체인 네트워크 생성 및 편리한 관리 기능 살펴보기" /><published>2018-10-26T02:50:00+09:00</published><updated>2018-10-26T02:50:00+09:00</updated><id>http://localhost:4000/blockchain/2018/blockchain001</id><content type="html" xml:base="http://localhost:4000/blockchain/2018/blockchain001/">&lt;h1 id=&quot;oracle-autonomous-blockchain-cloud를-이용한-블록체인-네트워크-생성-및-편리한-관리-기능-살펴보기&quot;&gt;Oracle Autonomous Blockchain Cloud를 이용한 블록체인 네트워크 생성 및 편리한 관리 기능 살펴보기&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Oracle Autonomous Blockchain Cloud Service&lt;/strong&gt;는 블록체인 네크워크 구성 및 관리의 편리성을 극대화한 클라우드 서비스 입니다. 복잡한 설치 및 구성 과정이 필요하지 않으며, 쉽고 편리하게 여러 참여자 조직들로 구성된 블록체인 네트워크를 쉽게 생성해 낼 수 있습니다. 솔루션에서 제공되는 편리한 관리 콘솔을 통해 네트워크의 가시성을 확보함과 동시에 네트워크를 구성하는 각 컴포넌트의 상태 및 블록의 상태까지 모니터링 할 수 있게 해 줌으로써 분산 네트워크라는 특정으로 인해 발생하는 관리의 어려움을 해소시켜 줄 수 있습니다.&lt;br /&gt;
&lt;img src=&quot;https://monosnap.com/image/q339C1ZvLdPOLtI9chCGznCMhCckRE.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Oracle Autonomous Blockchain Cloud Service&lt;/strong&gt;는 오픈소스인 &lt;strong&gt;Hyperledger Fabric&lt;/strong&gt;을 기반으로 하고 있습니다. Hyperledger Fabric을 설치하고 수동으로 네트워크를 구성하고 보안 기능을 추가하려고 설정을 변경하는 작업을 해본 경험이 있다면, 이 과정이 얼마나 시간이 걸리고 error-prone한 과정인지 알고 계실 것입니다. Oracle Blockchain Cloud를 이용한다면 몇 번의 클릭만으로 쉽게 네트워크를 생성하고 구성하고 모니터링 할 수 있습니다. &lt;br /&gt;
이 문서에서는 블럭체인 네트워크 생성과정 (Provision)과 제공되는 관리 콘솔에서 제공하는 기능들에 대해 살펴보려고 합니다.&lt;/p&gt;

&lt;h2 id=&quot;블럭체인-네트워크-생성하기&quot;&gt;블럭체인 네트워크 생성하기&lt;/h2&gt;
&lt;p&gt;블록체인 네트워크 생성을 위해 다음과 같이 오라클 클라우드 콘솔에 접속하여 &lt;strong&gt;Autonomous Blockchain Cloud Service&lt;/strong&gt;를 선택합니다. 여기서 &lt;strong&gt;Create Instance&lt;/strong&gt; 버튼을 클릭하여 서비스를 생성하게 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/Xa0L90jPUzYuNO2v4aamsrq3Pkbm51&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;서비스 인스턴스 생성에 필요한 몇가지 정보만 입력하면 블록체인 네트워크가 바로 생성이 됩니다. 블록체인 네트워크에는 &lt;strong&gt;Founder&lt;/strong&gt;와 &lt;strong&gt;Participant&lt;/strong&gt;라는 조직의 역할이 존재하는데 &lt;strong&gt;Founder&lt;/strong&gt; 인스턴스를 생성할 경우에만 &lt;strong&gt;Create a new Network&lt;/strong&gt; 옵셥을 선택하여 생성합니다. &lt;strong&gt;Participant&lt;/strong&gt;는 기존 Network에 Join하는 것이기 때문에 &lt;strong&gt;Participant&lt;/strong&gt; 인스턴스를 생성할 때는 이 옵션을 선택하지 않습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/fyRMvK7LKcGwDWCcUW56Dza6Og1K2Y.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;인스턴스 생성 시 &lt;strong&gt;Configuration&lt;/strong&gt; 옵션에 따라 규모가 다른 네트워크가 구성되고, 현재는 다음과 같은 옵션을 제공합니다. 이 옵션과 관계 없이 네트워크 내의 Peer 수는 추후 추가 / 삭제가 자유롭습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/fYE5kooz6q29hqSNUDrIAcZblO3SlH.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;입력한 값을 확인하는 Confirmation 화면에서 &lt;strong&gt;Create&lt;/strong&gt; 버튼을 클릭하면 인스턴스가 생성됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/uEmSpXHtQ9PJDazF0FjArwj5l5OCgK.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;생성은 몇 분 정도가 소요됩니다. 완료가 되면 콘솔에 접속해 보겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/vIN4sKVU4UhpwgtJG5aH7jdqkgfJvd.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;관리-콘솔-기능-살펴보기&quot;&gt;관리 콘솔 기능 살펴보기&lt;/h2&gt;
&lt;p&gt;생성이 완료된 인스턴스의 우측 메뉴 아이콘을 선택하면 해당 인스턴스의 관리 콘솔로 이동할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/iBOSxiyEAr3kaH1sBx1kdHwp42GAqL.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;dashboard&quot;&gt;Dashboard&lt;/h3&gt;
&lt;p&gt;블록체인 네트워크의 전반적인 현황을 살펴볼 수 있게 구성되어 있는 화면 입니다. 네트워크에 구성된 &lt;strong&gt;채널(Channel)&lt;/strong&gt;, &lt;strong&gt;피어(Peer)&lt;/strong&gt;, &lt;strong&gt;오더러(Orderer)&lt;/strong&gt;, &lt;strong&gt;체인코드(Chaincode)&lt;/strong&gt; 배포 상태에 대한 개략 정보와 컴포넌트의 Health 및 네트워크내의 트랜잭선 액티비티들에 대해서 확인 할 수 있도록 구성되어 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/19gBg6bfdesB7mjQH58PyMq2sozuP8.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;network&quot;&gt;Network&lt;/h3&gt;
&lt;p&gt;블록체인 네트워크에 참여한 &lt;strong&gt;Participant&lt;/strong&gt; 조직을 보여주는 페이지 입니다. 이 페이지를 통해 &lt;strong&gt;Founder&lt;/strong&gt;의 Orderer 설정이나 Participant의 Certificate 정보를 Export할 수 있고, 새로운 Participant를 참여시키거나 기존 참여자의 Certificate를 Revoke하는 등의 Participant와 관련된 관리 작업을 수행할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/Ej99WcyOLw5yI0wHQtwQQYIbb2aP9U.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;토폴로지 뷰를 통해 Participant 간의 관계를 더 가시성 있게 볼 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/L2eiBmkCFGgDvs7zTixh24pBQAqsKn.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;nodes&quot;&gt;Nodes&lt;/h3&gt;
&lt;p&gt;기본적으로는 해당 Participant 내에 속해 있는 노드들(Peer, Orderer, Proxy, CA, console)의 정보를 보여주는 페이지 입니다. 리모트 Participant의 Peer 정보를 Import하면 이 페이지 내에서 Remote Peer 정보를 함께 볼 수 있습니다. 노드의 추가, 삭제, 설정 변경 등의 구성 작업과 기종, 중지 등의 제어 작업을 수행 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/yiYrvJKAaPRmIRqlEgSeKLahcwlS67.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;토폴로지 뷰를 통해 어느 Peer가 어느 채널에 속해 있는지 채널 관계를 더 가시성 있게 볼 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/69VwqILYU36ZYxTa9SRhu2Grm7nERu.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;channels&quot;&gt;Channels&lt;/h3&gt;
&lt;p&gt;네트워크에 구성된 채널 정보를 보여주는 페이지 입니다. 채널이란 동일 네트워크 내에서도 데이터의 Privacy를 두어야 할 경우에 사용됩니다. 같은 채널에 속한 Participant들만 채널에 속한 원장에 접근할 수 있게 됩니다. 네트워크 내애서는 필요에 따라 여러 채널을 구성할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/hRNNK3W9UYgEN5UkZA5UB6PjyviSD4.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;특정 채널을 선택하여 채널과 관련된 상세 내용(Ledger, Instantiated Chaincode, 조인된 Peer, 참여 Participant)을 볼 수 있습니다.
Ledger는 채널 별로 저장되므로 Channel 하부 메뉴에서 Ledger 기록 상태 및 Ledger Transaction 정보를 확인 할 수 있습니다. 어떤 Chaincode의 어떤 함수를 통해서 트랜잭션이 이루어졌는지 트랜잭선 수행 시의 파라미터가 무엇이었는지에 대한 내용까지 확인할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/myIZfCoDq4Ud9GsebPTu3Xn6YsKuB5.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;chaincodes&quot;&gt;Chaincodes&lt;/h3&gt;
&lt;p&gt;체인코드를 설치하고 업그레이드하는 관리 작업을 수행하고 체인 코드의 Instantiate 여부를 확인할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/ZcWamS9Dq9Q0buQkwEgfqCh5MdE4JP.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;체인 코드별 버전별 설치 상태 및 Instantiate 상태를 볼 수 있고 체인코드가 설치된 Peer의 로그 및 Instantiated 채널에 대해 확인할 수 있습니다.
&lt;img src=&quot;https://monosnap.com/image/1BadxytBPNMzEzfBBMPpaFzpFquHQ9.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;developer-tools&quot;&gt;Developer Tools&lt;/h3&gt;
&lt;p&gt;블록체인 네트워크를 바로 체험해 볼 수 있도록 샘플 체인코드를 이 페이지를 통해 바로 설치하고 테스트 해볼 수 있도록 구성된 페이지 입니다. 체인코드 개발에 대해 이해하고 있지 않은 상태에서도 제공된 샘플을 가지고 네트워크의 동작 및 트랜잭션 수행 과정에 대해 살펴 보며 이해할 수 있도록 구성되어 있습니다. 이 페이지를 통해서 Client SDK를 다운 받을 수 있고, 제공돈 코드 샘플을 통해 Oracle Blockchain Cloud에 접속하는 Client 개발을 쉽게 시작할 수 있도록 도와 줍니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Chaincode Development&lt;/strong&gt; 메뉴에서는 체인코드를 개발하기 위해 필요한 가이드 문서와 샘플 코드를 다운받을 수 있고
&lt;strong&gt;Application Development&lt;/strong&gt; 메뉴에서는 프로그램 언어별 SDK를 바로 다운 받을 수 있게 연결되어 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/uQ0ogNocR7QPuLedhIcES6SsbYYssC.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sample&lt;/strong&gt; 메뉴에서는 해당 페이지에서 바로 다음과 같은 샘플 체인코드를 바로 설치하고 트랜잭션을 수행하고 결과를 확인해 볼 수 있도록 제공하고 있습니다.
&lt;img src=&quot;https://monosnap.com/image/akOTKab3kZPAYVAVgF0drvTAYmfmV2.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;여기까지 Oracle Autonomous Blockchain Cloud Service의 관리 기능에 대해 알아보았습니다. 실제 채널을 구성하고 체인코드를 배포하는 과정에서의 콘솔 기능 사용에 대해서는 다음에 이어지는 기고를 통해 다루도록 하겠습니다.&lt;/p&gt;

&lt;p&gt;더 자세한 사항은 아래 제품 자료를 참고하세요.&lt;/p&gt;
&lt;h2 id=&quot;관련글&quot;&gt;관련글&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;다음글 : &lt;a href=&quot;https://mee-nam-lee.github.io/docs/blockchain002/&quot;&gt;오라클 블록체인 클라우드에 Hyperledger Fabric 샘플 체인코드 Fabcar 배포하기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/en/cloud/paas/blockchain-cloud/index.html&quot;&gt;Oracle Blockchian Cloud&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/en/cloud/paas/blockchain-cloud/admintasks.html&quot;&gt;Oracle Blockchian Cloud - 네트워크 관리&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Oracle Autonomous Blockchain Cloud를 이용한 블록체인 네트워크 생성 및 편리한 관리 기능 살펴보기</summary></entry><entry><title type="html">Developer Cloud의 Build Pipeline 사용하기</title><link href="http://localhost:4000/devops/2018/devcs002/" rel="alternate" type="text/html" title="Developer Cloud의 Build Pipeline 사용하기" /><published>2018-10-02T02:50:00+09:00</published><updated>2018-10-02T02:50:00+09:00</updated><id>http://localhost:4000/devops/2018/devcs002</id><content type="html" xml:base="http://localhost:4000/devops/2018/devcs002/">&lt;h1 id=&quot;developer-cloud의-build-pipeline-사용하기&quot;&gt;Developer Cloud의 Build Pipeline 사용하기&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Oracle Developer Cloud Service&lt;/strong&gt;는 자동화된 &lt;strong&gt;CI/CD&lt;/strong&gt;를 위한 빌드 파이프라인 관리를 제공하는 클라우드 서비스입니다. &lt;br /&gt;
이 문서에서는 지난번 신기능에서 소개해 드린 &lt;strong&gt;Pipleline&lt;/strong&gt; 사용법에 대해서 좀 더 상세히 알아보려고 합니다. 이전 버전의 Developer Cloud에서는 빌드를 위해서 하나의 단위 Build Job을 구성하고 해당 Job들은 서로 연관 관계를 가지지 않고 독립적으로 돌아가는 형태였습니다. &lt;br /&gt;여기서 소개하는 &lt;strong&gt;Pipeline&lt;/strong&gt; 기능은 기존 단위 Job들을 유기적으로 연결하여 Job들간의 연관성을 가지게 구성하는 것입니다.
Pipeline으로 구성된 Job들은 이전 Job의 성공 또는 실패 결과가 이후 Job의 시작 유무에 영향을 미치게 됩니다.
예를 들어 다음과 같은 Pipeline을 구성할 수 있을 것입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/1mIljkwte2V2RxHKyk6NnyurEMCRbf.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이 예시는 이전 Job들의 결과에 따라 후속 Job들의 실행이 결정되는 순차적인 관계를 가집니다. 각 Job들이 모두 정상적으로 수행되고 성공한다면 일련의 Job들로 연결된 Pipeline 빌드가 성공하고 빌드 작업이 종료되는 구조 입니다.&lt;/p&gt;

&lt;p&gt;Pipeline은 기존에 생성된 단위 빌드들을 연결하는 과정입니다. 각 단위 빌드 구성에 대해서는 이전 문서를 참고하세요. 이 문서에는 이미 생성되어 있는 Build Job을 기반으로 한 Pipeline 구성에 대해서만 다룰 것 입니다.&lt;/p&gt;

&lt;h2 id=&quot;pipeline-생성하기&quot;&gt;Pipeline 생성하기&lt;/h2&gt;
&lt;p&gt;Pipeline을 생성하기 위해서 Job 탭 우측의 &lt;strong&gt;Pipelines&lt;/strong&gt; 탭을 클릭하여 이동합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/HdsW0kIxTH4sLaxe9z6ry3tpN7Zqrb.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;New Pipeline&lt;/strong&gt; 버튼을 클릭하여 위 예시에서 보았던 것과 유사한 순차형 Pipeline을 생성해 보도록 하겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/P8xtVZiHdfT989ZdDIeYfH3Q9iX2Zh.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Pipeline 이름을 다음과 같이 입력하고 &lt;strong&gt;Create&lt;/strong&gt;를 클릭합니다. 나머지 설정은 기본값으로 둡니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/N7gjKmrBVZR5MfpD9qsOkaDwBXSccZ.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;왼편의 &lt;strong&gt;Jobs&lt;/strong&gt; 리스트에서 이미 구성되어있는 Job을 선택하여 오른쪽 캔버스에 드래그 합니다. Job들 간의 순서를 화살표를 드래그 앤 드롭 하여 연결합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/4U0OjFhvVIhZ2qHqfcukLUlQqF0FoO.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;pipeline이 구성되었고 바로 빌드를 수행하려면 우측의 &lt;strong&gt;Run&lt;/strong&gt; 버튼을 클릭합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/n4lTI2mKxCbVB2MbPbFO38tYthgSGM.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Pipeline의 각 빌드 Job들이 순서대로 Queuing 되면서 실행되는 것을 볼 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/pTZOikxhnVZu6sXfAEw5iK3390VDZb.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;pipeline의 빌드가 모두 완료되면 빌드된 instance들의 상태 및 내용을 볼 수 있습니다. 각 Job들의 빌드 #number를 클릭하면 각 빌드별 로그도 확인할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/73g5YVMhP9Ncn5yDPR58jtVTSleDqr.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;다음의 예시와 같은 병렬 처리 흐름을 가지는 Pipeline도 작성할 수 있습니다.
아래의 Pipeline에서는 Job1이 완료된 후 Job2, Job3, Job4의 빌드가 트리거 되고 Build Queue에 쌓이는 순서에 따라 처리됩니다. Job2, Job3, Job4가 서로 다른 빌드 VM을 사용한다면 동시에 수행될 수도 있습니다. 동일한 빌드 VM을 사용하여 빌드가 수행된다면, Queue에 먼저 쌓이는 순서대로 처리 됩니다.
Job5는 Job4가 완료된 후 트리거 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/4aAYBnHZlmuaWz8qaxhS0hymLqyEwg.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이 Pipeline을 실행해 보면 다음과 같이 Job1 종료 후  Job2, Job3, Job4가 Queuing 된 것을 볼 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/syp4FDT5YSDCGOcPQUqGZ5RxH16oIK.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위에서 설명한 Pipeline은 이전 Job 성공했을 때 후속 Job으로 넘어가는 것 만 예시하였으나, 이전 Job이 실패 하였을 경우에 처리하는 Job을 두고 싶을 경우에는 연결된 화살표를 더블클릭하여 조건을 &lt;strong&gt;Failed&lt;/strong&gt;로 변경해 주면 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/sLIv4H9JaHywNvbbSEMXW0FETPHbzZ.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;여기까지 Developer Cloud 사용하여 여러 빌드들을 조합하여 일련의 빌드 순서를 만드는 Pipeline이라는 기능에 대해 알아보았습니다.
더 자세한 사항은 아래 제품 자료를 참고하세요&lt;/p&gt;

&lt;h2 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/en/cloud/paas/developer-cloud/csdcs/managing-project-jobs-and-builds.html#GUID-8A6787EF-2D7E-4322-A7C9-00509920FC1C&quot;&gt;Oracle Developer Cloud - Pipeline&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Developer Cloud의 Build Pipeline 사용하기</summary></entry><entry><title type="html">Developer Cloud를 사용한 Docker Image 빌드 및 OCIR에 Docker Image Push하기</title><link href="http://localhost:4000/devops/2018/devcs001/" rel="alternate" type="text/html" title="Developer Cloud를 사용한 Docker Image 빌드 및 OCIR에 Docker Image Push하기" /><published>2018-09-20T02:50:00+09:00</published><updated>2018-09-20T02:50:00+09:00</updated><id>http://localhost:4000/devops/2018/devcs001</id><content type="html" xml:base="http://localhost:4000/devops/2018/devcs001/">&lt;h1 id=&quot;developer-cloud를-사용한-docker-image-빌드-및-ociroracle-cloud-infrastructure-registry에-docker-image-push하기&quot;&gt;Developer Cloud를 사용한 Docker Image 빌드 및 OCIR(Oracle Cloud Infrastructure Registry)에 Docker Image Push하기”&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/uW0UJiWfZhsj6piiD3rMdVXqZYyNTE.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Oracle Developer Cloud Service는 자동화된 CI/CD를 위한 빌드 파이프라인 관리를 제공하는 클라우드 서비스입니다. &lt;br /&gt;
이 문서에서는 지난번 신기능에서 소개해 드린 여려가지 Builder 중에서 Docker Builder에 대해 좀 더 상세히 알아보려고 합니다. Developer Cloud의 Docker Builder를 사용하면 로컬 환경에 Docker 환경을 구성할 필요 없이 Developer Cloud가 제공하는 환경 하에서 Docker Image를 빌드하고 &lt;a href=&quot;https://cloud.oracle.com/containers/registry&quot;&gt;Oracle Cloud Infrastructure Registry (OCIR)&lt;/a&gt;을 포함한 Docker Registry에 빌드한 이미지를 Push할 수 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;oracle-container-infrastructure-registry에-repository-생성하기&quot;&gt;Oracle Container Infrastructure Registry에 Repository 생성하기&lt;/h2&gt;
&lt;p&gt;Docker Registry로 Oracle Cloud Infrastructure Registry(이하 OCIR)를 사용하기 위해서는 Oracle Cloud Infrastructure(이하 OCI) 콘솔로 로그인 하여 Registry를 생성하여야 합니다. OCIR 메뉴는 아래와 같이 접근 합니다.
&lt;img src=&quot;https://monosnap.com/image/QXRofQWho5YNEWtvedLmA4gh1oFnw0.png&quot; alt=&quot;OCIR 메뉴&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create Repository&lt;/strong&gt; 버튼을 클릭하여 새로운 Repository를 하나 생성합니다.
&lt;img src=&quot;https://monosnap.com/image/sT1IqQOYCSyQExMITE3jbO4BmjGPU2.png&quot; alt=&quot;Create Repository&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/UUfBflIWQss148sSMR6hH2I4C0uXvr.png&quot; alt=&quot;Create Repository&quot; /&gt;&lt;/p&gt;

&lt;p&gt;새로운 빈 Repository가 생성되었습니다. 이 Repository에 앞으로 Developer Cloud를 통해 빌드한 이미지를 Push할 것입니다.
&lt;img src=&quot;https://monosnap.com/image/MwxCiOYAJGHoKaXQzMDYayVLTfC4VB.png&quot; alt=&quot;New Repository&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;oracle-container-infrastructure-registry-등록하기&quot;&gt;Oracle Container Infrastructure Registry 등록하기&lt;/h2&gt;
&lt;p&gt;Developer Cloud에서 OCIR을 Docker Registry로 등록하기 위해서는 OCI의 사용자 Token이 필요합니다.
OCI의 사용자 Token은 다음과정을 통해 얻을 수 있습니다. 우측의 사용자 아이콘을 클릭하여 &lt;strong&gt;User Settings&lt;/strong&gt; 메뉴를 클릭합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/V8NOylU0L7EV3R4IeK7uBtr1YSb4Rl.png&quot; alt=&quot;User Settings&quot; /&gt;&lt;/p&gt;

&lt;p&gt;좌측 메뉴의 &lt;strong&gt;Auth Token&lt;/strong&gt; 메뉴를 클릭하고 &lt;strong&gt;Generate Token&lt;/strong&gt; 버튼을 클릭하여 접속을 위한 Token을 새롭게 생성합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/23SA9JiV6UXPcjw12TP66V2HSOUi8m.png&quot; alt=&quot;Token&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Generate Token&lt;/strong&gt; 버튼 클릭 후 다음 창에 나오는 &lt;strong&gt;GENERATED TOKEN&lt;/strong&gt;을 다음 사용을 위해 복사해 둡니다.
&lt;img src=&quot;https://monosnap.com/image/8BweeZdXIFjobBF9ItsFMXr5iPNR5F.png&quot; alt=&quot;Token&quot; /&gt;&lt;/p&gt;

&lt;p&gt;OCIR 등록을 위해 Developer Cloud 콘솔로 이동합니다.
좌측 메뉴에서 &lt;strong&gt;Docker Registry&lt;/strong&gt;를 선택하고 &lt;strong&gt;Link External Registry&lt;/strong&gt; 버튼을 클릭하여 OCIR에서 새롭게 생성한 레지스트리를 등록합니다.
&lt;img src=&quot;https://monosnap.com/image/mATKELea0932uoMpKTsR73FEzNbskb.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Registry URL은 사용하는 데이터 센터 위치에 따라 다음 규칙에 맞게 입력합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&amp;lt;region-code&amp;gt;&lt;/strong&gt;.ocir.io&lt;/li&gt;
  &lt;li&gt;Frankfurt : fra&lt;/li&gt;
  &lt;li&gt;Ashburn : iad&lt;/li&gt;
  &lt;li&gt;London : lhr&lt;/li&gt;
  &lt;li&gt;Phoenix : phx&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/W1I5vephtZzF7WHW5Qsg4lVE0EbPYA.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Basic Authentication 옵션을 선택하고 ID는 &lt;strong&gt;tenancy_name/username&lt;/strong&gt; 형태로 입력
Password는 위 과정에서 생성해둔 &lt;strong&gt;Auth Token&lt;/strong&gt;을 입력합니다.&lt;/p&gt;

&lt;p&gt;Registry가 등록되었고 OCIR에서 생성한 Registry가 보일 것입니다.
&lt;img src=&quot;https://monosnap.com/image/y4G8i1saiZxoVLcXYqXNlGXrvN31d4.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;vm-template-구성하기&quot;&gt;VM Template 구성하기&lt;/h2&gt;
&lt;p&gt;Developer Cloud에서 Build를 구성할 때 각 Build 환경마다 서로 다른 Software Package들을 필요로 할 수 있기 때문에, 각자의 Build 내용에 따라 필요한 Software 군들을 가지는 VM Template을 생성해야 합니다.
 여기서는 Docker 빌드를 구성할 것이 때문에 Docker가 설치되어 있는 VM이 필요하게 됩니다. 이 빌드에 사용하는 VM을 구성하기 위해서 Developer Cloud의 &lt;strong&gt;Organization&lt;/strong&gt; 메뉴로 이동합니다.
 &lt;strong&gt;Username&lt;/strong&gt; 아이콘을 클릭하면 다음과 같이 Organization으로 이동하는 메뉴가 보이게 됩니다.
 &lt;img src=&quot;https://monosnap.com/image/0PNv2sHfMyLzjsFZWIbFI59U1BiBLG.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;New Templates&lt;/strong&gt; 버튼을 클릭하여 새로운 탬플릿을 생성합니다
 &lt;img src=&quot;https://monosnap.com/image/OeigMWNBzdqrKehaBu8uP8sU1Q5p2K.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;원하는 이름과 원하는 OS 버전을 선택합니다.
&lt;img src=&quot;https://monosnap.com/image/pgyAAEKKSLfmKMWkhgrDQNe0JH0nj8.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Configure Software&lt;/strong&gt; 버튼을 클릭하여 원하는 Software들을 선택합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/zZEaqReJ6csJEaYozKZwuT7MN7Lek0.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;VM Template이 구성되었으면 그 Template을 사용하는 VM을 생성하여야 합니다.
&lt;strong&gt;Virtual Machine&lt;/strong&gt; 메뉴로 이동하여 &lt;strong&gt;New VM&lt;/strong&gt; 버튼을 클릭하여 새로운 VM을 생성합니다.
이 VM은 Build가 수행중일때만 구동되고 Build가 완료되면 자동으로 정지 됩니다.
&lt;img src=&quot;https://monosnap.com/image/K5M3k2GqUkGVxfqYRcOkNZpciflc9R.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;빌드에 사용할 VM이 잘 생성된 것을 확인 합니다.
&lt;img src=&quot;https://monosnap.com/image/6qtnwUbcA1fdSssImnD1Jex7IiVHmS.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;build-구성하기&quot;&gt;Build 구성하기&lt;/h2&gt;
&lt;p&gt;이 문서에서는 Developer Cloud 서비스 인스턴스 생성 및 Code Repository 설정에 대해서는 다루지 않습니다.
Developer Cloud 인스턴스 생성 및 접속, 신규 프로젝트 생성 방법은 다음을 참고합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/en/cloud/paas/developer-cloud/csdcs/accessing-oracle-developer-cloud-service.html#GUID-10C35594-34F6-4040-96AB-A2C8AA88C010&quot;&gt;Developer Cloud 인스턴스 생성 및 접속&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.oracle.com/webfolder/technetwork/tutorials/obe/cloud/developer/get_started_project/get_started_project.html&quot;&gt;Develoer Cloud에 프로젝트 생성&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Code Repository에 Docker Build에 사용할 소스코드와 Dockerfile이 있어야 합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/44fs5c4gwcg6LqLqREdJgCXNI7s7Qw.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 Build를 구성해 보겠습니다.
&lt;strong&gt;Build&lt;/strong&gt; 메뉴에서 &lt;strong&gt;New Job&lt;/strong&gt; 버튼을 클릭하여 새로운 Build Job을 생성합니다.
&lt;img src=&quot;https://monosnap.com/image/tgIsDjvOMlu1RhxhuE0uk9g7iNt99M.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Build 구성에서 다른 항목들의 설명은 생략하고 Docker Build와 관련된 내용만 살펴보겠습니다. &lt;a href=&quot;http://www.oracloud.kr/post/devcs000/&quot;&gt;이전 문서&lt;/a&gt;에서 Developer Cloud에 새롭게 추가된 Builder들에 대해서 소개했었습니다.
이 Builder들 중 Docker Builder만 살펴보면 다음과 같습니다.
&lt;img src=&quot;https://monosnap.com/image/kVwBAGnBPiWQajvnv3azHjDh1Flyno.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이 Build Job에서는 Docker Image를 빌드하고 OCIR의 Registry에 빌드된 Image를 Push할 것이 때문에 Build Step을 다음과 같이 구성합니다.
Docker Build Step에서 Image Name은 OCIR에서 생성한 Registry에 Push할 것이기 때문에 다음 규칙으로 적어 줍니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Image Name : &lt;strong&gt;tenancy-name/registry-name&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/rvzZX3FeJFpl2ND7qUllBfwCwODpeY.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;OCIR에 로그인하기 위하여 &lt;strong&gt;Docker Login&lt;/strong&gt; Step에 OCIR 접속 정보를 다음과 같이 적어 줍니다. Registry Host는 위에서 설명한 Region 별 접근 방법을 따릅니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/hmFbP5yvDght6slm426wAKE4EXGZzU.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;빌드된 Docker Image를 OCIR Registry에 Push하기 위해 &lt;strong&gt;Docker Push&lt;/strong&gt; Step을 추가합니다. Image Name은 위 Docker Build Step에서 사용한 Image Name을 참고하면 되고 이 이름에 따라 Full Image Name이 자동 완성됩니다.
&lt;img src=&quot;https://monosnap.com/image/PZKdFzHlpd4Rykk2zDlRqWHMvaiHUu.png&quot; alt=&quot;Alt text&quot; /&gt;
빌드가 구성되었으면 구성을 저장하고 &lt;strong&gt;Build Now&lt;/strong&gt;를 클릭하여 Build Job을 수행합니다. 
빌드가 Queuing 되고 정상적으로 수행이 되고 나면 빌드된 Docker Image가 OCIR Registry에 Push되어 있을 것입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/nLxwGMVa3pdeTexlweAgCP692a68c2.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;빌드가 성공하였으므로 Developer Cloud 서비스의 Docker Registry에서 Push된 이미지 정보를 확인할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/VUfg3hwAXT3hrUoinMMxiTwiSfCc2C.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;OCIR의 Registry 화면에서 확인하면 다음과 같습니다.
&lt;img src=&quot;https://monosnap.com/image/zgagO00JaWhOgR3395wQ71hU7OTXrB.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;여기까지 Developer Cloud 사용하여 로컬의 개발자 환경에 별도의 Docker를 구성할 필요없이 Cloud 상에서 Docker Image를 빌드하고 바로 OCIR로 빌드된 이미지를 Push하는 방법에 대해 알아보았습니다.&lt;/p&gt;

&lt;h2 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/en/cloud/paas/developer-cloud/csdcs/managing-project-jobs-and-builds.html#GUID-A29C7055-6E8F-424D-B212-E0EE7E236991&quot;&gt;Oracle Developer Cloud - Adding a Docker Builder&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;[Oracle Cloud Infrastructure Registry (OCIR)](https://docs.cloud.oracle.com/iaas/Content/Registry/Concepts/registryoverview.htm?TocPath=Services&lt;/td&gt;
          &lt;td&gt;Registry&lt;/td&gt;
          &lt;td&gt;_____0)&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Developer Cloud를 사용한 Docker Image 빌드 및 OCIR(Oracle Cloud Infrastructure Registry)에 Docker Image Push하기”</summary></entry></feed>