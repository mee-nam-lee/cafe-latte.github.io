<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-05-31T11:17:23+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">MN Lee’s IT Blog</title><subtitle>이 사이트의 Article들은 개인의 경험을 기술한 것으로 특정 제품의 공식 가이드가 아닙니다. 기술된 제품들의 버전에 따라 문서의 방법이 바르게 동작하지 않을 수 있습니다.</subtitle><entry><title type="html">Low Code Development 솔루션 - Oracle Visual Builder Cloud</title><link href="http://localhost:4000/cloud/2019/vbcs/" rel="alternate" type="text/html" title="Low Code Development 솔루션 - Oracle Visual Builder Cloud" /><published>2019-05-30T00:00:00+09:00</published><updated>2019-05-30T00:00:00+09:00</updated><id>http://localhost:4000/cloud/2019/vbcs</id><content type="html" xml:base="http://localhost:4000/cloud/2019/vbcs/">&lt;p&gt;Oracle PaaS 중에 Visual Builder라는 &lt;strong&gt;Low Code Development&lt;/strong&gt; 솔루션 Cloud Service가 있다. &lt;strong&gt;웹&lt;/strong&gt;과 &lt;strong&gt;모바일&lt;/strong&gt;을 애플리케이션을 Drag &amp;amp; Drop 만으로 개발할 수 있고, 데이터베이스도 내장하고 있어서 별도의 저장 공간을 준비하지 않아도 이 솔루션 만으로 간단히 애플리케이션을 개발해 낼 수가 있다.&lt;/p&gt;

&lt;p&gt;이전 버전은 Page Navigation Flow 등의 가시성 부분은 제공되지 않았었는데, 현재의 버전에서는 Page Navigation Flow 뿐만 아니라 Action에 대한 Flow도 가시적으로 보여주기 때문에 직관적 Flow UI를 통해 애플리케이션을 쉽게 개발 할 수 있다.&lt;/p&gt;

&lt;p&gt;Cloud Console에 접속하여 애플리케이션을 생성하면 다음과 같은 작업을 수행할 수 있다.
Web 또는 Mobile 애플리케이션을 생성하거나, 데이터를 담을 Business Object를 생성하거나, 기존의 REST 서비스를 연결하거나 Process Cloud 서비스와의 연동을 수행 할 수 있다.&lt;/p&gt;

&lt;p&gt;생성된 Business Object나 Service Integration은 Web, Mobile 앱에서 공통으로 사용할 수 있다.&lt;/p&gt;

&lt;h1 id=&quot;start-building-your-application&quot;&gt;Start Building Your Application&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/vbcs/01_newapps.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;business-object&quot;&gt;Business Object&lt;/h1&gt;

&lt;p&gt;Business Object를 생성하고 Object간의 Relation을 생성하고 나면 다음과 같은 Object 간의 relation을 보여주는 &lt;strong&gt;Diagram&lt;/strong&gt;을 보여준다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/vbcs/02_diagram.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Business Object는 REST API를 통해 참조되기 때문에 Object 생성 시 &lt;strong&gt;REST API&lt;/strong&gt;도 자동으로 생성해 준다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/vbcs/03_endpoints.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이 Business Object를 Component의 Data Source로 사용하면 자동으로 &lt;strong&gt;CRUD&lt;/strong&gt;를 하는 Page를 만들어 주게 된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/vbcs/04_employee_page.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;event&quot;&gt;Event&lt;/h1&gt;

&lt;p&gt;이벤트 발생 시 수행하는 Action을 다음처럼 일련의 Chain으로 연결한 Flow를 작성할 수 있다. 이 Action에서 다른 Page로 Navigation을 하거나 사진을 찍는 Native Feature를 사용할 수도 있고, 커스텀 JavaScript 모듈도 호출할 수가 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/vbcs/05_action_chain.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;page-flow&quot;&gt;Page Flow&lt;/h1&gt;

&lt;p&gt;Page들이 생성되고 Navigation 관계가 연결되면 Page들 간의 Flow를 시각적으로 보여준다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/vbcs/06_flow.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;view-mode&quot;&gt;View Mode&lt;/h1&gt;

&lt;p&gt;View Mode를 &lt;strong&gt;Live / Design / Code&lt;/strong&gt;로 변경해 가며 개발 및 테스트 할 수 있다. Live Mode에서는 Test Data를 가지고 실제로 동작되는 모습을 확인해가면서 개발할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;live-mode&quot;&gt;Live Mode&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/vbcs/07_live.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;code-mode&quot;&gt;Code Mode&lt;/h2&gt;

&lt;p&gt;자동으로 생성된 Page Code를 확인하고 직접 코드를 작성해서 넣을 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/vbcs/08_code.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;function--custom-logic&quot;&gt;Function / Custom Logic&lt;/h1&gt;

&lt;p&gt;커스텀 로직을 &lt;strong&gt;JavaScript&lt;/strong&gt; Fuction으로 작성할 수도 있다. Function Scope에 따라 필요한 곳에서 &lt;strong&gt;JS&lt;/strong&gt; 메뉴를 클릭하여 Function을 작성해 넣으면 된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/vbcs/20_js.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;cicd&quot;&gt;CI/CD&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Source View&lt;/strong&gt; 메뉴에서 보면 자동으로 생성된 개발 산출물 소스들을 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/vbcs/09_source_view.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이 코드들을 DevOps 툴인 &lt;strong&gt;Oracle Developer Cloud&lt;/strong&gt;와 연계하여 CI/CD 구성도 가능하다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/vbcs/09_devcs.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Git Push를 수행하면 연결된 Developer Cloud의 Git Repository로 Push 되고, 자동으로 빌드되도록 구성할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/vbcs/10_push.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Developer Cloud에 소스가 들어가 있는걸 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/vbcs/11_devcs.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;screen&quot;&gt;Screen&lt;/h1&gt;

&lt;p&gt;디바이스 및 Screen에 따라 변경되는 &lt;strong&gt;Responsive Web&lt;/strong&gt; 디자인을 따르고 있기 때문에, 보기 유형을 바꿔가며 확인 할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;phone-portrait&quot;&gt;Phone Portrait&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/vbcs/12_screen.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;tablet-portrait&quot;&gt;Tablet Portrait&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/vbcs/13_tablet.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;component&quot;&gt;Component&lt;/h1&gt;

&lt;p&gt;Visual Develeper에서는 &lt;strong&gt;Oracle JET&lt;/strong&gt; 컴포넌트를 사용한다. 이미 설치된 Component는 아래처럼 확인해 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/vbcs/21_component.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;추가적인 Component가 필요하다면, Oracle JET 페이지를 참고하여 가져올 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/vbcs/22_jet.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.oracle.com/webfolder/technetwork/jet/jetCookbook.html&quot;&gt;Oracle JET Cookbook 바로가기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;publish&quot;&gt;Publish&lt;/h1&gt;

&lt;p&gt;개발이 완료되었으면 &lt;strong&gt;Publish&lt;/strong&gt; 메뉴를 통해 Publish한다. Publish된 애플리케이션은 &lt;strong&gt;Live&lt;/strong&gt; 상태가 되며 Read-only로면 Open 할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/vbcs/23_publish.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Publish 전에도 언제든지 &lt;strong&gt;Run&lt;/strong&gt; 버튼을 클릭하여 서비스되는 모습을 확인하며 테스트 해 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/vbcs/23_test.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.oracle.com/en_US/visual-builder&quot;&gt;Oracle Visual Builder Cloud&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="Low Code Development" /><category term="Visual Builder" /><category term="PaaS" /><summary type="html">Oracle PaaS 중에 Visual Builder라는 Low Code Development 솔루션 Cloud Service가 있다. 웹과 모바일을 애플리케이션을 Drag &amp;amp; Drop 만으로 개발할 수 있고, 데이터베이스도 내장하고 있어서 별도의 저장 공간을 준비하지 않아도 이 솔루션 만으로 간단히 애플리케이션을 개발해 낼 수가 있다.</summary></entry><entry><title type="html">Docker Compose를 사용한 WebLogic, MySQL 개발 환경</title><link href="http://localhost:4000/weblogic/2019/weblogic-mysql/" rel="alternate" type="text/html" title="Docker Compose를 사용한 WebLogic, MySQL 개발 환경" /><published>2019-05-22T00:00:00+09:00</published><updated>2019-05-22T00:00:00+09:00</updated><id>http://localhost:4000/weblogic/2019/weblogic-mysql</id><content type="html" xml:base="http://localhost:4000/weblogic/2019/weblogic-mysql/">&lt;p&gt;Local PC 환경에서 WebLogic을 데이터베이스와 함께 테스트하는 환경을 구축할 필요가 있을 때, 내 PC에 각종 소프트웨어들을 다 설치할 필요 없이 표준 이미지로 제공되는 Docker Image 이용하여 구동만 하면 매우 편리할 때가 많다.&lt;/p&gt;

&lt;p&gt;여기에서는 MySQL을 DB로 사용하는 WebLogic 환경을 구축하는 간단한 방법을 설명할 것이다.&lt;/p&gt;

&lt;h1 id=&quot;docker-compose파일-생성&quot;&gt;Docker-Compose 파일 생성&lt;/h1&gt;

&lt;p&gt;Docker Compose 구성 파일에서 사용하는 필요한 내용들을 미리 준비해 둔다.&lt;/p&gt;

&lt;h2 id=&quot;필요-파일&quot;&gt;필요 파일&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Docker Images : MySQL과 WebLogic Image는 &lt;a href=&quot;http://dockerhub.com&quot;&gt;Docker Hub&lt;/a&gt;에서 받을 수 있다.&lt;/li&gt;
  &lt;li&gt;MySQL JDBC Driver : &lt;a href=&quot;https://dev.mysql.com/downloads/connector/j/&quot;&gt;Download Connector/J&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;다운 받은 jar 파일을 작업 디렉토리에 복사한다.&lt;/li&gt;
      &lt;li&gt;작업 디렉토리는 WebLogic Container에 Volume으로 Attach 할 것이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;domain.properties 파일 : 도메인 계정 정보를 담는 파일이다. 아래 내용을 참고해서 작업 디렉토리 내에 생성해 둔다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;domainproperties&quot;&gt;domain.properties&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;username=weblogic
password=welcome1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;docker-composeyml&quot;&gt;docker-compose.yml&lt;/h3&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3'&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mysql&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name &lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;some-mysql&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;welcome1&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;MYSQL_DATABASE&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mysql&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./mysqldata:/var/lib/mysql&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;.:/mnt/tmp&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3306:3306&quot;&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;33060:33060&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;hostname&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mysql&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;--default-authentication-plugin=mysql_native_password&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;weblogic&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;store/oracle/weblogic:12.2.1.3-dev&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;myweblogic&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;PRE_CLASSPATH&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/u01/oracle/properties/mysql-connector-java-8.0.16.jar:${PRE_CLASSPATH}&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;depends_on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mysql&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;.:/u01/oracle/properties&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;7001:7001&quot;&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;9002:9002&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;stdin_open&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;tty&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;파일이 완료되었으면 컨테이너를 구동한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;mysql-user-생성&quot;&gt;MySQL User 생성&lt;/h1&gt;
&lt;p&gt;애플리케이션에서 사용할 DB User를 생성한다. 이 User는 WebLogic에서 DataSource를 생성할 때 사용할 것이다.
현 작업 디렉토리가 MySQL Container에 Volume으로 연결되어 있으므로 사용자를 생성할 &lt;strong&gt;createuser.sql&lt;/strong&gt; 파일을 현 디렉토리 내에 다음 내용으로 생성한다. 별도의 필요한 DDL/DML이 있다면 여기에 추가하면 좋을 것이다.&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'user1'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDENTIFIED&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'welcome1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;GRANT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ALL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PRIVILEGES&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TO&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'user1'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'%'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음 command를 실행하면 사용자가 추가 될 것이다. 새롭게 생성되는 사용자는 &lt;strong&gt;mysql_native_password&lt;/strong&gt; plugin을 기본하도록 설정되어 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; docker exec -it some-mysql sh -c &quot;mysql -uroot -pwelcome1 mysql &amp;lt; /mnt/tmp/createuser.sql&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/mysql/01_mysql_user.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;datasource-생성&quot;&gt;DataSource 생성&lt;/h1&gt;

&lt;p&gt;WebLogic Console에 접속해서 DataSource를 생성한다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://localhost:9002/console&quot;&gt;https://localhost:9002/console&lt;/a&gt;로 접속한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/mysql/02_ds1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;적당한 드라이버를 선택한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/mysql/02_ds2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;사용자 생성 시 사용했던 Password를 입력한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/mysql/02_ds3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Connection을 Test 해본다. 입력이 잘 되었다면 성공할 것이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/mysql/02_ds4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Finish&lt;/strong&gt;를 클릭하면 DataSource가 생성된다.&lt;/p&gt;

&lt;p&gt;이제 애플리케이션에서 Connection을 얻어다 사용하기만 하면 된다.&lt;/p&gt;</content><author><name></name></author><category term="WebLogic" /><category term="MySQL" /><category term="Docker" /><category term="Docker Compose" /><summary type="html">Local PC 환경에서 WebLogic을 데이터베이스와 함께 테스트하는 환경을 구축할 필요가 있을 때, 내 PC에 각종 소프트웨어들을 다 설치할 필요 없이 표준 이미지로 제공되는 Docker Image 이용하여 구동만 하면 매우 편리할 때가 많다.</summary></entry><entry><title type="html">Oracle Storage Classic의 Object 지우기 - Bulk Delete REST API 이용</title><link href="http://localhost:4000/cloud/2019/storage-classic-bulk-delete/" rel="alternate" type="text/html" title="Oracle Storage Classic의 Object 지우기 - Bulk Delete REST API 이용" /><published>2019-05-09T00:00:00+09:00</published><updated>2019-05-09T00:00:00+09:00</updated><id>http://localhost:4000/cloud/2019/storage-classic-bulk-delete</id><content type="html" xml:base="http://localhost:4000/cloud/2019/storage-classic-bulk-delete/">&lt;p&gt;Object Storage에서 Container를 지우고 싶을 경우, Container 내에 Object들이 존재한다면 &lt;strong&gt;먼저 Object들을 다 지우고 Container를 지워야 한다.&lt;/strong&gt;
오라클 Cloud에서는 이 작업을 Cloud Console을 통해서 수행할 수 있지만, Object가 수천개가 넘어 간다면 이를 일일이 수동으로 삭제하는 것이 거의 불가능하다.&lt;/p&gt;

&lt;p&gt;따라서 이 경우 REST API를 이용하여서 Object를 지워줘야 하는데, 이를 위해서 &lt;strong&gt;Bulk Delete&lt;/strong&gt;하는 REST API를 제공한다.
이를 통해서 금방 다 지울 수 있을 것 같지만 지우려고 하는 Object가 수천개라면 수천 개 List를 Bulk Delete API에 한방에 보내서 처리할 수가 없다.
테스트 해 본 결과 안정적으로 처리 후 응답을 받을 수 있는 Object 갯수는 70개 내외였다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;bulk-delete의 input object 수를 상황에 따라 적절히 조절하면서 스크립트를 수행한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Object List를 70개 내외로 잘라내서 매번 REST API를 돌려주는 것도 상당히 번거로운 일이기 때문에, 다음과 같이 정해진 수의 Input을 받아서 Bulk Delete API를 호출하는 스크립트를 만들어 주면 작업은 훨씬 간편해 진다.&lt;/p&gt;

&lt;h1 id=&quot;bulk-deletesh&quot;&gt;bulk-delete.sh&lt;/h1&gt;

&lt;p&gt;스크립트의 내용은 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Connection Info&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ContainerName&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;iddomain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Identity Domain Name&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;User Name&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Password&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# get AuthToken&lt;/span&gt;
curl &lt;span class=&quot;nt&quot;&gt;-I&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; GET &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;X-Storage-User: Storage-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;iddomain&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;X-Storage-Pass: &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
      https://&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;iddomain&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;.us.storage.oraclecloud.com/auth/v1.0 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; output.txt 

&lt;span class=&quot;nv&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;AUTH output.txt | &lt;span class=&quot;nb&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n1&lt;/span&gt; |  &lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{print $2}'&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;## Looping Count는 원하는 대로&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; c&amp;lt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;5&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; c++ &lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;do
&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;========= &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; =======================&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cp&lt;/span&gt; /dev/null object1.txt
&lt;span class=&quot;nb&quot;&gt;cp&lt;/span&gt; /dev/null object2.txt

&lt;span class=&quot;c&quot;&gt;# Get Object List&lt;/span&gt;
curl &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;X-Auth-Token: &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; https://&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;iddomain&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;.us.storage.oraclecloud.com/v1/Storage-&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;iddomain&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; object1.txt

&lt;span class=&quot;c&quot;&gt;# Python 코드 사용 시&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#python3 ./object.py ${container}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Container 이름 추가 부분 Script로 변경&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 한 번에 delete할 Object의 수는 &quot;-nObject수&quot;로 조정&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;object1.txt | &lt;span class=&quot;nb&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n30&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$container&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{print var &quot;/&quot; $1}'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; object2.txt

&lt;span class=&quot;c&quot;&gt;# Bulk Delete&lt;/span&gt;
curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; DELETE &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;X-Auth-Token: &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Content-Type: text/plain&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;-T&lt;/span&gt; object2.txt &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     &lt;span class=&quot;s2&quot;&gt;&quot;https://&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;iddomain&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.us.storage.oraclecloud.com/v1/Storage-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;iddomain&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/?bulk-delete&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;objectpy&quot;&gt;object.py&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Python 코드 사용 부분을 Script로 대체하였기 때문에 이 코드는 이제 필요 없다.
참고 용으로 지우지 않고 그대로 둠&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;스크립트 내부에서 &lt;strong&gt;Python&lt;/strong&gt; 파일을 수행하는데, 이것이 하는 역할은 Object 이름 앞에 Container의 이름을 달아 주는 것이다.
여기서 bulk delete에 사용할 input 값의 크기를 조정하면 된다. 예제에서는 70으로 설정하였다.&lt;/p&gt;

&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;glob&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;object1.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'r'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'utf8'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;fw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;object2.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;linenum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;linenum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linenum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; 
    &lt;span class=&quot;s&quot;&gt;''' print(&quot;line&quot;, line) '''&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linenum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;70&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;사용법&quot;&gt;사용법&lt;/h1&gt;

&lt;p&gt;bulk-delete.sh의 Connection 관련 정보와 Container 명을 수정한 후 스크립트만 돌려주면 된다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; bulk-delete.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;루핑을 돌면서 잘 지워지고 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/storage/01_result.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Object가 다 지워지고 나면 Container는 콘솔에서 삭제하면 된다.&lt;/p&gt;

&lt;h1 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/en/cloud/iaas/storage-cloud/cssto/deleting-multiple-objects-single-operation.html&quot;&gt;Deleting Multiple Objects in a Single Operation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="Oracle Cloud" /><category term="Object Storage" /><category term="REST API" /><category term="Python" /><summary type="html">Object Storage에서 Container를 지우고 싶을 경우, Container 내에 Object들이 존재한다면 먼저 Object들을 다 지우고 Container를 지워야 한다. 오라클 Cloud에서는 이 작업을 Cloud Console을 통해서 수행할 수 있지만, Object가 수천개가 넘어 간다면 이를 일일이 수동으로 삭제하는 것이 거의 불가능하다.</summary></entry><entry><title type="html">Oracle Cloud Infrastructure Resource Manager를 이용하여 Terraform 구성 리소스 Provision 하기</title><link href="http://localhost:4000/cloud/2019/basic-3tier-arch-terraform_rm/" rel="alternate" type="text/html" title="Oracle Cloud Infrastructure Resource Manager를 이용하여 Terraform 구성 리소스 Provision 하기" /><published>2019-05-07T00:00:00+09:00</published><updated>2019-05-07T00:00:00+09:00</updated><id>http://localhost:4000/cloud/2019/basic-3tier-arch-terraform_rm</id><content type="html" xml:base="http://localhost:4000/cloud/2019/basic-3tier-arch-terraform_rm/">&lt;p&gt;이전 문서 &lt;a href=&quot;/cloud/2019/basic-3tier-arch-terraform/&quot;&gt;Oracle IaaS와 Java Cloud Service를 사용하여 3 Tier 아키텍쳐 구축하기 (Terraform을 통한 Provision)&lt;/a&gt;에서는 몇 차례 기고를 통해 설명했던 &lt;strong&gt;Oracle Cloud 상에 3 Tier 아키텍쳐 구성하기&lt;/strong&gt;에 필요한 각 컴포넌트들을 하나 하나 수동으로 생성하는 것이 아닌 &lt;strong&gt;Terraform&lt;/strong&gt;을 통해 Batch 형태로 구성하는 과정을 설명했었다.&lt;/p&gt;

&lt;p&gt;보통 Terraform을 이용한 Provision을 위해서는 Terraform 환경을 별도로 구축하거나 Local 환경에 설치하여 작업하지만, Oracle Cloud Infrastructure에서는 별도의 Terraform 환경 구성 없이도 Terraform 구성 파일만을 Oracle Cloud에 업로드 하여 리소스를 생성할 수 있도록 하는 기능을 제공하고 있다. Oracle Cloud Infrastructure는 이를 &lt;strong&gt;Resource Manager&lt;/strong&gt;라는 이름으로 제공한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.cloud.oracle.com/iaas/Content/ResourceManager/Concepts/resourcemanager.htm&quot;&gt;Overview of Resource Manager&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;여기에서는 이전에 작성한 Terraform 구성 파일들을 Oracle Cloud Infrastructure(OCI)의 &lt;strong&gt;Resource Manager&lt;/strong&gt;로 생성하여 원하는 리소스를 Provision하는 과정에 대해 설명하려고 한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;OCI의 Resource Manager에서는 현재까지는 &lt;strong&gt;oci&lt;/strong&gt; provider만 지원되고, 추가적인 Plugin을 설치할 수 없기 때문에 이전 과정에서 사용한 &lt;strong&gt;oraclepaas&lt;/strong&gt;  Provider 부분은 제외해야 한다. 즉 Java Cloud Service(JCS) 부분의 Provision은 &lt;strong&gt;Resource Manager&lt;/strong&gt;를 통해서 수행할 수 없다.
따라서 여기에서는 JCS 부분을 제외한 다른 리소스들만 생성해 볼 것이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Oracle Cloud Infrastucture&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;3-tier-예제-소스&quot;&gt;3-Tier 예제 소스&lt;/h1&gt;

&lt;p&gt;이전 과정을 진행하지 않았었다면 여기서 새롭게 예제 소스를 다운 받는다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; git clone https://github.com/mee-nam-lee/terraform_oci_paas.git
&amp;gt; cd terraform_oci_paas/oci_resourcemanager
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;terraform-파일-설명&quot;&gt;Terraform 파일 설명&lt;/h2&gt;

&lt;p&gt;사용하는 Terraform Configuration 파일은 이전과 동일하지만 &lt;strong&gt;Resource Manager&lt;/strong&gt;를 통해 생성할 수 없는 PaaS 부분인 Java Cloud Service(JCS) 구성파일은 제외되었다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;파일명&lt;/th&gt;
      &lt;th&gt;생성되는 Resource&lt;/th&gt;
      &lt;th&gt;설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;del&gt;env.sh&lt;/del&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;(삭제됨)&lt;/strong&gt; Oracle Cloud에 연결하기 위한 정보가 들어있는 파일&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;provider.tf&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;(수정됨)&lt;/strong&gt; oci, oraclepaas provider 구성 정보&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;variables.tf&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;(수정됨)&lt;/strong&gt; 다른 terraform 파일에서 참고하는 variable 정도들이 들어있음&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;data.tf&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;OCI 정보 조회&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;vcn.tf&lt;/td&gt;
      &lt;td&gt;VCN&lt;/td&gt;
      &lt;td&gt;VCN 생성&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;subnet.tf&lt;/td&gt;
      &lt;td&gt;Subnet&lt;/td&gt;
      &lt;td&gt;3개의 Subnet 생성&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;routetable.tf&lt;/td&gt;
      &lt;td&gt;RouteTable&lt;/td&gt;
      &lt;td&gt;2개 (PublicRT, PrivateRT) RouteTable 생성&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;securitylist.tf&lt;/td&gt;
      &lt;td&gt;SecurityList&lt;/td&gt;
      &lt;td&gt;3개 (PublicSL, PrivateSL, DBSL)의 Security List와 Ingress, Egress Rule 정의&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;internetgw.tf&lt;/td&gt;
      &lt;td&gt;Internet Gateway&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;servicegw.tf&lt;/td&gt;
      &lt;td&gt;Service Gateway&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;db.tf&lt;/td&gt;
      &lt;td&gt;DB System&lt;/td&gt;
      &lt;td&gt;DemoDB 생성&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;object.tf&lt;/td&gt;
      &lt;td&gt;ObjectStorage&lt;/td&gt;
      &lt;td&gt;JCS Backup용 Object Storage Bucket 2개 생성&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;del&gt;jcs.tf&lt;/del&gt;&lt;/td&gt;
      &lt;td&gt;Java Cloud Service&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;(삭제됨)&lt;/strong&gt; AD1, AD2에 각각 JCS 1개 생성&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;compute_web.tf&lt;/td&gt;
      &lt;td&gt;Compute Instance&lt;/td&gt;
      &lt;td&gt;Web용 Custom Image로 Compute Instance 2개 생성&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;compute_coh.tf&lt;/td&gt;
      &lt;td&gt;Compute Instance&lt;/td&gt;
      &lt;td&gt;Coherence 용 Custom Image로 Compute Instance 2개 생성&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;loadbalancer.tf&lt;/td&gt;
      &lt;td&gt;LoadBalancer&lt;/td&gt;
      &lt;td&gt;Loadbalancer 생성 후 Web 인스턴스에 연결하는 BackendSet 구성&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;output.tf&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;필요 정보 출력&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;providertf&quot;&gt;provider.tf&lt;/h2&gt;

&lt;p&gt;위에서 설명한 데로 &lt;strong&gt;Resource Manager&lt;/strong&gt;에서는 OCI Provider만 사용할 수 있고, Parameter로 &lt;strong&gt;user_ocid&lt;/strong&gt;, &lt;strong&gt;fingerprint&lt;/strong&gt;, &lt;strong&gt;private_key_path&lt;/strong&gt; 같은 보안 관련 파라미터를 구성파일 내에 두지 못하게 하기 때문에 이전 파일에서 보안 관련 파라미터들을 제거해야 한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;OCI 내에서 작업이 진행되는 것이기 때문에 이 정보가 요구되지 않는다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;변경된 파일은 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;provider &quot;oci&quot; {
  tenancy_ocid         = &quot;${var.tenancy_ocid}&quot;
  region               = &quot;${var.region}&quot;
  disable_auto_retries = &quot;${var.disable_auto_retries}&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;variablestf&quot;&gt;variables.tf&lt;/h2&gt;

&lt;p&gt;이전 Local Terraform Provision에서는 TF_VAR 환경 변수를 참조하여 변수를 사용하도록 구성하였기 때문에 variables.tf에 default 값을 설정하지 않았다.
&lt;strong&gt;Resource Manager&lt;/strong&gt;에서는 환경 변수 Export를 통한 변수 참조가 가능하지 않기 때문에 variable 값을 셋팅해줘야 하는데, 다음의 3가지 방법으로 수행할 수 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;tfvars 파일 생성&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Resource Manager&lt;/strong&gt;에서 variable 값을 콘솔을 통해서 입력&lt;/li&gt;
  &lt;li&gt;variables.tf의 default 값 setting&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;여기에서는 3번 방법으로 수행하였다. 따라서 variables.tf 파일도 수정이 되어야 한다.
사용하지 않는 variable들을 삭제하고 default 값을 설정해준 variables.tf 파일은 다음과 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/oci_rm/01_variables.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;terraform-configuration-archive-생성&quot;&gt;Terraform Configuration Archive 생성&lt;/h2&gt;

&lt;p&gt;준비된 Terraform Configuration 파일을 zip으로 묶는다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; zip ../../tf_oci_rm.zip *.tf 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/oci_rm/02_zip.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;resource-manager-생성&quot;&gt;Resource Manager 생성&lt;/h1&gt;

&lt;p&gt;Oracle Cloud Console에 접속하여 &lt;strong&gt;Resource Manager&lt;/strong&gt; 메뉴로 이동한다. &lt;strong&gt;Create Stack&lt;/strong&gt;을 클릭하여 Stack을 하나 생성한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/oci_rm/03_stack.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Stack 이름을 입력하고, 압축해두었던 zip 파일을 업로드한다. 그러고 나면 variable 값이 파싱되어서 화면에 보여질 것이다. 값들을 확인한 후 하단의 &lt;strong&gt;Create&lt;/strong&gt; 버튼을 클릭한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/oci_rm/04_create_stack.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Stack이 하나 만들어졌다.&lt;/p&gt;

&lt;h2 id=&quot;variable-설정&quot;&gt;Variable 설정&lt;/h2&gt;

&lt;p&gt;variables.tf 파일로 default 값들을 설정하였지만 보안 상의 이유로 configuration file에 정의할 수 없는 &lt;strong&gt;ssh_public_key&lt;/strong&gt; 같은 변수는 공백으로 남겨져 있다.
이 값은 Resource Manager의 콘솔을 통해 값을 셋팅하도록 할 것이다.
&lt;strong&gt;Variables&lt;/strong&gt; 메뉴에서 &lt;strong&gt;Edit Variables&lt;/strong&gt;를 클릭하여 변수 값을 설정해 준다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/oci_rm/10_var.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ssh_public_key&lt;/strong&gt; 값을 입력하고 저장한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/oci_rm/11_save_var.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;terraform-plan&quot;&gt;Terraform Plan&lt;/h2&gt;

&lt;p&gt;생성한 Stack으로 이동하여 Plan/Apply/Destroy 작업을 수행할 수 있는 &lt;strong&gt;Job&lt;/strong&gt;을 하나 생성한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/oci_rm/05_job.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;먼저 &lt;strong&gt;Plan&lt;/strong&gt; 부터 생성한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/oci_rm/06_plan.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Job이 &lt;strong&gt;Accepted&lt;/strong&gt;가 되었고 곧 &lt;strong&gt;In Progress&lt;/strong&gt; 상태로 전환될 것이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/oci_rm/07_job_accepted.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;진행 사항을 다음처럼 Log에서 확인할 수가 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/oci_rm/08_log1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/oci_rm/08_log2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;terraform-apply&quot;&gt;Terraform Apply&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;apply&lt;/strong&gt; Job도 위에서 처럼 생성한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/oci_rm/09_apply.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apply&lt;/strong&gt; Job의 진행사항도 Log에서 다음과 같이 확인이 된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/oci_rm/12_apply_log.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 기다리기만 하면 원하는 리소스들이 생성되어 있을 것이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;outputs.tf&lt;/strong&gt;에 정의한 output 결과는 &lt;strong&gt;Outputs&lt;/strong&gt; 메뉴에서 확인 할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/oci_rm/13_output.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apply&lt;/strong&gt; 작업이 완료된 후 Terraform State 파일을 다운로드 받을 수도 있다. &lt;strong&gt;Download Terraform State&lt;/strong&gt; 버튼을 클릭하여 상태를 다운 받는다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/oci_rm/14_apply_succeed.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;다운 받은 파일을 &lt;strong&gt;terraform.tfstate&lt;/strong&gt;로 rename하여 상태를 Local 환경에서도 확인해 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/oci_rm/15_tfstate.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;생성-확인&quot;&gt;생성 확인&lt;/h1&gt;

&lt;p&gt;Oracle Cloud Console에 접속해서 리소스들이 잘 생성되었는지 확인한다.
생성된 내용은 이전과 동일한 내용이니 여기에서는 생략하도록 하겠다.&lt;/p&gt;

&lt;h1 id=&quot;terraform-destroy--환경-지우기&quot;&gt;Terraform destroy : 환경 지우기&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Destroy&lt;/strong&gt; 역시 Job으로 생성해서 수행한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/oci_rm/16_destroy.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;모두 삭제되었다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/oci_rm/16_destroy2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;이전-문서-참고&quot;&gt;이전 문서 참고&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/cloud/2019/basic-3tier-arch/&quot;&gt;Oracle IaaS와 Java Cloud Service를 사용하여 멀티 AD(Availability Domain)에 3 Tier 아키텍쳐 구축하기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/cloud/2019/basic-3tier-arch-regional/&quot;&gt;Oracle IaaS와 Java Cloud Service를 사용하여 3 Tier 아키텍쳐 구축하기 (Regional Subnet 사용)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/cloud/2019/basic-3tier-arch-terraform/&quot;&gt;Oracle IaaS와 Java Cloud Service를 사용하여 3 Tier 아키텍쳐 구축하기 (Terraform을 통한 Provision)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.terraform.io/docs/providers/oci/&quot;&gt;Terraform Oracle Cloud Infrastructure Provider&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.cloud.oracle.com/iaas/Content/ResourceManager/Concepts/resourcemanager.htm&quot;&gt;Overview of Resource Manager&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="Oracle Cloud" /><category term="Virtual Cloud Network" /><category term="IaaS" /><category term="3 Tier Architecture" /><category term="HA" /><category term="Terraform" /><category term="Resource Manager" /><summary type="html">이전 문서 Oracle IaaS와 Java Cloud Service를 사용하여 3 Tier 아키텍쳐 구축하기 (Terraform을 통한 Provision)에서는 몇 차례 기고를 통해 설명했던 Oracle Cloud 상에 3 Tier 아키텍쳐 구성하기에 필요한 각 컴포넌트들을 하나 하나 수동으로 생성하는 것이 아닌 Terraform을 통해 Batch 형태로 구성하는 과정을 설명했었다.</summary></entry><entry><title type="html">Oracle IaaS와 Java Cloud Service를 사용하여 3 Tier 아키텍쳐 구축하기 (Terraform을 통한 Provision)</title><link href="http://localhost:4000/cloud/2019/basic-3tier-arch-terraform/" rel="alternate" type="text/html" title="Oracle IaaS와 Java Cloud Service를 사용하여 3 Tier 아키텍쳐 구축하기 (Terraform을 통한 Provision)" /><published>2019-05-03T00:00:00+09:00</published><updated>2019-05-03T00:00:00+09:00</updated><id>http://localhost:4000/cloud/2019/basic-3tier-arch-terraform</id><content type="html" xml:base="http://localhost:4000/cloud/2019/basic-3tier-arch-terraform/">&lt;p&gt;이전 문서 &lt;a href=&quot;/cloud/2019/basic-3tier-arch-regional/&quot;&gt;Oracle IaaS와 Java Cloud Service를 사용하여 3 Tier 아키텍쳐 구축하기 (Regional Subnet 사용)&lt;/a&gt;에서는 각 Tier에 필요한 모든 컴포넌트들을 &lt;strong&gt;Oracle Cloud Console&lt;/strong&gt;을 통해 Step by Step으로 생성하였었다.&lt;/p&gt;

&lt;p&gt;여기에서는 이전 문서에서 설명한 모든 필요 컴포넌트를 &lt;strong&gt;Terraform&lt;/strong&gt;을 이용해서 프로비전 하는 과정에 대해서 설명할 것이다.&lt;/p&gt;

&lt;p&gt;생성되어질 컴포컨트들의 &lt;strong&gt;아키텍쳐는 Regional Subnet을 사용할 때와 동일&lt;/strong&gt;하다. 따라서 생성된 후의 모습은 다음과 같을 것이다.&lt;/p&gt;

&lt;h1 id=&quot;architecture&quot;&gt;Architecture&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/regional/architecture.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Oracle Cloud Infrastucture CLI (oci)&lt;/li&gt;
  &lt;li&gt;Terraform (OCI provider / paas provider)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;oci-cli--terraform-설치&quot;&gt;OCI CLI / Terraform 설치&lt;/h1&gt;

&lt;p&gt;설치 관련은 다음 문서를 참고한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.cloud.oracle.com/iaas/Content/API/SDKDocs/terraformgetstarted.htm&quot;&gt;Getting Started with the Terraform Provider&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;3-tier-예제-소스&quot;&gt;3-Tier 예제 소스&lt;/h1&gt;

&lt;p&gt;예제 소스를 다음에서 다운 받는다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; git clone https://github.com/mee-nam-lee/terraform_oci_paas.git
&amp;gt; cd terraform_oci_paas/oci_with_paas
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;생성되는 각 컴포턴트는 이전 예제와 동일한 이름을 사용하였다. 컴포넌트 상세는 이전 글을 참고한다.&lt;/p&gt;

&lt;h2 id=&quot;terraform-파일-설명&quot;&gt;Terraform 파일 설명&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;파일명&lt;/th&gt;
      &lt;th&gt;생성되는 Resource&lt;/th&gt;
      &lt;th&gt;설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;env.sh&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Oracle Cloud에 연결하기 위한 정보가 들어있는 파일&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;provider.tf&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;oci, oraclepaas provider 구성 정보&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;variables.tf&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;다른 terraform 파일에서 참고하는 variable 정도들이 들어있음&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;data.tf&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;OCI 정보 조회&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;vcn.tf&lt;/td&gt;
      &lt;td&gt;VCN&lt;/td&gt;
      &lt;td&gt;VCN 생성&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;subnet.tf&lt;/td&gt;
      &lt;td&gt;Subnet&lt;/td&gt;
      &lt;td&gt;3개의 Subnet 생성&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;routetable.tf&lt;/td&gt;
      &lt;td&gt;RouteTable&lt;/td&gt;
      &lt;td&gt;2개 (PublicRT, PrivateRT) RouteTable 생성&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;securitylist.tf&lt;/td&gt;
      &lt;td&gt;SecurityList&lt;/td&gt;
      &lt;td&gt;3개 (PublicSL, PrivateSL, DBSL)의 Security List와 Ingress, Egress Rule 정의&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;internetgw.tf&lt;/td&gt;
      &lt;td&gt;Internet Gateway&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;servicegw.tf&lt;/td&gt;
      &lt;td&gt;Service Gateway&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;db.tf&lt;/td&gt;
      &lt;td&gt;DB System&lt;/td&gt;
      &lt;td&gt;DemoDB 생성&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;object.tf&lt;/td&gt;
      &lt;td&gt;ObjectStorage&lt;/td&gt;
      &lt;td&gt;JCS Backup용 Object Storage Bucket 2개 생성&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;jcs.tf&lt;/td&gt;
      &lt;td&gt;Java Cloud Service&lt;/td&gt;
      &lt;td&gt;AD1, AD2에 각각 JCS 1개 생성&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;compute_web.tf&lt;/td&gt;
      &lt;td&gt;Compute Instance&lt;/td&gt;
      &lt;td&gt;Web용 Custom Image로 Compute Instance 2개 생성&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;compute_coh.tf&lt;/td&gt;
      &lt;td&gt;Compute Instance&lt;/td&gt;
      &lt;td&gt;Coherence 용 Custom Image로 Compute Instance 2개 생성&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;loadbalancer.tf&lt;/td&gt;
      &lt;td&gt;LoadBalancer&lt;/td&gt;
      &lt;td&gt;Loadbalancer 생성 후 Web 인스턴스에 연결하는 BackendSet 구성&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;output.tf&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;필요 정보 출력&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;envsh-수정&quot;&gt;env.sh 수정&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;env.sh&lt;/strong&gt; 파일을 각자의 환경에 맞게 수정한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/terraform/01_env_sh.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;수정한 환경 변수 파일을 실행 시키고 Terraform Provider를 설치한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; source env.sh
&amp;gt; terraform init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/terraform/01_terraform_init.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;variablestf-확인&quot;&gt;variables.tf 확인&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;variables.tf&lt;/strong&gt; 파일에는 사용하는 Compute Shape 및 Admin Password 등의 변수들이 선언되어 있다.
이 파일을 열어 각 변수를 원하는 값으로 편집해도 된다.&lt;/p&gt;

&lt;p&gt;참고로 Web용 Compute와 Coherence용 Compute는 이전 과정에서 만들어 둔 Custom Image를 참조하도록 Custom Image의 OCID로 설정되어 있다.
Custom Image를 사용하지 못하거나, 다른 Image를 사용하려면 아래 부분을 수정하면 된다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;variable &quot;instance_image_ocid&quot; {
  type = &quot;map&quot;

  default = {
    // custom image OCID
    web= &quot;ocid1.image.oc1.phx.aaaaaaaa5bxabwjdny6dpaf2xr63rvxoofxslzkahjnfqlcpodfl5oobualq&quot;
    coherence =&quot;ocid1.image.oc1.phx.aaaaaaaacp2wktef46wf255fh3lu3df6rea52dd2zjcqz34wmoj7tigbxeka&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;변수들을 살펴봤으면 이제 적용해 보자&lt;/p&gt;

&lt;h2 id=&quot;terraform-plan&quot;&gt;Terraform Plan&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; terraform plan
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/terraform/02_terraform_plan.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;terraform-apply&quot;&gt;Terraform Apply&lt;/h2&gt;

&lt;p&gt;apply command로 리소스를 생성한다. Database와 Java Cloud Service 생성에는 약간의 시간이 걸린다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; terraform apply
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/terraform/03_apply.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/terraform/04_apply.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;생성-확인&quot;&gt;생성 확인&lt;/h1&gt;

&lt;p&gt;Oracle Cloud Console에 접속해서 리소스들이 잘 생성되었는지 확인한다.&lt;/p&gt;

&lt;h2 id=&quot;network&quot;&gt;Network&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/terraform/05_network.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;load-balacner&quot;&gt;Load Balacner&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/terraform/06_loadbalancer.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;object-storage&quot;&gt;Object Storage&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/terraform/07_object.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;db-system&quot;&gt;DB System&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/terraform/08_db.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;compute&quot;&gt;Compute&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/terraform/09_compute.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;java-cloud-service&quot;&gt;Java Cloud Service&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/terraform/10_jcs.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;애플리케이션-배포-및-test&quot;&gt;애플리케이션 배포 및 Test&lt;/h1&gt;

&lt;p&gt;이제 필요한 리소스들은 다 생성되었고 
Web과 Coherence 인스턴스에 접속해서 서비스를 구동시키고, 웹로직 서버에 애플리케이션 배포하고 테스트 하는 과정만 남아있다.
이 과정은 이전 글을 참고하여 진행하면 된다.&lt;/p&gt;

&lt;h1 id=&quot;환경-지우기&quot;&gt;환경 지우기&lt;/h1&gt;

&lt;p&gt;테스트가 완료되었으면 모든 환경을 지운다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; terraform destroy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/terraform/11_destroy.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;리소스 삭제에도 약간의 시간이 걸린다. 모두 완료되면 다음과 같이 표시 될 것이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/terraform/12_destroy_2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;이전-문서-참고&quot;&gt;이전 문서 참고&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/cloud/2019/basic-3tier-arch/&quot;&gt;Oracle IaaS와 Java Cloud Service를 사용하여 멀티 AD(Availability Domain)에 3 Tier 아키텍쳐 구축하기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/cloud/2019/basic-3tier-arch-regional/&quot;&gt;Oracle IaaS와 Java Cloud Service를 사용하여 3 Tier 아키텍쳐 구축하기 (Regional Subnet 사용)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.terraform.io/docs/providers/oci/&quot;&gt;Terraform Oracle Cloud Infrastructure Provider&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.terraform.io/docs/providers/oraclepaas/index.html&quot;&gt;Terraform Oracle Cloud Platform Provider&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="Oracle Cloud" /><category term="Virtual Cloud Network" /><category term="IaaS" /><category term="3 Tier Architecture" /><category term="HA" /><category term="Java Cloud Service" /><category term="Terraform" /><summary type="html">이전 문서 Oracle IaaS와 Java Cloud Service를 사용하여 3 Tier 아키텍쳐 구축하기 (Regional Subnet 사용)에서는 각 Tier에 필요한 모든 컴포넌트들을 Oracle Cloud Console을 통해 Step by Step으로 생성하였었다.</summary></entry><entry><title type="html">WebLogic on Oracle Kubernetes Engine(OKE) - 로그 모니터링 (ELK)</title><link href="http://localhost:4000/cloud/2019/k8s-weblogic-elk/" rel="alternate" type="text/html" title="WebLogic on Oracle Kubernetes Engine(OKE) - 로그 모니터링 (ELK)" /><published>2019-04-29T00:00:00+09:00</published><updated>2019-04-29T00:00:00+09:00</updated><id>http://localhost:4000/cloud/2019/k8s-weblogic-elk</id><content type="html" xml:base="http://localhost:4000/cloud/2019/k8s-weblogic-elk/">&lt;p&gt;이 문서에서는 &lt;strong&gt;ELK(Elasticsearch, Logstash, Kibana)&lt;/strong&gt;를 통해 이전에 배포한 &lt;strong&gt;WebLogic Operator&lt;/strong&gt;와 &lt;strong&gt;WebLogic Domain&lt;/strong&gt; 환경의 로그를 수잡하여 모니터링하는 방법에 대해서 다룰 것이다.&lt;/p&gt;

&lt;h1 id=&quot;architecture&quot;&gt;Architecture&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic5/00_arch5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;kubernetes-weblogic-operator-구성-변경&quot;&gt;Kubernetes WebLogic Operator 구성 변경&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Kubernetes WebLogic Operator&lt;/strong&gt;에는 &lt;strong&gt;ELK&lt;/strong&gt;를 통해 로그 모니터링을 하는 환경이 기본적으로 설정되어있다. 
WebLogic Operator POD 내에 logstach container를 구동하도록 설정되어 있는데 기본적으로는 이 구성이 &lt;strong&gt;disable&lt;/strong&gt;로 되어있기 때문에 &lt;strong&gt;elkIntegrationEnabled&lt;/strong&gt;라는 속성 항목을 &lt;strong&gt;true&lt;/strong&gt;로 변경하여야 &lt;strong&gt;logstash&lt;/strong&gt; container가 구동된다.
WebLogic Operator은 이전 과정에서 helm을 통해 이미 설치 되어있기 때문에 기존 설치된 weblogic-operator의 &lt;strong&gt;upgrade&lt;/strong&gt;를 통해 속성 값을 변경해 줄 것이다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;helm upgrade weblogic-operator weblogic-operator/weblogic-operator --set elkIntegrationEnabled=true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;weblogic-operator&lt;/strong&gt;가 upgrade 되면서 REVISION 값이 변경되는 것을 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic5/01_helm_upgrade.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;속성 값이 잘 반영되었는지 다음으로도 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic5/02_helm_get_values.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;history&lt;/strong&gt;로 보게 되면 REVISION 값이 변경되어있는 것을 확인 할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic5/03_upgrade_complete.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;weblogic-operator&lt;/strong&gt;의 POD 정보를 보면 &lt;strong&gt;logstash&lt;/strong&gt; container가 기동되었기 때문에 Running Container 수가 2로 변경된 것을 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic5/04_operator2running.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;elasticsearch-kibana-배포&quot;&gt;Elasticsearch, Kibana 배포&lt;/h1&gt;

&lt;p&gt;제공되는 샘플 스크립트 디렉토리로 이동하면 Elasticsearch와 Kibana를 배포할 수 있는 구성파일이 존재한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd weblogic-kubernetes-operator/kubernetes/samples/scripts/elasticsearch-and-kibana
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;elasticsearch_and_kibana.yaml&lt;/strong&gt; 파일을 열어서 Service 항목을 살펴보자. Elasticsearch와 Kibana를 위한 각각의 서비스 항목이 있을 것이다. 이 문서의 설명에서는 외부에서 Elasticsearch에 접속할 필요는 없기 때문에 elasticsearch 서비스는 그대로 두고 &lt;strong&gt;kibana&lt;/strong&gt; 서비스만 아래와 같이 &lt;strong&gt;LoadBalancer&lt;/strong&gt; type으로 수정해 준다.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;v1&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Service&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; 
  &lt;span class=&quot;na&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;default&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;kibana&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;kibana&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;annotations&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;service.beta.kubernetes.io/oci-load-balancer-shape&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;100Mbps&quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;service.beta.kubernetes.io/oci-load-balancer-backend-protocol&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;HTTP&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; 
&lt;span class=&quot;c1&quot;&gt;#  type: &quot;NodePort&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;LoadBalancer&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;5601&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;targetPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;5601&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;kibana&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;변경한 파일을 적용한다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl apply -f elasticsearch_and_kibana.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic5/04_elk_apply.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;생성된 POD를 확인한다. Elasticsearch container에 직접 접속하여 구성이 잘 되었는지 확인해 본다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic5/05_elastic_logstash.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 Kibana 콘솔에 접속하기 위하여 Kibana 서비스의 External IP를 확인한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic5/06_kibana_svc.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;브라우저에 다음과 같이 입력하여 상태가 &lt;strong&gt;Green&lt;/strong&gt;이면 정상이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;http://[kibana-service-external-ip]:5601/status&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic5/07_kibana_status.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;식별할 Elasticsearch의 Index Pattern을 구성하고 &lt;strong&gt;Create&lt;/strong&gt;를 클릭하면 바로 수집된 로그가 Kibana에서 보여진다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic5/08_kibana_config.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Discover&lt;/strong&gt; 탭에서 수집된 로그들을 아래와 같이 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic5/09_kibana_discover.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;여기까지는 WebLogic Kubernetes Operator의 로그 수집 과정이었다.&lt;/p&gt;

&lt;h1 id=&quot;weblogic-server-로그-수집&quot;&gt;WebLogic Server 로그 수집&lt;/h1&gt;

&lt;p&gt;이제 WebLogic Domain의 각 WebLogic Server들의 로그를 수집해 보자. 위 과정에서 사용한 &lt;strong&gt;Logstash&lt;/strong&gt;는 WebLogic Kubernetes Operator 구성에 포함된 것으로, 이 설정을 이용해서는 외부의 WebLogic Domain 로그를 수집할 수 없다.
이 내장 &lt;strong&gt;Logstash&lt;/strong&gt; 설정을 변경하는 대신 새롭게 WebLogic Domain 로그를 수집할 &lt;strong&gt;Logstash&lt;/strong&gt;를 추가로 구성해 볼 것이다.&lt;/p&gt;

&lt;p&gt;여기에서 사용하는 WebLogic Domain은 이전 글에서 생성한 &lt;strong&gt;Persistent Volume&lt;/strong&gt;을 사용하는 WebLogic Domain이다. 따라서 이 WebLogic Domain의 log들은 &lt;strong&gt;Persistent Volume&lt;/strong&gt;, &lt;strong&gt;/shared/logs&lt;/strong&gt;에 저장되도록 설정되어있다.&lt;/p&gt;

&lt;p&gt;추가로 구성하는 &lt;strong&gt;Logstash&lt;/strong&gt;는 shared log 디렉토리 내의 로그들을 수집하도록 구성할 것이다.&lt;/p&gt;

&lt;h2 id=&quot;logstash-구성&quot;&gt;Logstash 구성&lt;/h2&gt;

&lt;p&gt;추가의 &lt;strong&gt;Logstach&lt;/strong&gt; 구성을 위한 &lt;strong&gt;logstash.yaml&lt;/strong&gt; 파일을 다음과 같이 작성한다.
이 파일에서는 &lt;strong&gt;/shared&lt;/strong&gt;를 참조하는 미리 만들어진 &lt;strong&gt;weblogic-domain-storage-volume&lt;/strong&gt;을 mount할 것이다.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;apps/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deployment&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;logstash&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;default&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;replicas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;1&lt;/span&gt; 
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;matchLabels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;logstash&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;logstash&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;weblogic-domain-storage-volume&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;persistentVolumeClaim&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;claimName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;domain1-weblogic-sample-pvc&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;logstash&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;logstash:6.6.0&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-f&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/shared/logstash/logstash.conf&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ELASTICSEARCH_HOST&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;elasticsearch.default.svc.cluster.local&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ELASTICSEARCH_PORT&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;9200&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;imagePullPolicy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;IfNotPresent&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;volumeMounts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;mountPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/shared&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;weblogic-domain-storage-volume&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;containerPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;5044&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;logstash&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 파일을 적용하기 앞서서 logstash 시작에 필요한 커스텀 구성 파일 &lt;strong&gt;logstash.conf&lt;/strong&gt; 파일을 작성해 주어야 한다.
이 파일은 &lt;strong&gt;Persistent Volume&lt;/strong&gt;으로 mount될 &lt;strong&gt;/shared&lt;/strong&gt; 디렉토리 내에 폴더를 만들어 구성하고 이를 참조해서 Logstash가 구동되도록 할 것이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Public Subnet&lt;/strong&gt;에 구성해 둔 &lt;strong&gt;Bastion Server&lt;/strong&gt;에 접속하여 Shared File System에 접속해서 작업하도록 한다. (접속 방법은 이전 글 참고)&lt;/p&gt;

&lt;p&gt;shared 폴더로 이동하여 &lt;strong&gt;logstash&lt;/strong&gt; 폴더를 추가해 주고 &lt;strong&gt;logstash.conf&lt;/strong&gt; 파일을 생성한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;참고 :&lt;br /&gt;
Bastion Server에서 사용하는 Mount Path는 꼭 /shared가 아닌 다른 위치에 mount해서 사용해도 된다.
아래 예시에서는 /mnt/shared에 Mount되어있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic5/14_logstash_conf.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;logstash.conf&lt;/strong&gt; 파일의 내용을 다음과 같이 작성해 준다.&lt;/p&gt;

&lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; {
  &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; {
    &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; =&amp;gt; &lt;span class=&quot;s2&quot;&gt;&quot;/shared/logs/domain1/*.log*&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;start_position&lt;/span&gt; =&amp;gt; &lt;span class=&quot;s2&quot;&gt;&quot;beginning&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; =&amp;gt; &lt;span class=&quot;s2&quot;&gt;&quot;weblogic-server&quot;&lt;/span&gt;
  }
}

&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; {
  &lt;span class=&quot;n&quot;&gt;grok&lt;/span&gt; {
       &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt; =&amp;gt; [ &lt;span class=&quot;s2&quot;&gt;&quot;message&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;%{DATA:log_timestamp}&amp;gt; &amp;lt;%{WORD:log_level}&amp;gt; &amp;lt;%{WORD:thread}&amp;gt; &amp;lt;%{HOSTNAME:hostname}&amp;gt; &amp;lt;%{HOSTNAME:servername}&amp;gt; &amp;lt;%{DATA:timer}&amp;gt; &amp;lt;&amp;lt;%{DATA:kernel}&amp;gt;&amp;gt; &amp;lt;&amp;gt; &amp;lt;%{DATA:uuid}&amp;gt; &amp;lt;%{NUMBER:timestamp}&amp;gt; &amp;lt;%{DATA:misc}&amp;gt; &amp;lt;%{DATA:log_number}&amp;gt; &amp;lt;%{DATA:log_message}&amp;gt;&quot;&lt;/span&gt; ]
  }
  &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt; {
     &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt; =&amp;gt; [ &lt;span class=&quot;s2&quot;&gt;&quot;timestamp&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;MM-dd-YYYY'T'HH:mm:ss.SSSZ&quot;&lt;/span&gt; ]
     &lt;span class=&quot;n&quot;&gt;locale&lt;/span&gt; =&amp;gt; &lt;span class=&quot;s2&quot;&gt;&quot;en&quot;&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;timezone&lt;/span&gt; =&amp;gt; &lt;span class=&quot;s2&quot;&gt;&quot;UTC&quot;&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; =&amp;gt; &lt;span class=&quot;s2&quot;&gt;&quot;@timestamp&quot;&lt;/span&gt;
  }
  &lt;span class=&quot;n&quot;&gt;mutate&lt;/span&gt; {
     &lt;span class=&quot;n&quot;&gt;remove_field&lt;/span&gt; =&amp;gt; [&lt;span class=&quot;s2&quot;&gt;&quot;message&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;timestamp&quot;&lt;/span&gt;]
  }
}

&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; {
  &lt;span class=&quot;n&quot;&gt;elasticsearch&lt;/span&gt; {
    &lt;span class=&quot;n&quot;&gt;hosts&lt;/span&gt; =&amp;gt; [&lt;span class=&quot;s2&quot;&gt;&quot;${ELASTICSEARCH_HOST}:${ELASTICSEARCH_PORT}&quot;&lt;/span&gt;]
  }
  &lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt; { &lt;span class=&quot;n&quot;&gt;codec&lt;/span&gt; =&amp;gt; &lt;span class=&quot;n&quot;&gt;rubydebug&lt;/span&gt; }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;파일 준비가 완료되었으면 logstash POD를 생성한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl apply -f logstash.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;다음과 깉이 새로운 logstash Pod가 생성될 것이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic5/10_logstash_pod.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;logstash에서 Log를 잘 수집하고 있는지 Container 로그를 살펴본다. 로그가 수집되고 있는 상황이 계속 Logging 될 것이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic5/11_logstash_logs.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kibana&lt;/strong&gt;에 들어가서 로그를 살펴보면 아래와 같이 &lt;strong&gt;webLogic-server&lt;/strong&gt; type의 로그가 들어온 것을 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic5/12_kibana_logs.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그 동안 쌓여있는 WebLogic Log들이 많았기 때문에 기존에 수집한 WebLogic Operator 로그와 수를 비교해 보면 WebLogic Server 로그가 상대적으로 매우 많은 것을 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic5/13_kibana_graph.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 로그 수집을 위한 모든 준비가 다 되었으니 원하는 형태로 로그를 보기 위해 &lt;strong&gt;Dashboard&lt;/strong&gt;를 꾸며서 보기만 하면 된다.
&lt;strong&gt;Dev Tool&lt;/strong&gt;을 이용해 Elasticsearch를 API 기반으로 조회해 보고 결과를 확인해 보는 것도 좋을 것이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic5/16_kibana_devtool.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;아래는 샘플로 두개의 Graph를 넣어 만든 Dashboard 이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic5/15_kibana_dashboard.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;여기까지 Kubernetes에 배포된 WebLogic Server의 로그 모니터링에 대한 방법에 대해 다루었다.&lt;/p&gt;

&lt;h1 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://oracle.github.io/weblogic-kubernetes-operator/&quot;&gt;Oracle WebLogic Server Kubernetes Operator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="WebLogic" /><category term="Kubernetes" /><category term="Oracle Kubernetes Engine" /><category term="ELK" /><category term="Elasticsearch" /><category term="Logstash" /><category term="Kibana" /><summary type="html">이 문서에서는 ELK(Elasticsearch, Logstash, Kibana)를 통해 이전에 배포한 WebLogic Operator와 WebLogic Domain 환경의 로그를 수잡하여 모니터링하는 방법에 대해서 다룰 것이다.</summary></entry><entry><title type="html">WebLogic on Oracle Kubernetes Engine(OKE) - 모니터링 (Prometheus / Grafana)</title><link href="http://localhost:4000/cloud/2019/k8s-weblogic-monitoring/" rel="alternate" type="text/html" title="WebLogic on Oracle Kubernetes Engine(OKE) - 모니터링 (Prometheus / Grafana)" /><published>2019-04-25T00:00:00+09:00</published><updated>2019-04-25T00:00:00+09:00</updated><id>http://localhost:4000/cloud/2019/k8s-weblogic-monitoring</id><content type="html" xml:base="http://localhost:4000/cloud/2019/k8s-weblogic-monitoring/">&lt;p&gt;이 예제에서는 이전에 생성한 WebLogic Domain의 여러 매트릭들을 모니터링 하는 기능을 추가 해 볼 것이다.
WebLogic Server는 다양한 매트릭을 MBean으로 제공하고 있고 일반적으로 많은 모니터링 툴들이 JMX를 이용하여 이 MBean 정보를 읽어가는 형태로 모니터링을 수행한다.&lt;/p&gt;

&lt;p&gt;Prometheus도 Generic JMX Exporter를 제공하고 있고, 이를 통해서 WebLogic Server 모니터링이 가능하지만, 이를 위해서는 WebLogic Server 쪽에 JMX 모니터링을 위한 몇가지 옵션들을 구성해 줘야 한다.&lt;/p&gt;

&lt;p&gt;WebLogic Server에서는 JMX를 통한 모니터링 이외에 REST API 기반으로 MBean 정보를 읽거나 수정할 수 있는 Management Interface도 함께 제공하고 있는데, 여기서 소개할 &lt;strong&gt;WebLogic Monitoring Exporter&lt;/strong&gt;가 &lt;strong&gt;Management REST API&lt;/strong&gt; 기반으로 구현해 둔 Prometheus 용 Exporter다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/middleware/1221/wls/WLRUR/overview.htm#WLRUR111&quot;&gt;About the WLS RESTful Management Interface&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/oracle/weblogic-monitoring-exporter&quot;&gt;WebLogic Monitoring Exporter&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;지금부터는 &lt;strong&gt;WebLogic Monitoring Exporter&lt;/strong&gt;를 이용하여 &lt;strong&gt;Premetheus&lt;/strong&gt;에서 WebLogic Domain을 모니터링 해 볼 것이다.&lt;/p&gt;

&lt;h1 id=&quot;architecture&quot;&gt;Architecture&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic4/00_arch.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;prerequistes&quot;&gt;Prerequistes&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Oracle Kubernetes Engine(OKE)&lt;/li&gt;
  &lt;li&gt;Oracle File System&lt;/li&gt;
  &lt;li&gt;WebLogic Monitoring Exporter&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;weblogic-monitoring-exporter-구성&quot;&gt;WebLogic Monitoring Exporter 구성&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;WebLogic Monitoring Exporter&lt;/strong&gt;는 모니터링할 WebLogic Server에 배포되어 돌아가는 &lt;strong&gt;Web Application&lt;/strong&gt;으로 만들어져 있다. 
먼제 제공되는 소스를 받아서 배포 가능 형태로 빌드를 수행해야 한다.&lt;/p&gt;

&lt;p&gt;다음에서 소스를 받아서 빌드를 수행한 후 배포용 Archive를 만든다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/oracle/weblogic-monitoring-exporter.git
cd weblogic-monitoring-exporter

mvn install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;wls-exporter-1.0-SNAPSHOT.jar&lt;/strong&gt; 파일이 생성되고 local mvn repository에 install이 된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic4/10_mvn_install.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;webapp&lt;/strong&gt; 디랙토리로 이동하여 war 파일을 packaging 한다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd webapp
mvn package
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음과 같이 target 디렉토리 내에 &lt;strong&gt;wls-exporter.war&lt;/strong&gt;이 생성된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic4/11_mvn_package.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;현재 WebLogic Domain이니 &lt;strong&gt;Persistent Volume&lt;/strong&gt;을 사용하는 구성으로 되어있기 때문에 빌드된 war 파일을 NFS File System으로 Copy하여 배포하여도 되고, WebLogic Console을 통해서 war 파일 &lt;strong&gt;upload&lt;/strong&gt; 방법을 선택하여 배포해도 된다. 원하는 방법으로 배포를 수행한다.&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;WebLogic Admin Console 접근 법은 이전 글을 참고한다. admin-server를 참고하는 LoadBalancer Type의 서비스가 존재해야 한다. 이미 삭제 했다면, 이전 글을 참고하여 다시 생성한다.&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;애플리케이션은 Admin Server와 Cluster 모두를 Target으로 지정한다. 
배포 후 애를리케이션을 &lt;strong&gt;Start&lt;/strong&gt; 시키면 다음과 같이 Admin Server와 Cluster에서 &lt;strong&gt;Active&lt;/strong&gt; 상태로 서비스될 수 있음이 보여진다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic4/05_exporter_deploy.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;배포한 애플리케이션이 잘 동작하는지 확인해 본다. LoadBalancer Type의 Service의 External IP를 이용하여 다음과 같이 접속하면 된다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;애플리케이션이 Admin Server와 Cluster 모두에 배포되어있기 때문에 둘 중 어떤 서비스를 이용해도 관계 없다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;http://[Service External IP]:[Port]/wls-exporter/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;다음과 같은 화면이 보일 것이다. 
위 &lt;strong&gt;WebLogic Monitoring Exporter&lt;/strong&gt; 소스 디렉토리 내의 다음 위치에 가면 모니터링할 매트릭 정의를 위한 구성 파일 샘플이 존재한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;weblogic-monitoring-exporter/samples/configurations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Append&lt;/strong&gt; 옵션을 선택하여 샘플 구성 파일을 선택하고 &lt;strong&gt;Submit&lt;/strong&gt;을 클릭하면 해당 모니터링 매트릭이 Export 매트릭으로 계속 추가가 된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic4/04_exporter_config.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 &lt;strong&gt;metrics&lt;/strong&gt;라는 상단의 링크를 클릭해 보면 metric이 다음과 같은 형태로 추출되고 있는 것을 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic4/04_wls_exporter_metrics.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;monitoring-metric-추가&quot;&gt;Monitoring Metric 추가&lt;/h2&gt;

&lt;p&gt;Sample로 제공되는 metric 외에 다른 metric를 추가하거나 변경하고자 한다면 제공된 구성 파일을 바탕으로 metric을 조정하면 된다.
예를 들어 제공된 jvm.yml에서 metric를 추가하고 싶다면, 아래의 WebLogic Server &lt;strong&gt;WLST (Weblogic Script Tool)&lt;/strong&gt; 툴을 통해 다른 Metric들의 이름을 확인하고 추가해 주면 된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic4/12_wls_mbean.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HeapSizeMax&lt;/strong&gt;와 &lt;strong&gt;Uptime&lt;/strong&gt;을 추가한다면 파일을 다음과 같이 수정하면 된다.&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# jvm_custom.yml&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metricsNameSnakeCase&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;queries&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;JVMRuntime&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;jvm_&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;heapFreeCurrent&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;heapFreePercent&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;heapSizeCurrent&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;heapSizeMax&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;uptime&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;수정한 구성파일을 WebLogic Monitoring Exporter에 적용하고 매트릭이 잘 추출되는지 확인해 본다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic4/13_metric_added.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;WebLogic Domain 쪽에서의 준비는 완료가 되었다.&lt;/p&gt;

&lt;h1 id=&quot;prometheus-배포&quot;&gt;Prometheus 배포&lt;/h1&gt;

&lt;p&gt;이제는 Prometheus를 &lt;strong&gt;Oracle Kubernetes Engine&lt;/strong&gt;에 배포할 것이다.
배포를 위한 구성 파일은 다음에 존재한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;weblogic-monitoring-exporter/samples/kubernetes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;먼저 Prometheus를 위하는 &lt;strong&gt;monitoring&lt;/strong&gt;이라는 namespace를 만들고 RBAC를 위한 Role을 생성해 줄 것이다.&lt;/p&gt;

&lt;p&gt;다음을 수행한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd weblogic-monitoring-exporter/samples/kubernetes
kubectl apply -f monitoring-namespace.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음과 같이 생성된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic4/01_create_ns.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 필요한 Role을 생성해야 하는데 제공된 스크립트는 WebLogic Domain은 &lt;strong&gt;weblogic-domain&lt;/strong&gt; namespace를 사용하고 WebLogic Operator는 &lt;strong&gt;weblogic-operator&lt;/strong&gt; namespace를 사용하는 환경 기반으로 작성되어있다.&lt;/p&gt;

&lt;p&gt;이전 글에서 설명한 내용을 따라서 WebLogic Operator와 WebLogic Domain을 배포했다면 여기서는 모두 &lt;strong&gt;default&lt;/strong&gt; namespace를 사용하는 것으로 하였었기 때문에 namespace 참조 부분을 모두 수정해 줘야 한다.&lt;/p&gt;

&lt;p&gt;Namespace를 변경한 sample configuration은 아래와 같다.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ClusterRole&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rbac.authorization.k8s.io/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;weblogic-domain-cluster-role&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;apiGroups&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;weblogic.oracle&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;domains&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;verbs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;get&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;list&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# creating role-bindings for cluster role&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ClusterRoleBinding&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rbac.authorization.k8s.io/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;domain-cluster-rolebinding&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;subjects&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ServiceAccount&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;default&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;default&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;apiGroup&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;roleRef&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ClusterRole&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;weblogic-domain-cluster-role&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;apiGroup&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;rbac.authorization.k8s.io&quot;&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# creating role-bindings&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;RoleBinding&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rbac.authorization.k8s.io/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;weblogic-domain-operator-rolebinding&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;default&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;subjects&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ServiceAccount&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;default&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;default&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;apiGroup&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;roleRef&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ClusterRole&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cluster-admin&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;apiGroup&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;rbac.authorization.k8s.io&quot;&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;변경된 파일을 반영한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl apply -f crossnsrbac.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Role이 생성되고 Bind 되었다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic4/02_rbac.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 Prometheus를 배포할 차례이다. 
제공되는 &lt;strong&gt;prometheus-deployment.yaml&lt;/strong&gt;에 보면 Service 항목이 존재하는데 이 서비스의 Type이 &lt;strong&gt;NodePort&lt;/strong&gt;로 되어있다. 기억하겠지만 Oracle Kubernetes Engine을 &lt;strong&gt;Private Subnet&lt;/strong&gt;에 생성 했기 때문에 NodePort를 사용하여서는 외부에서 바로 접속할 수가 없다.&lt;/p&gt;

&lt;p&gt;따라서 이 부분을 &lt;strong&gt;LoadBalancer&lt;/strong&gt; Type으로 변경해 줘야 한다.&lt;/p&gt;

&lt;p&gt;변경된 Service 구성 부분은 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Service&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;prometheus&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;monitoring&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;annotations&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;service.beta.kubernetes.io/oci-load-balancer-shape&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;100Mbps&quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;service.beta.kubernetes.io/oci-load-balancer-backend-protocol&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;HTTP&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;LoadBalancer&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;9090&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;TCP&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;targetPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;9090&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#    nodePort: 32000&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;prometheus&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#  type: NodePort&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;변경된 파일을 적용한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl apply -f prometheus-deployment.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음과 같이 정의된 리소스들이 생성되는 것을 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic4/03_prometheus.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;서비스 항목도 살펴보자. External IP 부분이 확인되면 이 IP를 통해서 브라우저에서 접속한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic4/07_prometheus_svc.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;다음으로 접속해 본다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;http://[prometheus-service-external-ip]:9090&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;모니터링 항목을 선택하는 화면이 나올 것이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic4/06_prometheus.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;메트릭을 확인하기 전에 먼저 &lt;strong&gt;Status/Target&lt;/strong&gt; 메뉴를 먼저 확인해 보자. WebLogic Server에 배포한 &lt;strong&gt;WebLogic Monitoring Exporter&lt;/strong&gt;에 의해서 메트릭이 추출되고 있음을 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic4/08_prometheus_target.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;다시 Graph 메뉴로 이동하여 모니터링 하고자 하는 매트릭을 선택한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic4/09_monitoring.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;grafana-구성&quot;&gt;Grafana 구성&lt;/h1&gt;

&lt;p&gt;Grafana를 배포할 것이다. 
&lt;strong&gt;grafana-deployment.yaml&lt;/strong&gt;에 보면 Service 항목이 존재하는데 이 서비스의 Type이 &lt;strong&gt;NodePort&lt;/strong&gt;로 되어있다. 이 부분도  &lt;strong&gt;LoadBalancer&lt;/strong&gt; Type으로 변경해 줘야 한다.&lt;/p&gt;

&lt;p&gt;변경된 Service 구성 부분은 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Service&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;grafana&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;monitoring&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;annotations&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;service.beta.kubernetes.io/oci-load-balancer-shape&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;100Mbps&quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;service.beta.kubernetes.io/oci-load-balancer-backend-protocol&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;HTTP&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;LoadBalancer&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;3000&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;TCP&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;targetPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;3000&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#    nodePort: 31000&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;grafana&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#  type: NodePort&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic4/14_grafana.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;브라우저로 접속한다&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;http://[grafana-external-service-ip]:[port]&lt;/li&gt;
  &lt;li&gt;Username : admin&lt;/li&gt;
  &lt;li&gt;Password : admin&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic4/15_grafana_login.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;좌측 메뉴의 &lt;strong&gt;Datasource&lt;/strong&gt; 메뉴로 이동한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic4/19_add_datasource.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;다음과 같이 입력하고 &lt;strong&gt;Add&lt;/strong&gt;를 클릭한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Name : Prometheus&lt;/li&gt;
  &lt;li&gt;Type : Prometheus&lt;/li&gt;
  &lt;li&gt;URL : http://prometheus:9090&lt;/li&gt;
  &lt;li&gt;Access : proxy&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic4/16_add_datasource.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Data Source Edit 창에서 Prometheus Stats Dashboard를 Import 할 수 있다.
여기에서는 이 Dashboard는 사용할 것이 아니기 때문에 Import 하지 않아도 된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic4/17_import_datasource.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;좌측 메뉴의 &lt;strong&gt;Dashboards&lt;/strong&gt; 메뉴에서 &lt;strong&gt;New&lt;/strong&gt;를 선택하여 Dashboard를 새롭게 하나 생성한다.
Dashboard 이름은 나중에 수정하고 먼저 &lt;strong&gt;Graph&lt;/strong&gt; 하나를 추가해 볼 것이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic4/20_new_dashboard.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;상단의 &lt;strong&gt;Panel Title&lt;/strong&gt;을 클릭하면 &lt;strong&gt;Edit&lt;/strong&gt; 할 수 있는 메뉴가 나타난다. 여기서 &lt;strong&gt;Edit&lt;/strong&gt;를 클릭하면 하단에 Graph를 수정할 수 있는 속성 탭들이 나타난다.&lt;/p&gt;

&lt;p&gt;Data Source Drop Down 메뉴에서 &lt;strong&gt;Prometheus&lt;/strong&gt;를 선택하고 텍스트 박스에 Metric 항목의 이름을 입력한다. 아래 예는 &lt;strong&gt;jvm_heap_free_current&lt;/strong&gt;를 사용했다. 우측의 &lt;strong&gt;눈&lt;/strong&gt; 모양 아이콘을 클릭하면 상단의 그래프에 Metric이 표시된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic4/21_metric_add.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Panel Title은 &lt;strong&gt;General&lt;/strong&gt; 탭에서 수정한다.
&lt;img src=&quot;/assets/images/kubeweblogic4/22_pane_title.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Metric이 다 추가되었으면 Dashboard의 이름을 변경해준다. Dashboard 옆 &lt;strong&gt;설정&lt;/strong&gt; 아이콘을 클릭하면 &lt;strong&gt;Settings&lt;/strong&gt; 메뉴가 나온다. 
여기에서 Name 항목을 원하는 이름으로 설정하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic4/23_dashboard_name.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;설정이 완료되고 나면 아래와 같이 보이게 될 것이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic4/18_grafana_dashboard.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;여기까지 Kubernetes에 배포된 WebLogic Server 환경을 Custom Exporter와 Open Source Monitoring 솔루션인 &lt;strong&gt;Prometheus&lt;/strong&gt;를 사용하여 모니터링하고 &lt;strong&gt;Grafana&lt;/strong&gt;를 이용하여 더욱 보기 좋은 형태의 Dashboard를 만드는 작업에 대해 다루었다.&lt;/p&gt;

&lt;h1 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://oracle.github.io/weblogic-kubernetes-operator/&quot;&gt;Oracle WebLogic Server Kubernetes Operator&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/oracle/weblogic-monitoring-exporter&quot;&gt;WebLogic Monitoring Exporter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="WebLogic" /><category term="Kubernetes" /><category term="Oracle Kubernetes Engine" /><category term="Prometheus" /><category term="Grafana" /><summary type="html">이 예제에서는 이전에 생성한 WebLogic Domain의 여러 매트릭들을 모니터링 하는 기능을 추가 해 볼 것이다. WebLogic Server는 다양한 매트릭을 MBean으로 제공하고 있고 일반적으로 많은 모니터링 툴들이 JMX를 이용하여 이 MBean 정보를 읽어가는 형태로 모니터링을 수행한다.</summary></entry><entry><title type="html">Oracle Kubernetes Engine에 WebLogic 올리기 - Nginx 추가</title><link href="http://localhost:4000/cloud/2019/k8s-weblogic-nginx/" rel="alternate" type="text/html" title="Oracle Kubernetes Engine에 WebLogic 올리기 - Nginx 추가" /><published>2019-04-23T00:00:00+09:00</published><updated>2019-04-23T00:00:00+09:00</updated><id>http://localhost:4000/cloud/2019/k8s-weblogic-nginx</id><content type="html" xml:base="http://localhost:4000/cloud/2019/k8s-weblogic-nginx/">&lt;p&gt;이 예제에서는 이전에 생성한 WebLogic Domain 앞 단에 Frontend 역할을 수행하는 Nginx를 추가해 볼 것이다.&lt;/p&gt;

&lt;h1 id=&quot;architecture&quot;&gt;Architecture&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic3/00_arch3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;prerequistes&quot;&gt;Prerequistes&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Oracle Kubernetes Engine(OKE)&lt;/li&gt;
  &lt;li&gt;Oracle File System&lt;/li&gt;
  &lt;li&gt;Nginx&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;nginx-deployment-구성하기&quot;&gt;Nginx Deployment 구성하기&lt;/h1&gt;

&lt;p&gt;이전의 WebLogic Domain 환경이 그대로 남아있는 상황에서 &lt;strong&gt;Nginx&lt;/strong&gt; 구성만 추가해 볼 것이다.
Nginx를 통해 WebLogic Cluster로 요청이 넘어갈 수 있도록 WebLogic Server와 연결하는 구성이 필요하다.
Nginx와 WebLogic Server 간의 연결 방법에 대해서는 Nginx 문서에 잘 설명되어 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.nginx.com/nginx/deployment-guides/oracle-weblogic-server-load-balancing-nginx-plus/&quot;&gt;Load Balancing Oracle WebLogic Server with NGINX Open Source and NGINX Plus&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;weblogic-basicconf&quot;&gt;weblogic-basic.conf&lt;/h2&gt;

&lt;p&gt;WebLogic Server 연결을 위해 &lt;strong&gt;weblogic-basic.conf&lt;/strong&gt; 파일이 필요하다. 파일 내용은 아래를 참고한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;proxy_cache_path /tmp/NGINX_wl_cache/ keys_zone=backcache:10m;

map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}

upstream weblogic {
    #ip_hash;
    hash $remote_addr;

    # WebLogic Cluster Kubernetes Service Name:Port
    server domain1-cluster-cluster-1:8001;
}

server {
    listen 80;
    server_name  _;

    location / {
        proxy_cache backcache;
        proxy_pass http://weblogic;

    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;nginxconf&quot;&gt;nginx.conf&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;nginx.conf&lt;/strong&gt; 내용은 다음과 같다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;user  nginx;
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include conf.d/weblogic-basic.conf;
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] &quot;$request&quot; '
                      '$status $body_bytes_sent &quot;$http_referer&quot; '
                      '&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;
    keepalive_timeout  65;
    #gzip  on;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;configmap-yaml&quot;&gt;ConfigMap YAML&lt;/h2&gt;

&lt;p&gt;Nginx 배포를 위해서 Deployment 구성 파일을 작성할 것이다. Nginx 이미지는 Docker Hub에서 가져와서 사용할 것이다. 이 Base 이미지의 기본 구성 파일이 아닌 내가 작성한 Custom Configuration을 사용하도록 하기 위햐여 Kubernetes의 &lt;strong&gt;ConfigMap&lt;/strong&gt; 기능을 이용할 것이다.&lt;/p&gt;

&lt;p&gt;커스텀 &lt;strong&gt;nginx.conf&lt;/strong&gt;와 &lt;strong&gt;weblogic-basic.conf&lt;/strong&gt;를 ConfigMap으로 만들기 위한 구성 내용이다.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ConfigMap&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx-cm&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;nginx.conf&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;user  nginx;&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;worker_processes  1;&lt;/span&gt;

    &lt;span class=&quot;no&quot;&gt;error_log  /var/log/nginx/error.log warn;&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;pid        /var/run/nginx.pid;&lt;/span&gt;

    &lt;span class=&quot;no&quot;&gt;events {&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;worker_connections  1024;&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;no&quot;&gt;http {&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;include conf.d/weblogic-basic.conf;&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;include       /etc/nginx/mime.types;&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;default_type  application/octet-stream;&lt;/span&gt;

        &lt;span class=&quot;no&quot;&gt;log_format  main  '$remote_addr - $remote_user [$time_local] &quot;$request&quot; '&lt;/span&gt;
                          &lt;span class=&quot;no&quot;&gt;'$status $body_bytes_sent &quot;$http_referer&quot; '&lt;/span&gt;
                          &lt;span class=&quot;no&quot;&gt;'&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;';&lt;/span&gt;

        &lt;span class=&quot;no&quot;&gt;access_log  /var/log/nginx/access.log  main;&lt;/span&gt;

        &lt;span class=&quot;no&quot;&gt;sendfile        on;&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;#tcp_nopush     on;&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;keepalive_timeout  65;&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;#gzip  on;&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;weblogic-basic.conf&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;proxy_cache_path /tmp/NGINX_wl_cache/ keys_zone=backcache:10m;&lt;/span&gt;

    &lt;span class=&quot;no&quot;&gt;map $http_upgrade $connection_upgrade {&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;default upgrade;&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;''      close;&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;no&quot;&gt;upstream weblogic {&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;hash $remote_addr;&lt;/span&gt;

        &lt;span class=&quot;no&quot;&gt;# WebLogic Cluster Kubernetes Service Name:Port&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;server domain1-cluster-cluster-1:8001;&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;no&quot;&gt;server {&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;listen 80;&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;server_name  _;&lt;/span&gt;

        &lt;span class=&quot;no&quot;&gt;location / {&lt;/span&gt;
            &lt;span class=&quot;no&quot;&gt;proxy_cache backcache;&lt;/span&gt;
            &lt;span class=&quot;no&quot;&gt;proxy_pass http://weblogic;&lt;/span&gt;

        &lt;span class=&quot;no&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;deployment-yaml&quot;&gt;Deployment YAML&lt;/h2&gt;

&lt;p&gt;Nginx를 배포하기 위한 구성 파일이다. Container에서 위에서 구성한 &lt;strong&gt;ConfigMap&lt;/strong&gt;을 Volume으로 Mount하여 Custom Configuration을 참조하게된다&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;apps/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deployment&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx-dp&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;replicas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;matchLabels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;containerPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;80&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;volumeMounts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;mountPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/etc/nginx/nginx.conf&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# mount nginx.conf volume&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;readOnly&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx-conf&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;subPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx.conf&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;volumeMounts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;mountPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/etc/nginx/conf.d&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# mount conf.d where weblogic-basic.conf is located&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;readOnly&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx-confd&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx-conf&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;configMap&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx-cm&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# refer to ConfigMap for `nginx-conf` &lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx.conf&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx.conf&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx-confd&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;configMap&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx-cm&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# refer to ConfigMap for `nginx-confd`&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;weblogic-basic.conf&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;weblogic-basic.conf&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;service-yaml&quot;&gt;Service YAML&lt;/h2&gt;

&lt;p&gt;Load Balancer를 통해 외부에서 접속하기 위한 서비스를 추가한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;이전 환경에서 포트 80을 사용하고 있는 서비스 (domain1-cluster1-lb-ext)는 미리 삭제해 둔다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Service&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ngnix-lb-ext&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;default&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;annotations&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;service.beta.kubernetes.io/oci-load-balancer-shape&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;100Mbps&quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;service.beta.kubernetes.io/oci-load-balancer-backend-protocol&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;HTTP&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;LoadBalancer&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;http&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;80&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;targetPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;80&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;배포하기&quot;&gt;배포하기&lt;/h2&gt;

&lt;p&gt;위에서 설명한 ConfigMap, Deployment, Service를 하나의 파일로 구성하여 한번에 적용할 것이다.
&lt;strong&gt;nginx-dp-cm.yaml&lt;/strong&gt; 파일을 생성하여 위 3개의 구성 내용을 넣어준다.
파일이 완료되었으면 kubectl를 통해 적용한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; kubectl apply -f nginx-dp-cm.yaml 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;배포가 완료되면 다음과 같이 보일 것이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic3/01_nginx.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nginx Service의 External IP를 통해 서비스에 접근해 보자.
WebLogic Cluster로 요청이 정상적으로 Forward 되어 서비스 되는 것을 볼 수 있을 것이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic3/02_weblogic_app.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;persistent-session&quot;&gt;Persistent Session&lt;/h1&gt;

&lt;p&gt;위 구성으로 테스트해 보면 매 요청 마다 다른 Managed Server가 호출되는 것을 볼 수 있을 것이다. WebLogic Cluster 간에 세션이 공유되기 때문에, 어느 Managed Server로 접속되더라도 세션이 유지되긴 하지만 동일 세션일 경우 같은 Managed Server로 요청이 갈수 있도록 하는 &lt;strong&gt;Sticky Session&lt;/strong&gt; 구성은 &lt;strong&gt;Nginx Plus&lt;/strong&gt;에서 가능하므로
여기에서는 IP Hash를 통해 같은 Backend Server로 요청이 되어질 수 있도록 하는 구성으로 바꿔보려고 한다.&lt;/p&gt;

&lt;p&gt;이를 위해서는 Backend Server들이 upstream에 리스트 되어야 하기 때문에 cluster service를 사용하지 않고 Managed Server 각각을 list 해줘야 한다.
변경된 &lt;strong&gt;weblogic-basic.conf&lt;/strong&gt;는 다음과 같다.&lt;/p&gt;

&lt;h2 id=&quot;weblogic-basicconf-1&quot;&gt;weblogic-basic.conf&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;proxy_cache_path /tmp/NGINX_wl_cache/ keys_zone=backcache:10m;

map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}

upstream weblogic {
    #ip_hash;
    hash $remote_addr;

    # WebLogic Managed Server Kubernetes Service Name:Port
    server domain1-managed-server1:8001;
    server domain1-managed-server2:8001;
    server domain1-managed-server3:8001;

}

server {
    listen 80;
    server_name  _;

    location / {
        proxy_cache backcache;
        proxy_pass http://weblogic;

    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;변경 사항을 다시 반영한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; kubectl apply -f nginx-dp-cm.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;CofigMap만 변경되었다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic3/03_update.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nginx Container Restart를 위해서 다음 작업을 수행한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; kubectl scale deployment nginx-dp --replicas=0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic3/04_scale0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;다시 Container를 구동한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; kubectl scale deployment nginx-dp --replicas=1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic3/05_scale1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 다시 애플리케이션을 브라우저에서 테스트 해보면 요청 시마다 다른 Managed Server로 접속되지 않고 한 Managed Server로 고정되는 것을 볼 수 있을 것이다.&lt;/p&gt;

&lt;h1 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://oracle.github.io/weblogic-kubernetes-operator/&quot;&gt;Oracle WebLogic Server Kubernetes Operator&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.nginx.com/nginx/deployment-guides/oracle-weblogic-server-load-balancing-nginx-plus/&quot;&gt;Load Balancing Oracle WebLogic Server with NGINX Open Source and NGINX Plus&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="WebLogic" /><category term="Kubernetes" /><category term="Oracle Kubernetes Engine" /><category term="Persistent Volume" /><category term="Nginx" /><summary type="html">이 예제에서는 이전에 생성한 WebLogic Domain 앞 단에 Frontend 역할을 수행하는 Nginx를 추가해 볼 것이다.</summary></entry><entry><title type="html">Oracle Kubernetes Engine에 WebLogic 올리기 - Persistent Volume 사용</title><link href="http://localhost:4000/cloud/2019/k8s-weblogic-pv/" rel="alternate" type="text/html" title="Oracle Kubernetes Engine에 WebLogic 올리기 - Persistent Volume 사용" /><published>2019-04-19T00:00:00+09:00</published><updated>2019-04-19T00:00:00+09:00</updated><id>http://localhost:4000/cloud/2019/k8s-weblogic-pv</id><content type="html" xml:base="http://localhost:4000/cloud/2019/k8s-weblogic-pv/">&lt;p&gt;이 전 예제에서는 Docker Image 내에 WebLogic Binary와 Domain 구성 정보가 모두 들어있는 Sample을 이용하였다. 
여기서는 WebLogic Binary는 Docker Image 내에 존재 하지만 Domain 정보는 Persistent Volume을 사용하여 외부에 구성하는 예제를 살펴볼 것 이다.&lt;/p&gt;

&lt;p&gt;이전 글에서 사용한 &lt;strong&gt;WebLogic Operator&lt;/strong&gt;의 Sample에 Persistent Volume을 사용하는 예제도 함께 들어있다. 
이 예제를 이용하여 Persistent Volume을 &lt;strong&gt;Oracle Cloud Infrastructure&lt;/strong&gt;의 &lt;strong&gt;File System&lt;/strong&gt;을 사용하도록 구성하는 방법으로 설명할 것이다.&lt;/p&gt;

&lt;h1 id=&quot;architecture&quot;&gt;Architecture&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic2/arch2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;prerequistes&quot;&gt;Prerequistes&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Oracle Kubernetes Engine(OKE)&lt;/li&gt;
  &lt;li&gt;Oracle File System&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;이전-과정에서-했던-작업-돌아보기&quot;&gt;이전 과정에서 했던 작업 돌아보기&lt;/h1&gt;

&lt;p&gt;이전 과정에서 수행 했던 작업들은 환경에 그대로 존재한다면 다시 수행할 필요 없이 그대로 이용하면 된다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Oracle Kubernetes Engine(OKE) 접속 확인&lt;/li&gt;
  &lt;li&gt;WebLogic Operator 설치&lt;/li&gt;
  &lt;li&gt;WebLogic Image 준비 : 이 예제에서는 &lt;strong&gt;store/oracle/weblogic:12.2.1.3&lt;/strong&gt; 이미지를 Kubernetes WebLogic Operator Job 생성 시 직접 당겨오기 때문에 미리 준비해 둘 필요는 없다.&lt;/li&gt;
  &lt;li&gt;WebLogic Domain 준비 : 이 예제에서는 &lt;strong&gt;Kubernetes WebLogic Operator Job&lt;/strong&gt;이 돌면서 Persistent Volume에 Domain 구성 파일들을 생성한다.&lt;/li&gt;
  &lt;li&gt;WebLogic Kubernetes Operator 샘플 Git Clone&lt;/li&gt;
  &lt;li&gt;WebLogic Domain Credential : 같은 id/password를 사용한다면 이전에 만든것을 재사용한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;file-system-구성&quot;&gt;File System 구성&lt;/h1&gt;
&lt;p&gt;도메인 구성 스크립트를 수행하기 전에 File System이 먼저 구성되어 있어야 한다.
&lt;strong&gt;OKE&lt;/strong&gt;를 위해 구성된 &lt;strong&gt;VCN (Virtual Cloud Network)&lt;/strong&gt;에 File System을 위한 별도의 &lt;strong&gt;Subnet&lt;/strong&gt;을 구성한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic2/01_subnet.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic2/01_subnet2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;File Storage&lt;/strong&gt; 메뉴로 이동해서 &lt;strong&gt;File System&lt;/strong&gt;을 생성을 클릭한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic2/02_filestorage.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hide Details&lt;/strong&gt; 부분에 &lt;strong&gt;Edit Details&lt;/strong&gt;가 있었을 것이다. 이 버튼을 클릭하여 File System 이름을 다음처럼 바꿔준다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic2/03_filesystem1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mount Target&lt;/strong&gt; 정보에서도 &lt;strong&gt;Edit Details&lt;/strong&gt;를 클릭하여 Mount Target을 생상하도록 하고, Mount Target이 앞에서 생성한 &lt;strong&gt;Subnet&lt;/strong&gt;에 생성되도록 해준다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic2/03_filesystem2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;File System과 Mount Target이 생성되고 나면 다음과 같이 보여진다.
Mount Target의 &lt;strong&gt;IP&lt;/strong&gt;는 다음 과정에서 &lt;strong&gt;Persistent Volume&lt;/strong&gt;을 설정할 때 사용할 것이니 잘 기록해 둔다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic2/04_mt.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Export Path&lt;/strong&gt;가 아래와 같이 설정되었다. 이 Path도 &lt;strong&gt;Persistent Volume&lt;/strong&gt; 설정 시에 필요한 정보이다. 이미 예제에서 사용하는 path (/shared)와 동일하게 생성하였기 때문에 다르게 생성하였을 경우에만 나중 사용을 위해 기록해 둔다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic2/05_export.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;OKE worker node에서 Mount Target에 접근하기 위해서는 &lt;strong&gt;Security List&lt;/strong&gt;에 몇 가지 Rule 구성해 줘야 한다. 구성 방법은 아래 매뉴얼을 참고하면 된다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.cloud.oracle.com/iaas/Content/File/Tasks/securitylistsfilestorage.htm?Highlight=mount%20target%20security%20list&quot;&gt;Configuring VCN Security List Rules for File Storage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;여기에서는 &lt;strong&gt;편의상&lt;/strong&gt; Mount Target이 속한 Subnet(nfs-sn)이 Worker Node subnet이 사용하는 &lt;strong&gt;Security List&lt;/strong&gt;와 같은 것을 사용하도록 설정하였기 때문에 이미 모든 Worker Node들에서 부터의 모든 Protocol을 받을 수 있게 되어있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic2/06_securitylist.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Security List를 다르게 해 줬다면 문서에서 설명하는 대로 Rule들을 지정해 줘야 한다.&lt;/p&gt;

&lt;h1 id=&quot;pv-사용-도메인-구성&quot;&gt;PV 사용 도메인 구성&lt;/h1&gt;

&lt;p&gt;WebLogic Operator의 Sample Script 디렉토리로 이동한다.&lt;/p&gt;

&lt;p&gt;Domain을 생성하기 앞서서 &lt;strong&gt;Persistent Volume&lt;/strong&gt;을 먼저 생성해야 하기 때문에 아래 단계를 수행한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; cd weblogic-kubernetes-operator/kubernetes/samples/scripts/create-weblogic-domain-pv-pvc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위 디렉토리에서 &lt;strong&gt;create-pv-pvc-inputs.yaml&lt;/strong&gt; 파일을 열어 다음 부분을 수정한다.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;weblogicDomainStorageType&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;NFS&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Mount Target의 IP&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;weblogicDomainStorageNFSServer&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;10.0.13.3&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Mount Target의 Export Path, 위애서 설명한 데로 생성했다면 그대로 두면 된다.&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;weblogicDomainStoragePath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/shared&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;수정된 input 파일을 기반으로 다음 스크립트를 실행한다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; ./create-pv-pvc.sh -i create-pv-pvc-inputs.yaml -o ./pv-pvc-output –e
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic2/07_pv_pvc.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;output 디렉토리로 이동하여 생성된 yaml 파일을 확인하고 kubectl로 적용한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; kubectl apply -f ./domain1-weblogic-sample-pv.yaml
&amp;gt; kubectl apply -f ./domain1-weblogic-sample-pvc.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic2/08_apply_pv_pvc.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;잘 생성되었는지 확인한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic2/09_get_pv_pvc.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 도메인을 생성할 단계이다.&lt;/p&gt;

&lt;p&gt;도메인 생성을 위해 해당 스크립트가 위치한 디렉토리로 이동한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; cd weblogic-kubernetes-operator/kubernetes/samples/scripts/create-weblogic-domain/domain-home-on-pv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;디렉토리에서 &lt;strong&gt;create-domain-job-template.yaml&lt;/strong&gt; 파일을 열어 Docker Hub의 &lt;strong&gt;Repository Secret&lt;/strong&gt; 정보를 추가해 준다.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      &lt;span class=&quot;na&quot;&gt;imagePullSecrets&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# secret name으로 변경&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mnleecred&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;탬플릿을 저장한 후 도메인 생성을 위한 스크립트를 실행할 것이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;create-domain.sh&lt;/strong&gt;에는 WebLogic Domain 구성 파일들을 &lt;strong&gt;Persistent Volume&lt;/strong&gt;에 만드는 작업을 수행하는 Job을 생성하고 실행하는 부분이 들어가 있다. 이 Job에서는 Docker Hub의 &lt;strong&gt;store/oracle/weblogic:12.2.1.3&lt;/strong&gt; 이미지를 당겨와서 Domain 구성 파일을 만들게 되는데 이 이미지를 Pull하기 위해서는 Docker Hub로 들어가서 &lt;strong&gt;License Agreement&lt;/strong&gt;를 Agree해주는 과정이 먼저 되어 있어야 한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic2/10_proceed_checkout.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic2/10_proceed_checkout2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic2/10_proceed_checkout3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;위처럼 pull 커맨드가 보여진 후 도메인 생성 스크립트를 수행한다.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;참고 사항
shared 디렉토리의 내용을 확인하기 위해 Public Subnet에 Bastion Host를 하나 생성하고 Shared File System을 Mount하여 내용을 확인해 보면 이해에 도움이 될 것이다.&lt;/p&gt;

  &lt;p&gt;Bastion Host가 생성되었다면 다음 Command를 수행하여 Shared File System을 Mount한다.&lt;/p&gt;
  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo mount 10.0.13.3:/shared /mnt/shared
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
  &lt;p&gt;디렉토리에 아직은 아무 내용도 없는 것을 볼 수 있다.&lt;/p&gt;

  &lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic2/11_empty_shared.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이제 도메인 생성 스크립트를 실행한다. Job이 수행되고 /shared 디렉토리에 Domain을 생성하고 Job이 종료될 것이다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./create-domain.sh -i create-domain-inputs.yaml -o ./create-domain-output
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic2/12_job_completed.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Job이 잘 수행되었는지는 pod 상태로도 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic2/12_job_completed2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;이 시점에서 Shared 디렉토리를 살펴보면 Domain 디렉토리와 관련 파일들이 생성되어 있음을 볼 수 있다.&lt;/p&gt;

  &lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic2/13_shared_domain.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;이제 도메인을 기동시켜 보는 단계만 남아있다. 
&lt;strong&gt;create-domain-output&lt;/strong&gt; 디렉토리로 이동하여 다음을 실행한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; cd ./create-domain-output/weblogic-domains/domain1
&amp;gt; kubectl apply -f domain.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Admin Server와 Managed Server 두개가 Running 중인 것을 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic2/13_domain_running.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이전 과정에서 만들어 둔 LoadBalancer Serivce를 사용해서 외부에서 접속해 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic2/14_ex_service.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;애플리케이션-배포&quot;&gt;애플리케이션 배포&lt;/h1&gt;

&lt;p&gt;이전 과정에서 처럼 WebLogic Console을 통해 애플리케이션을 Upload하지 않고, &lt;strong&gt;Persistent Volume&lt;/strong&gt;으로 사용하는 domain 디렉토리에 애플리케이션을 복사하고, 모든 Managed Server가 해당 애플리케이션을 바라보도록 배포해 볼 것이다.
먼저 배포할 애플리케이션을 &lt;strong&gt;/shared&lt;/strong&gt;의 특정 위치로 복사한다.&lt;/p&gt;

&lt;p&gt;복사할 때는 Public Subnet에서 구동중인 &lt;strong&gt;Bastion Server&lt;/strong&gt;를 활용하여 공유되고 있는 /shared에 접속하는 방법을 통하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic2/15_app_copy.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;복사가 되어었으면 Admin Server Service의 External IP를 통해 WebLogic Console에 접근하고 애플리케이션을 배포해 보자.
domain 디렉토리 내에 복사해 둔 애플리케이션이 보일 것이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic2/16_app_deploy1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;애플리케이션을 cluster에 배포하고, 배포 속성 중에 애플리케이션 참조 위치를 특정 디렉토리로 하는 옵션을 선택한 후 애플리케이션 배포를 완료한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic2/16_app_deploy2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;애플리케이션을 &lt;strong&gt;start&lt;/strong&gt; 시키고, &lt;strong&gt;domain1-cluster1-lb-ext&lt;/strong&gt; 서비스의 External IP를 통해 애플리케이션을 호출해 본다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic2/17_test.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;확장--축소&quot;&gt;확장 / 축소&lt;/h1&gt;

&lt;p&gt;도메인의 Cluster에서 Managed Server의 수를 늘리거나 줄이기 위해서는 다음과 같이 domain을 정보를 수정하면 된다. kubectl의 edit를 이용해서 cluster의 &lt;strong&gt;replica&lt;/strong&gt; 수를 변경해 볼 것이다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; kubectl edit domain domain1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;기본 editor 창으로 들어갈 것이다. replica를 찾아서 수를 변경한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic2/18_scale1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;기본 2로 되어있던 수를 3으로 변경하고 저장 (wq)한 후 editor를 빠져 나간다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic2/18_scale2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;domain이 변경되었다.&lt;/p&gt;

&lt;p&gt;잠시 후 pod를 확인하면 domain1-managed-server3이 생성되고 Running 중인 것을 확인 할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic2/19_managed3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;애플리케이션에서도 새창을 열어 호출해 보면 새롭게 구동된 managed-server3으로 로드 발란싱 되는 것을 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic2/20_managed3_test.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;로그-확인&quot;&gt;로그 확인&lt;/h1&gt;

&lt;p&gt;Domain 관련 각종 로그들은 /shared/logs 디렉토리에 위치한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic2/21_logs.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://oracle.github.io/weblogic-kubernetes-operator/&quot;&gt;Oracle WebLogic Server Kubernetes Operator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="WebLogic" /><category term="Kubernetes" /><category term="Oracle Kubernetes Engine" /><category term="Persistent Volume" /><summary type="html">이 전 예제에서는 Docker Image 내에 WebLogic Binary와 Domain 구성 정보가 모두 들어있는 Sample을 이용하였다. 여기서는 WebLogic Binary는 Docker Image 내에 존재 하지만 Domain 정보는 Persistent Volume을 사용하여 외부에 구성하는 예제를 살펴볼 것 이다.</summary></entry><entry><title type="html">WebLogic Operator를 사용하여 Kubernetes에 WebLogic 올리기</title><link href="http://localhost:4000/cloud/2019/k8s-weblogic/" rel="alternate" type="text/html" title="WebLogic Operator를 사용하여 Kubernetes에 WebLogic 올리기" /><published>2019-04-15T00:00:00+09:00</published><updated>2019-04-15T00:00:00+09:00</updated><id>http://localhost:4000/cloud/2019/k8s-weblogic</id><content type="html" xml:base="http://localhost:4000/cloud/2019/k8s-weblogic/">&lt;p&gt;Oracle WebLogic Server 12c 버전 부터 Kubernetes Cluster에 WebLogic Domain을 쉽게 올릴 수 있도록 하는 &lt;strong&gt;WebLogic Operator&lt;/strong&gt;를 지원하고 있다.&lt;/p&gt;

&lt;p&gt;이 문서에서는 Managed Kubernetes Cloud 서비스인 &lt;strong&gt;Oracle Kubernetes Engine(OKE)&lt;/strong&gt;와 &lt;strong&gt;WebLogic Operator&lt;/strong&gt;를 사용하여 웹로직 도메인을 Provision하는 방법에 대해서 다룰 것이다.&lt;/p&gt;

&lt;h1 id=&quot;architecture&quot;&gt;Architecture&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic/arch.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;prerequistes&quot;&gt;Prerequistes&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Oracle Kubernetes Engine(OKE) : 여기에서는 OKE를 Provision하는 방법에 대해서 다루지 않을 것이다. OKE 프로비전 과정은 다음 문서를 참고한다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.oracle.com/webfolder/technetwork/tutorials/obe/oci/oke-full/index.html&quot;&gt;Creating a Cluster with Oracle Cloud Infrastructure Container Engine for Kubernetes&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;oke-접속-확인하기&quot;&gt;OKE 접속 확인하기&lt;/h1&gt;
&lt;p&gt;위 과정을 따라 OKE를 생성하고 Kubeconfig까지 설정하였다고 하면 &lt;strong&gt;kubectl&lt;/strong&gt;을 통해 worker node의 상태를 확인해 본다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic/01_getnode.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OKE&lt;/strong&gt;를 통해 Kubernetes Cluster를 기본 설정으로 구성하면 Private Subnet 안에 Worker Node가 구성되므로 Node IP가 Private IP로 할당된다.&lt;/p&gt;

&lt;h1 id=&quot;weblogic-operator-설치&quot;&gt;WebLogic Operator 설치&lt;/h1&gt;
&lt;p&gt;WebLogic Operator는 &lt;strong&gt;helm&lt;/strong&gt;을 통해 설치 된다.
먼저 WebLogic Operator를 위한 Repository를 추가해 준다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;helm repo add weblogic-operator https://oracle.github.io/weblogic-kubernetes-operator/charts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;잘 추가되었는지 확인해 본다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic/02_helm_wlsoperator.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;helm을 통해 weblogic-operator를 설치한다 default 설정으로 설치하면 &lt;strong&gt;defaut&lt;/strong&gt; namespace에 설치된다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;helm install weblogic-operator/weblogic-operator --name weblogic-operator --wait
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic/02_install_wlsoperator.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;weblogic-image-준비&quot;&gt;WebLogic Image 준비&lt;/h1&gt;

&lt;p&gt;WebLogic Domain을 생성하기 위해서는 WebLogic Server Image가 필요하다. Dockerhub에서 Oracle Certified WebLogic Server Image를 다운 받을 수 있다. 이 이미지를 사용하려면 License Agreement를 Accept 해야 한다. 이 과정을 거치면 이미지를 다운 받는 방법이 보여진다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/u/mnlee30/content/sub-b3c05bc6-7dbf-4e96-ad1c-e8d74a626643&quot;&gt;Oracle WebLogic Server Docker Image&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; docker login 

&amp;gt; docker pull store/oracle/weblogic:12.2.1.3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic/06_docker_pull_weblogic.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;weblogic-domain-준비&quot;&gt;WebLogic Domain 준비&lt;/h1&gt;

&lt;p&gt;WebLogic Operator를 사용하여 원하는 형태의 WebLogic Domain을 만들어 프로비전 하려면 관련 Kubernetes Configuration File(YAML)이 필요하다.&lt;/p&gt;

&lt;p&gt;WebLogic Operator 사이트에서 몇가지 샘플을 제공하고 있다.
다음을 통해 소스를 받아온다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/oracle/weblogic-kubernetes-operator.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;weblogic-kubernetes-operator/kubernetes/samples/scripts&lt;/strong&gt;에 필요한 Script들이 존재하고 이 스크립트를 통해서 Kubernates configuration 파일을 생성시킬 것이다.&lt;/p&gt;

&lt;p&gt;먼저 도메인 구성에 필요한 &lt;strong&gt;credential&lt;/strong&gt;을 생성한다. 제공된 &lt;strong&gt;create-weblogic-credentials.sh&lt;/strong&gt;을 통해 생성하면 된다. 사용법은 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./create-weblogic-credentials.sh -h
usage: ./create-weblogic-credentials.sh -u username -p password [-d domainUID] [-n namespace] [-s secretName] [-h]
  -u username, must be specified.
  -p password, must be specified.
  -d domainUID, optional. The default value is domain1. If specified, the secret will be labeled with the domainUID unless the given value is an empty string.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; cd scripts/create-weblogic-domain-credentials
&amp;gt; ./create-weblogic-credentials.sh \
   -u weblogic -p welcome1 \
   -d domain1 -n default  \
   -s domain1-weblogic-credentials
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;다음과 같이 생성 된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic/05_credential_created.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;kubectl&lt;/strong&gt;로 생성된 secret 정보를 확인해 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic/07_desc_secret.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 Domain 생성에 필요한 구성 파일들을 생성할 단계가 되었다.&lt;/p&gt;

&lt;p&gt;여러가지 샘플들 중에서 구성이 가장 간단한 &lt;strong&gt;Domain in a Docker image&lt;/strong&gt; Model를 먼저 사용해 볼 것이다.
해당 디렉토리로 이동하여 &lt;strong&gt;create-domain.sh&lt;/strong&gt;를 수행한다. 사용법은 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; cd weblogic-kubernetes-operator/kubernetes/samples/scripts/create-weblogic-domain/domain-home-in-image
&amp;gt; ./create-domain.sh \
  -u username \
  -p password \
  -i create-domain-inputs.yaml \
  -o /path/to/output-directory

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic/08_createdomain.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;진행 사항이 계속 보이고 마지막에 생성된 산출물들의 위치가 표시된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic/08_createdomain2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;해당 디렉토리로 이동하여 생성된 산출물의 내용을 한번 확인해 보자&lt;/p&gt;

&lt;p&gt;두개의 파일과 Docker Image가 생성된 것을 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic/08_createdomain3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;domainyaml-내용&quot;&gt;domain.yaml 내용&lt;/h3&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Copyright 2017, 2019, Oracle Corporation and/or its affiliates. All rights reserved.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Licensed under the Universal Permissive License v 1.0 as shown at http://oss.oracle.com/licenses/upl.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# This is an example of how to define a Domain resource.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;weblogic.oracle/v3&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Domain&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;domain1&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;default&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;weblogic.resourceVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;domain-v2&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;weblogic.domainUID&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;domain1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# The WebLogic Domain Home&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;domainHome&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/u01/oracle/user_projects/domains/domain1&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# If the domain home is in the image&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;domainHomeInImage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# The WebLogic Server Docker image that the Operator uses to start the domain&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;domain-home-in-image:12.2.1.3&quot;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# imagePullPolicy defaults to &quot;Always&quot; if image version is :latest&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;imagePullPolicy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;IfNotPresent&quot;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Identify which Secret contains the credentials for pulling an image&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;#imagePullSecrets:&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;#- name: &lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Identify which Secret contains the WebLogic Admin credentials (note that there is an example of&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# how to create that Secret at the end of this file)&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;webLogicCredentialsSecret&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;domain1-weblogic-credentials&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Whether to include the server out file into the pod's stdout, default is true&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;includeServerOutInPodLog&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Whether to enable log home&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# logHomeEnabled: false&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# The in-pod location for domain log, server logs, server out, and Node Manager log files&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# logHome: /shared/logs/domain1&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# serverStartPolicy legal values are &quot;NEVER&quot;, &quot;IF_NEEDED&quot;, or &quot;ADMIN_ONLY&quot;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# This determines which WebLogic Servers the Operator will start up when it discovers this Domain&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# - &quot;NEVER&quot; will not start any server in the domain&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# - &quot;ADMIN_ONLY&quot; will start up only the administration server (no managed servers will be started)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# - &quot;IF_NEEDED&quot; will start all non-clustered servers, including the administration server and clustered servers up to the replica count&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;serverStartPolicy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;IF_NEEDED&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;serverPod&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# an (optional) list of environment variable to be set on the servers&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;JAVA_OPTIONS&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-Dweblogic.StdoutDebugEnabled=false&quot;&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;USER_MEM_ARGS&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-Djava.security.egd=file:/dev/./urandom&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-Xms64m&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-Xmx256m&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# volumes:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# - name: weblogic-domain-storage-volume&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#   persistentVolumeClaim:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#     claimName: domain1-weblogic-sample-pvc&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# volumeMounts:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# - mountPath: /shared&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#   name: weblogic-domain-storage-volume&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# adminServer is used to configure the desired behavior for starting the administration server.&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;adminServer&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# serverStartState legal values are &quot;RUNNING&quot; or &quot;ADMIN&quot;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# &quot;RUNNING&quot; means the listed server will be started up to &quot;RUNNING&quot; mode&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# &quot;ADMIN&quot; means the listed server will be start up to &quot;ADMIN&quot; mode&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;serverStartState&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;RUNNING&quot;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# adminService:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#   channels:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# The Admin Server's NodePort&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#    - channelName: default&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#      nodePort: 30701&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Uncomment to export the T3Channel as a service&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#    - channelName: T3Channel&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# clusters is used to configure the desired behavior for starting member servers of a cluster.  &lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# If you use this entry, then the rules will be applied to ALL servers that are members of the named clusters.&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;clusters&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;clusterName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cluster-1&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;serverStartState&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;RUNNING&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;replicas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;2&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# The number of managed servers to start for unlisted clusters&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# replicas: 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위 파일에서 &lt;strong&gt;image&lt;/strong&gt; 부분을 수정해 줄 것이다. 현재 Domain Image는 Local Repository에 존재하는데 Cloud의 OKE에서는 내 Local Repository에 접근할 수 없기 때문에, 이 이미지를 Docker Hub에 올려준 후 docker hub의 이미지를 참조하도록 할 것이다.&lt;/p&gt;

&lt;p&gt;먼저 domain.yaml 파일을 수정해 준다.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Before&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;domain-home-in-image:12.2.1.3&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# After&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# image: &quot;[dockerhub repository name]/domain-home-in-image:12.2.1.3&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;mnlee30/domain-home-in-image:12.2.1.3&quot;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Domain Image를 Dockerhub에 push 하기 위해 tag를 변경해 준다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker tag domain-home-in-image:12.2.1.3 mnlee30/domain-home-in-image:12.2.1.3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic/09_docker_tag.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;image를 docker hub에 push 한다&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker push mnlee30/domain-home-in-image:12.2.1.3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic/10_docker_push.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 domain.yaml을 배포할 준비가 모두 완료되었다.
다음을 수행한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl apply -f domain.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;kubectl 명령어를 통해 domain이 잘 생성되고 있음을 확인 할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic/11_kubectl_apply.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Admin Server 1개와 Managed Server 2개로 구성된 도메인이 생성되었음을 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic/12_get_pods.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;service 정보를 확인해 보자. 앞서서 OKE의 Worker Node가 Private Subnet에 생성되었다고 설명하였다.
따라서 WebLogic Instance들을 Node IP로는 접근할 수가 없다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic/13_get_services.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이 서비스들을 Load Balancer를 통해 서비스 될 수 있도록 &lt;strong&gt;LoadBalancer&lt;/strong&gt; Type을 사용하는 서비스를 추가해 줄 것이다.
Admin Server(domain1-admin-server)의 콘솔에 접근하기 위한 서비스와 Cluster(domain1-cluster-cluster-1)에 접근하는 서비스가 필요하다.&lt;/p&gt;

&lt;h3 id=&quot;admin-server용-서비스&quot;&gt;Admin Server용 서비스&lt;/h3&gt;

&lt;p&gt;service-admin-lb.yaml 파일을 생성해 준다&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Service&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;domain1-admin-lb-ext&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;default&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;domain1-admin&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;annotations&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;service.beta.kubernetes.io/oci-load-balancer-shape&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;100Mbps&quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;service.beta.kubernetes.io/oci-load-balancer-backend-protocol&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;HTTP&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;LoadBalancer&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;http&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;6001&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;targetPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;7001&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;weblogic.serverName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;admin-server&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;weblogic.domainUID&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;domain1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;생성된 파일을 적용한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl apply -f service-admin-lb.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;서비스가 생성되고 EXTERNAL-IP가 할당된 것을 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic/14_admin_service.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이 IP를 이용하여 WebLogic Console에 접근해 본다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic/15_weblogic_console.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;다음과 같이 WebLogic Managed Sever들이 Running 중 임을 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic/15_weblogic_console2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이 도메인에는 어떤 애플리케이션도 배포되어 있지 않기 때문에 Sample Application을 WebLogic Console을 통해 배포 한다.&lt;/p&gt;

&lt;p&gt;배포 과정은 여기서는 생략 한다. 배포된 후의 모습은 다음과 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic/16_application.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;cluster용-서비스&quot;&gt;Cluster용 서비스&lt;/h3&gt;

&lt;p&gt;위에서 배포한 애플리케이션을 테스트 해보기 위해서는 weblogic cluster 서비스에 접근해야 한다.
이를 위해 LoadBalancer Type의 서비스를 하나 더 추가해 준다.&lt;/p&gt;

&lt;p&gt;service-cluster-lb.yaml 파일을 생성해 준다&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Service&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;domain1-cluster1-lb-ext&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;default&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;domain1-cluster1&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;annotations&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;service.beta.kubernetes.io/oci-load-balancer-shape&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;100Mbps&quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;service.beta.kubernetes.io/oci-load-balancer-backend-protocol&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;HTTP&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;LoadBalancer&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;http&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;80&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;targetPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;8001&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;weblogic.clusterName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cluster-1&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;weblogic.domainUID&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;domain1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;생성된 파일을 적용한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl apply -f service-cluster-lb.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic/17_cluster_service.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;서비스가 생성되고 EXTERNAL-IP가 할당된 것을 볼 수 있다.&lt;/p&gt;

&lt;p&gt;위 IP를 통해서 애플리케이션에 접속해 본다. 
샘플 애플리케이션을 통해 WebLogic Managed Server 명과 구동되고 있는 Pod의 Hostname을 볼수 있다.&lt;/p&gt;

&lt;p&gt;제공된 Session Insert / Update 기능을 통해 세션도 추가해 본다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic/18_app_test1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;브라우저를 새로 열어 다른 Managed Server에 연결되게 해본다.
라운드 로빈에 의해서 다른 서버에서 요청이 처리되는 것을 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kubeweblogic/18_app_test2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Saling Up / Down은 다음 글에서 다룰 예정이다.&lt;/p&gt;

&lt;h1 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://oracle.github.io/weblogic-kubernetes-operator/&quot;&gt;Oracle WebLogic Server Kubernetes Operator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="WebLogic" /><category term="Kubernetes" /><category term="Oracle Kubernetes Engine" /><summary type="html">Oracle WebLogic Server 12c 버전 부터 Kubernetes Cluster에 WebLogic Domain을 쉽게 올릴 수 있도록 하는 WebLogic Operator를 지원하고 있다.</summary></entry></feed>