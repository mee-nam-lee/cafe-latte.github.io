<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-03-12T11:04:00+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">MN Lee’s IT Blog</title><subtitle>이 사이트의 Article들은 개인의 경험을 기술한 것으로 특정 제품의 공식 가이드가 아닙니다. 기술된 제품들의 버전에 따라 문서의 방법이 바르게 동작하지 않을 수 있습니다.</subtitle><entry><title type="html">Oracle IaaS와 Java Cloud Service를 사용하여 멀티 AD(Availability Domain)에 3 Tier 아키텍쳐 구축하기</title><link href="http://localhost:4000/cloud/2019/basic-3tier-arch/" rel="alternate" type="text/html" title="Oracle IaaS와 Java Cloud Service를 사용하여 멀티 AD(Availability Domain)에 3 Tier 아키텍쳐 구축하기" /><published>2019-03-05T00:00:00+09:00</published><updated>2019-03-05T00:00:00+09:00</updated><id>http://localhost:4000/cloud/2019/basic-3tier-arch</id><content type="html" xml:base="http://localhost:4000/cloud/2019/basic-3tier-arch/">&lt;p&gt;이 문서에서는 다음과 같은 가장 일반적인 3-Tier 아키텍처 기반의 웹 시스템을 &lt;strong&gt;Oracle Cloud Infrastructure(IaaS)&lt;/strong&gt;와 &lt;strong&gt;Java Cloud Service(PaaS)&lt;/strong&gt;를 이용하여 구축하는 방법에 대해서 기술합니다.&lt;/p&gt;

&lt;p&gt;구축 아키텍처는 다음 그림에서 보여지는 것과 같습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;필요-서비스-및-소프트웨어&quot;&gt;필요 서비스 및 소프트웨어&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Oracle Cloud Infrastructure
    &lt;ul&gt;
      &lt;li&gt;Compute Service&lt;/li&gt;
      &lt;li&gt;Network Service&lt;/li&gt;
      &lt;li&gt;Object Storage Service&lt;/li&gt;
      &lt;li&gt;Database System&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Java Cloud Service&lt;/li&gt;
  &lt;li&gt;필요 소프트웨어
    &lt;ul&gt;
      &lt;li&gt;Apache (Open Source)&lt;/li&gt;
      &lt;li&gt;Oracle Coherence&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;아키텍처-특징&quot;&gt;아키텍처 특징&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Virtual Cloud Network(VCN)&lt;/strong&gt;을 이용하여 가상 네트워크를 구성&lt;/li&gt;
  &lt;li&gt;두 개의 &lt;strong&gt;Availability Domain(AD)&lt;/strong&gt;를 이용하여 &lt;strong&gt;HA&lt;/strong&gt;가 되도록 구성&lt;/li&gt;
  &lt;li&gt;Java Cloud Service(JCS)와 Database는 &lt;strong&gt;Private Subnet&lt;/strong&gt;에 구성&lt;/li&gt;
  &lt;li&gt;서로 다른 AD에 각기 구성된 JCS 도메인의 &lt;strong&gt;세션 공유는 Coherence Cluster&lt;/strong&gt;를 이용하여 구성&lt;/li&gt;
  &lt;li&gt;웹서버에서는 해당 AD 내의 JCS만 로드 발란싱이 이루어 지도록 구성&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;비고&quot;&gt;비고&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;여기서 설명하는 기본 아키텍처에서는 Database 이중화 부분은 고려하지 않음&lt;/li&gt;
  &lt;li&gt;DB 이중화를 위해서는 추가 작업이 필요함&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;network-생성--구성&quot;&gt;Network 생성 / 구성&lt;/h1&gt;

&lt;p&gt;위 아키텍처 구성을 위해 다음과 같은 Virtual Cloud Network(VCN) 구성이 필요합니다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;strong&gt;구분&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;이름&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;Route Table&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;Security List&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;VCN&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;VCN_3Tier&lt;/td&gt;
      &lt;td&gt;Default&lt;/td&gt;
      &lt;td&gt;Default&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Subnet&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;VCN_3Tier_Sub_Web_AD1&lt;/td&gt;
      &lt;td&gt;PublicRT&lt;/td&gt;
      &lt;td&gt;PublicSL&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;VCN_3Tier_Sub_Web_AD2&lt;/td&gt;
      &lt;td&gt;PublicRT&lt;/td&gt;
      &lt;td&gt;PublicSL&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;VCN_3Tier_Sub_WAS_AD1&lt;/td&gt;
      &lt;td&gt;PrivateRT&lt;/td&gt;
      &lt;td&gt;PrivateSL&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;VCN_3Tier_Sub_WAS_AD2&lt;/td&gt;
      &lt;td&gt;PrivateRT&lt;/td&gt;
      &lt;td&gt;PrivateSL&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;VCN_3Tier_Sub_DB_AD1&lt;/td&gt;
      &lt;td&gt;PrivateRT&lt;/td&gt;
      &lt;td&gt;DBSL&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;vcn-생성&quot;&gt;VCN 생성&lt;/h2&gt;

&lt;p&gt;VCN을 다음과 같이 생성합니다. Subnet은 두개만 필요하기 때문에 “&lt;strong&gt;Create Virtual Cloud Network Only&lt;/strong&gt;” 옵션을 선택하고 Subnet을 나중에 추가하도록 합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;service-gateway-생성&quot;&gt;Service Gateway 생성&lt;/h2&gt;
&lt;p&gt;Private Subnet에서 Public에 존재하는 Oracle Service에 Internet 망을 거치지 않고 Oracle Cloud 내부 네트워크를 통해 접속하게 하기 위해서는 Service Gateway가 필요합니다. 이 Service Gateway를 통해 Object Storage에 연결할 것입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;internet-gateway-생성&quot;&gt;Internet Gateway 생성&lt;/h2&gt;

&lt;p&gt;Public Subnet에서 인터넷 접속을 위해 사용할 Internet Gateway를 생성합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;security-list-생성--구성&quot;&gt;Security List 생성 / 구성&lt;/h2&gt;

&lt;p&gt;Subnet을 개별적으로 구성하고 각 Public Subnet / Private Subnet 별로 Route Table과 Security List를 달리 구성해야 하기 때문에 
Subnet 생성 전에 Security List와 Route Table을 미리 구성해 두고 Subnet 생성 시에 미리 만들어진 것들을 이용해야 합니다.&lt;/p&gt;

&lt;p&gt;생성된 VCN의 Security Lists 메뉴로 이동하여 필요한 Security List를 생성합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;아래와 같이 Security List를 생성하고 Ingress/Egress Rule을 추가해 줍니다.&lt;/p&gt;

&lt;h3 id=&quot;public-security-list--publicsl&quot;&gt;Public Security List : PublicSL&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ingress Rules&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Egress Rules&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;private-security-list--privatesl&quot;&gt;Private Security List : PrivateSL&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Ingress Rules&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Public Subnet (10.0.1.0/24, 10.0.2.0/24)으로 부터 들어오는 포트는 22, 80, 8001, 7001이 사용될 것이므로 이 포트를 각각 지정해 줘도 되지만 여기서는 두 Subnet에서부터 들어오는 port는 모두 허용하는 것으로 설정하였습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Egress Rules&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;private-security-list--dbsl&quot;&gt;Private Security List : DBSL&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Ingress Rules&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image13.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Egress Rules&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image14.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;route-table-생성--구성&quot;&gt;Route Table 생성 / 구성&lt;/h2&gt;

&lt;p&gt;Route Table 메뉴에서 Route Table을 생성합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image15.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;public-route-table--publicrt&quot;&gt;Public Route Table : PublicRT&lt;/h3&gt;
&lt;p&gt;Public Route Table에서는 Internet Gateway로 가는 Route를 설정해 줍니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image16.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;private-route-table--privatert&quot;&gt;Private Route Table : PrivateRT&lt;/h3&gt;
&lt;p&gt;Private Route Table에서는 Object Storage로 가기 위한 Service Gateway로의 Route를 추가해 줍니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image18.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;subnet-생성--구성&quot;&gt;Subnet 생성 / 구성&lt;/h2&gt;

&lt;p&gt;만들어진 VCN에 들어가서 &lt;strong&gt;Create Subnet&lt;/strong&gt;을 클릭합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image19.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;public-subnet-1--vcn_3tier_sub_web_ad1&quot;&gt;Public Subnet 1 : VCN_3Tier_Sub_Web_AD1&lt;/h3&gt;

&lt;p&gt;Public Subnet을 다음과 같이 생성합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image20.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;나머지 Subnet들도 다음 표를 참고하여 생성합니다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;strong&gt;Name&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;Subnet Type&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;AD&lt;/strong&gt;   &lt;strong&gt;CIDR&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;Route Table&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;Subnet Access&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;Security List&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;VCN_3Tier_Sub_Web_AD1&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;AVAILABILITY DOMAIN-SPECIFIC&lt;/td&gt;
      &lt;td&gt;AD1&lt;/td&gt;
      &lt;td&gt;10.0.1.0/24&lt;/td&gt;
      &lt;td&gt;PublicRT&lt;/td&gt;
      &lt;td&gt;Public&lt;/td&gt;
      &lt;td&gt;PublicSL&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;VCN_3Tier_Sub_Web_AD2&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;AVAILABILITY DOMAIN-SPECIFIC&lt;/td&gt;
      &lt;td&gt;AD2&lt;/td&gt;
      &lt;td&gt;10.0.2.0/24&lt;/td&gt;
      &lt;td&gt;PublicRT&lt;/td&gt;
      &lt;td&gt;Public&lt;/td&gt;
      &lt;td&gt;PublicSL&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;VCN_3Tier_Sub_WAS_AD1&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;AVAILABILITY DOMAIN-SPECIFIC&lt;/td&gt;
      &lt;td&gt;AD1&lt;/td&gt;
      &lt;td&gt;10.0.3.0/24&lt;/td&gt;
      &lt;td&gt;PrivateRT&lt;/td&gt;
      &lt;td&gt;Private&lt;/td&gt;
      &lt;td&gt;PrivateSL&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;VCN_3Tier_Sub_WAS_AD2&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;AVAILABILITY DOMAIN-SPECIFIC&lt;/td&gt;
      &lt;td&gt;AD2&lt;/td&gt;
      &lt;td&gt;10.0.4.0/24&lt;/td&gt;
      &lt;td&gt;PrivateRT&lt;/td&gt;
      &lt;td&gt;Private&lt;/td&gt;
      &lt;td&gt;PrivateSL&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;VCN_3Tier_Sub_DB_AD1&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;AVAILABILITY DOMAIN-SPECIFIC&lt;/td&gt;
      &lt;td&gt;AD1&lt;/td&gt;
      &lt;td&gt;10.0.5.0/24&lt;/td&gt;
      &lt;td&gt;PrivateRT&lt;/td&gt;
      &lt;td&gt;Private&lt;/td&gt;
      &lt;td&gt;DBSL&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;bucket-생성&quot;&gt;BUCKET 생성&lt;/h1&gt;

&lt;p&gt;Java Cloud Service(JCS)와 Database System 생성 시에 백업을 위한 Object Storage Bucket이 필요하기 때문에 다른 준비에 앞서서 미리 만들어 두도록 합니다. 특히 JCS에서의 Bucket 사용 관련하여서는 다음과 같은 전제 조건이 있기 때문에 Bucket 생성 시에는 OCI의 IAM 계정을 등록하고 이 계정을 이용하여 Bucket을 생성하도록 합니다.&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;Bucket 생성은 IDCS Federated User가 아닌 IAM에 등록된 User로 만들어야 하고, 이 계정 정보를 JCS 생성시 Backup Storage Container Credential로 사용한다.&lt;/p&gt;

  &lt;p&gt;The user creating the buckets must be a user in Oracle Cloud Infrastructure Identity and Access Management (IAM), not a federated user.&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;JCS에서 사용할 Bucket을 하나 생성합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image21.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Database에서 사용할 Bucket을 하나 생성 합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image22.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;db-생성&quot;&gt;DB 생성&lt;/h1&gt;

&lt;p&gt;OCI 콘솔의 &lt;strong&gt;Bare Metal, VM, and Exadata&lt;/strong&gt; 메뉴로 들어가서 해당하는 Compartment를 선택 후 &lt;strong&gt;Launch DB System&lt;/strong&gt;을 클릭하여 DB를 생성 합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image23.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Virtual Machine 옵션을 선택 합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image24.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;미리 생성해 둔 DB용 Subnet을 선택 합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image25.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;백업 선택은 옵션이니 사용할 경우에는 위에서 생성해 둔 BUCKET 정보를 이용합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image26.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image27.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;DB가 잘 생성되었는지 확인합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image28.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;jcs-생성&quot;&gt;JCS 생성&lt;/h1&gt;

&lt;p&gt;이 단계에서는 WebLogic 기반의 PaaS 서비스인 Java Cloud Service를 생성하도록 하겠습니다.&lt;/p&gt;

&lt;h3 id=&quot;사전-준비-사항&quot;&gt;사전 준비 사항&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;JCS 용 버킷 생성 : 이전 단계에서 생성함&lt;/li&gt;
  &lt;li&gt;PSM(PaaS Service Manager)가 OCI의 리소스를 사용하기 위한 Policy들이 사전 정의 되어야 함 : 아래 Policy를 참고하여 속해 있는 그룹의 Policy에 추가해 줍니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image29.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Private Subnet을 사용하는 Java Cloud Service(JCS)는JCS 서비스 콘솔을 통해서 생성할 수가 없습니다. 현재까지는 JCS 콘솔에서는 Public Subnet 만 선택할 수 있게 되어 있습니다.&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;&lt;strong&gt;&lt;em&gt;참고 문서 :&lt;/em&gt;&lt;/strong&gt; &lt;a href=&quot;https://docs.oracle.com/en/cloud/paas/java-cloud/jscug/create-instance-attached-private-subnet-oci.html#GUID-36EB6099-C792-4017-A4C7-06F796926AF6&quot;&gt;Create an Oracle Java Cloud Service Instance Attached to a Private Subnet on Oracle Cloud Infrastructure&lt;/a&gt;&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;따라서 Private Subnet을 이용하는 JCS를 생성하고자 할 경우에는 제공되는 REST API를 이용하거나 PSM(PaaS Service Manager) CLI를 이용해야 하는데. 이 가이드에서는 REST API를 이용하는 방법으로 설명합니다.&lt;/p&gt;

&lt;p&gt;또한 참고문서(매뉴얼)에서 설명하는 방법으로 생성하게 되면 Database System on Oracle Cloud Infrastucture가 아닌 Database Cloud Service (DBCS on OCI-C)가 생성되기 때문에 &lt;strong&gt;Database System on OCI를 이용한 JCS를 생성하고자 한다면 아래 설명을 따라 수행해야 합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;JCS 서비스를 생성하는 REST API는 다음과 같습니다.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;curl -X POST https://jaas.oraclecloud.com/paas/api/v1.1/instancemgmt/[IdentityServiceID]/services/jaas/instances \
-u [User Name]:[Password] \
-H 'X-ID-TENANT-NAME: [IdentityServiceID]' \
-H 'Content-Type: application/json' \
-d @requestBodyFile.json
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;여기서 입력 값으로 사용하는 &lt;strong&gt;requestBodyFile.json&lt;/strong&gt;이라는 json의 내용이 복잡하고 많은데, 이는 JCS의 콘솔을 통해서 얻을 수 있습니다.&lt;/p&gt;

&lt;p&gt;JSON을 얻기 위해 먼저 JCS 콘솔로 이동하여 &lt;strong&gt;Create Instance&lt;/strong&gt;를 선택하여 Provision을 위한 정보 들을 입력합니다. Subnet List Box에서는 위에서 언급한 것처럼 Public Subnet만 보일 것이기 때문에 보이는 것 중 어느 것이나 선택해도 무방합니다. &lt;strong&gt;향후 JSON을 얻고 나서 Private Subnet을 사용하는 것으로 수정해 줄 것 입니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image30.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advanced&lt;/strong&gt; 옵션을 선택하고 다음과 같이 선택해 줍니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Enable Access to Administration Consoles: true&lt;/li&gt;
  &lt;li&gt;Load Balancer: None&lt;/li&gt;
  &lt;li&gt;Oracle Cloud Infrastructure Database : check&lt;/li&gt;
  &lt;li&gt;Compartment Name : 해당 Compartment&lt;/li&gt;
  &lt;li&gt;Database Instance Name : 앞 단계에서 생성해 둔 DB 선택&lt;/li&gt;
  &lt;li&gt;Object Storage Container : JCS 용으로 생성해 둔 Bucket 정보를 입력합니다.
    &lt;ul&gt;
      &lt;li&gt;https://swiftobjectstorage.us-ashburn-1.oraclecloud.com/v1/[TENANT-ID]/[BUCKET-명]&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.cloud.oracle.com/iaas/Content/API/Concepts/apiref.htm&quot;&gt;Region 별 REST API Endpoint 참고&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;예: https://swiftobjectstorage.us-ashburn-1.oraclecloud.com/v1/apackrsct01/jcs_bucket&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Object Storage Password : IAM 계정의 &lt;strong&gt;Auth Token&lt;/strong&gt;을 입력해 줍니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Next&lt;/strong&gt;를 클릭합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image31.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Confirm 화면에서 화살표로 표시된 Input Parameter들이 담긴 &lt;strong&gt;JSON 다운받기&lt;/strong&gt;를 클릭합니다. 이 서비스를 콘솔에서 생성할 것이 아니므로 여기서는 &lt;strong&gt;Cancel&lt;/strong&gt;을 클릭합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image32.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;service_payload_jcs서비스명.json&lt;/strong&gt; 파일이 생성되었을 것 입니다. 이 파일을 앞서 설명한 REST API의 Input Json으로 사용할 것입니다. 이 파일을 열어서 다음에 설명하는 항목들을 변경해 줍니다.&lt;/p&gt;

&lt;p&gt;빨간 박스로 체크해 둔 항목을 수정해 줍니다. Subnet 부분 변경이 핵심이므로 JCS에서 사용할 &lt;strong&gt;Private Subnet의 OCID&lt;/strong&gt;로 변경해 줍니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image33.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;파일 수정이 완료되었으면 위에서 설명한 Create Instance REST API를 수행해 줍니다.&lt;/p&gt;

&lt;p&gt;스크립트로 만들어서 다음과 같이 수행해도 됩니다. API가 수행되면 JOB ID가 다음과 같이 리턴되고, 리턴된 JOB ID로 JOB의 상태를 확인해 볼 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image34.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;checkJCSJob.sh 스크립트 내용&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;curl https://jaas.oraclecloud.com/paas/api/v1.1/activitylog/[identityServiceID]/job/[JOBID] \                                            
-u [usename]:[password] \                                                                            
-H 'X-ID-TENANT-NAME: [identityServiceID]'                                           
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;JOB이 실행되고 있는 사항은 JCS 콘솔에서도 확인 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image35.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위와 같은 방법으로 AD1, AD2를 사용하는 WAS 용 Subnet에 각각 한 개씩 JCS 서비스를 생성 합니다.&lt;/p&gt;

&lt;p&gt;다 완성된 모습은 다음과 같습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image36.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;web-서버-생성-및-설정&quot;&gt;Web 서버 생성 및 설정&lt;/h1&gt;

&lt;p&gt;JCS 서버의 서비스 앞 단에 WEB 서버 인스턴스를 두고 로드 발란싱을 하도록 구성할 것입니다. 웹서비는 어떤 것을 사용하여도 무방합니다.
여기에서는 Apache를 사용하는 것으로 설명합니다.&lt;/p&gt;

&lt;h2 id=&quot;compute-인스턴스-생성&quot;&gt;Compute 인스턴스 생성&lt;/h2&gt;

&lt;p&gt;웹서버는 IaaS Compute 인스턴스에 구성할 것입니다. 따라서 먼저 Compute Instance를 생성합니다.&lt;/p&gt;

&lt;p&gt;AD1과 AD2 에 각각 한개 씩 구성할 예정이므로 먼저 AD1 의 Public Subnet에 인스턴스를 다음과 같이 생성합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image37.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image38.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image39.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;생성되었습니다. SSH로 접속할 Public IP를 기억해 두세요.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image40.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;두 번째 인스턴스는 첫번 째 인스턴스 구성을 다 완료한 후에 Custom Compute Image로 만들어서 생성할 것입니다.&lt;/p&gt;

&lt;p&gt;그러므로 먼저 첫번째 인스턴스 구성을 먼저 완료하도록 하겠습니다.&lt;/p&gt;

&lt;p&gt;생성된 인스턴스의 Public IP를 이용하여 SSH로 접속합니다.&lt;/p&gt;

&lt;h2 id=&quot;apache-설치&quot;&gt;Apache 설치&lt;/h2&gt;

&lt;p&gt;웹서버로 사용할 Apache를 설치하여야 합니다. Yum으로 설치하는 httpd는 shared module이 enabled 된 버전이 아니기 때문에 Apache 소스를 받아서 컴파일하여 설치하는 방법으로 Apache를 설치 해 줍니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://httpd.apache.org/docs/2.4/install.html&quot;&gt;Apache 설치 참고 문서&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;참고로 저는 다음 옵션을 사용하여 컴파일 하였습니다.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;sudo ./configure --prefix=/usr/local/apache --enable-module=so --with-pcre=/usr/local/pcre/bin/pcre-config -enable-rewrite --with-mpm=worker --enable-ssl  
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;weblogic-plugin-설치&quot;&gt;WebLogic Plugin 설치&lt;/h2&gt;

&lt;p&gt;Plugin 소프트웨어를 다음에서 다운 받습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.oracle.com/technetwork/middleware/webtier/downloads/index-jsp-156711.html&quot;&gt;웹로직 플러그인 다운 받기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image41.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;다운 받은 zip 파일을 안에는 여러 웹서버 및 OS용 Plugin들이 모두 들어 있습니다. 이 중에서 Linux용 Apache 플러그인 만 웹서버용 Compute 인스턴스로 복사해 줍니다.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;scp -i privateKey ~/Downloads/fmw_12.2.1.3.0_wlsplugins_Disk1_1of1/WLSPlugins12c-12.2.1.3.0/WLSPlugin12.2.1.3.0-Apache2.2-Apache2.4-Linux_x86_64-12.2.1.3.0.zip opc@[웹서버 Public IP]:/home/opc/wlplugin/
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;복사된 플러그인 zip 파일의 압축을 풉니다. 아래 라이브러리들 중 mod_wl.so 파일을 사용할 것입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image42.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;apache-구성&quot;&gt;Apache 구성&lt;/h2&gt;

&lt;p&gt;WebLogic Plugin 구성 상세는 다음을 참고하세요&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/middleware/12213/webtier/develop-plugin/apache.htm#PLGWL395&quot;&gt;Configuring the Plug-In for Apache HTTP Server&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 가이드에서는 &lt;strong&gt;/usr/local/apache&lt;/strong&gt; 경로에 Apache가 설치되어 있습니다. conf 디렉토리로 이동하여 httpd.conf 파일을 수정해 줍니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;WebLogicHost&lt;/strong&gt;는 JCS 서비스의 Private IP를 참고하여 변경합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;애플리케이션은 아직 배포되지 않았으나 미리 설정해 둡니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;JCS가 Private Subnet에 구성되었기 때문에 현재로서는 웹로직 콘솔을 Internet을 통해서 접속할 수가 없습니다. 따라서 웹서버에서 포워딩하는 형태로 웹로직 콘솔에 접속하기 위하여 &lt;strong&gt;/console 설정도 해 줍니다. 여기서의 WebLogicHost는 웹로직 Admin Server의 Host&lt;/strong&gt;여야 합니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;s&quot;&gt;... 생략&lt;/span&gt;                                                          
                                                                   
&lt;span class=&quot;c1&quot;&gt;# Weblogic Module 추가                                           &lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;LoadModule weblogic_module /home/opc/wlplugin/lib/mod_wl_24.so&lt;/span&gt; 

&lt;span class=&quot;nn&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;생략&lt;/span&gt;  

&lt;span class=&quot;s&quot;&gt;&amp;lt;Location /console&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;WLSRequest On&lt;/span&gt;   
 &lt;span class=&quot;s&quot;&gt;WebLogicHost 10.0.3.2&lt;/span&gt;  
 &lt;span class=&quot;s&quot;&gt;WebLogicPort 7001&lt;/span&gt; 
&lt;span class=&quot;s&quot;&gt;&amp;lt;/Location&amp;gt;&lt;/span&gt; 

&lt;span class=&quot;s&quot;&gt;&amp;lt;Location /cohweb&amp;gt;&lt;/span&gt;   
 &lt;span class=&quot;s&quot;&gt;WLSRequest On&lt;/span&gt;   
 &lt;span class=&quot;s&quot;&gt;WebLogicHost 10.0.3.2&lt;/span&gt; 
 &lt;span class=&quot;s&quot;&gt;WebLogicPort 8001&lt;/span&gt;  
&lt;span class=&quot;s&quot;&gt;&amp;lt;/Location&amp;gt;&lt;/span&gt; 

&lt;span class=&quot;s&quot;&gt;&amp;lt;IfModule mod_weblogic.c&amp;gt;&lt;/span&gt; 
 &lt;span class=&quot;s&quot;&gt;WebLogicHost 10.0.3.2&lt;/span&gt;   
 &lt;span class=&quot;s&quot;&gt;WebLogicPort 8001&lt;/span&gt;  
 &lt;span class=&quot;s&quot;&gt;MatchExpression *.jsp&lt;/span&gt;   
 &lt;span class=&quot;s&quot;&gt;DebugConfigInfo ON&lt;/span&gt;    
&lt;span class=&quot;s&quot;&gt;&amp;lt;/IfModule&amp;gt;&lt;/span&gt;  

&lt;span class=&quot;nn&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;생략&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Apache를 구동 시킵니다. Apache가 default로 80 포트로 Listen하고 있는데 해당 Port가 Firewall을 통과할 수 있도록 다음 커맨드를 통해서 등록해 줍니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image43.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Apache 구성이 완료되었습니다.&lt;/p&gt;

&lt;h2 id=&quot;커스텀-이미지-생성&quot;&gt;커스텀 이미지 생성&lt;/h2&gt;

&lt;p&gt;AD2에서 사용할 Web 서버 인스턴스도 생성해야 합니다. 구성이 완료된 WEB 인스턴스를 Custom Image로 만들어서 Compute Instance를 생성하겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image44.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image45.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이미지가 생성되고 나면 이 이미지를 사용하여 Compute Instance를 생성합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image46.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image47.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;AD2의 Subnet을 사용합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image48.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Compute Instance가 다 생성되고 나면, SSH로 접속하여 Apache 설정만 변경해 주면 됩니다.&lt;/p&gt;

&lt;p&gt;AD2의 Apache는 AD2 내의 JCS 서비스를 바라보도록 httpd.conf의 WeblogicHost 정보만 바꿔주고 Apache를 기동시켜 줍니다.&lt;/p&gt;

&lt;h1 id=&quot;coherence-설치-및-구성&quot;&gt;Coherence 설치 및 구성&lt;/h1&gt;

&lt;p&gt;이제는 Coherence 구성을 진행하도록 하겠습니다. 
두 AD 간의 두개의 JCS 서비스 간 HTTP Session 공유를 위하여 Coherence를 사용할 예정입니다. JCS 내에도 Managed Coherence 서버를 구성할 수 있지만 서로 다른 WebLogic Domain간의 세션 공유를 위해서 별도의 Coherence Cluster를 구성하도록 하겠습니다.&lt;/p&gt;

&lt;p&gt;Coherence 구성을 위해서 두개의 Compute Instance가 필요합니다.&lt;/p&gt;

&lt;p&gt;Coherence용 Compute Instance를 AD1에 먼저 구성한 후 구성이 완료된 후에 WEB의 경우와 마찬가지로 Custom Image를 생성하여 AD2에도 구성하도록 하겠습니다. Coherence는 Private Subnet에 만들어져야 합니다.&lt;/p&gt;

&lt;p&gt;Compute Instance를 만드는 과정을 생략하도록 하겠습니다. 생성되고 난 후의 모습은 다음과 같습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image49.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;인스턴스가 생성된 후 SSH로 Coherence 노드에 접속합니다. Private Subnet에 속해 있기 때문에 WEB 인스턴스를 통해서 Coherence 인스턴스에 접속합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image50.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;coherence-설치&quot;&gt;Coherence 설치&lt;/h2&gt;

&lt;p&gt;Stand alone으로 설치하는 Coherence는 JCS내의 Coherence 버전과 동일해야 합니다. JCS 콘솔에서 WebLogic 버전을 확인합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image51.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;동일 버전의 Coherence SW를 다운 받습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.oracle.com/technetwork/middleware/coherence/overview/index.html&quot;&gt;Coherenc Download&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image52.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Coherence 설치 과정은 다음을 참고하시기 바랍니다. 여기에서는 설치 이후의 설정 과정만 설명하도록 하겠습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/middleware/1212/coherence/COHDG/gs_install.htm#COHDG5660&quot;&gt;Installing Oracle Coherence for Java&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 가이드에서는 coherence가 다음 위치에 설치 되었습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image53.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Coherence 기동을 위한 스크립트를 작성합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Coherence*Web&lt;/strong&gt;을 사용할 것이기 때문에 session cache 설정을 해 줍니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Cloud 환경에서 multicast가 지원되지 않기 때문에 &lt;strong&gt;unicast를 사용하는 WKA(Well Known Address)&lt;/strong&gt;를 설정해 줍니다. WKA 상세 설명과 여러 개의 WKA를 설정하는 방법은 다음 문서를 참고 하세요.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/middleware/12213/coherence/COHDG/setting-cluster.htm#COHDG5454&quot;&gt;Using Well Known Addresses&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;java -server -Xms512m -Xmx512m -cp /home/opc/fmw/coherence/lib/coherence.jar:/home/opc/fmw/coherence/lib/coherence-web.jar -Dcoherence.mode=prod -Dcoherence.management.remote=true -Dcoherence.session.localstorage=true -Dcoherence.enable.sessioncontext=true -Dcoherence.cacheconfig=default-session-cache-config.xml -Dcoherence.cluster=mycoh -Dcoherence.wka=10.0.3.3 com.tangosol.net.DefaultCacheServer
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;스크립트를 실행 시켜 Coherence를 기동 시킵니다. 아래와 유사한 로그가 보여질 것입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image54.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;coherence1 구성이 완료 되었으면 Custom Image를 생성해서 두번째 Instance를 생성합니다.&lt;/p&gt;

&lt;p&gt;생성하는 과정은 생략하도록 하겠습니다. 생성된 후의 모습은 다음과 같습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image55.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Coherence 구성은 완료된 상황이기 때문에 Coherence 설치 디렉토리로 이동하여 Coherence 구동 스크립트를 실행 시켜 줍니다.&lt;/p&gt;

&lt;h1 id=&quot;jcs에서-coherence-설정&quot;&gt;JCS에서 Coherence 설정&lt;/h1&gt;

&lt;p&gt;이 단계에서는 JCS의 세션을 Coherence에 저장하도록 설정하는 과정을 수행합니다. 
그렇게 하기 위해서는 WebLogic의 Managed Server들을 앞 단계에서 설정한 Coherence Cluster에 &lt;strong&gt;Join&lt;/strong&gt; 되게 해 주어야 합니다.&lt;/p&gt;

&lt;p&gt;이 설정은 WebLogic Console을 통해 수행해야 하는데 JCS가 Private Subnet에 생성 되었기 때문에 JCS 메뉴에 있는 “WebLogic Console” 열기를 통해서는 콘솔에 접속할 수 없습니다.&lt;/p&gt;

&lt;p&gt;따라서 앞서 Web 설정에서 /console Location을 추가 해 두었기 때문에 웹서버(Apache)의 Public IP를 통해 웹로직 콘솔에 접속합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;http://[웹서버-Public-IP]/console&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;JCS의 WebLogic Cluster들은 Cohernece Cluster의 기본 구성을 사용하도록 설정되어 있습니다. 여기에서는 Default로 구성되는 Coherence를 사용하지 않고 Stand Alone으로 구성된 Coherence에 Join할 것이 때문에 아래 화면에서 설명하는 방법을 따라 Coherence Cluster에서 WebLogic Cluster를 멤버에서 제거해 줍니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image56.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image57.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image58.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;멤버에서 잘 제외 되었는지 확인합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image59.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;서버 메뉴로 이동하여서 각 WebLogic Managed Server가 구동할 때 Coherence Cluster의 멤버로 Join할 수 있도록 WebLogic Managed Server의 Start Script 부분을 수정해 줍니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image60.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image61.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;기본적으로 설정되어 있는 Start Script의 Arguments를 확인합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image62.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이 Argument를 다음과 같이 수정합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image63.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Argument 전체 부분을 변경하면 안되고, 아래 빨간색으로 표시된 부분만 변경 될 수 있도록 합니다. &lt;strong&gt;기존 Argument에서 -Dtangosol.coherence.transport.reliable=tmb -Dtangosol.coherence.socketprovider=tcp 이 두 옵션은 제외해야 하니 주의 하세요.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-Xms256m -Xmx8192m -XX:MaxMetaspaceSize=2048m -Djdk.tls.rejectClientInitiatedRenegotiation=true -Xloggc:/u01/data/domains/privJCS2_domainGC_privJCS2_server_1.log -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=4 -XX:GCLogFileSize=5m -Dweblogic.rjvm.enableprotocolswitch=true -Djava.net.preferIPv4Stack=true -Doracle.security.jps.db.connect.max.retry=720 -Doracle.security.jps.db.connect.retry.interval=10000 -Djps.auth.debug=false -DUSE_JAAS=false -Djps.combiner.optimize.lazyeval=true -Djps.combiner.optimize=true -Djps.authz=ACC -Djps.subject.cache.key=5 -Djps.subject.cache.ttl=600000 -Dweblogic.security.SSL.minimumProtocolVersion=TLSv1.2 -XX:+UnlockCommercialFeatures -XX:+FlightRecorder -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Dweblogic.data.canTransferAnyFile=true -Djava.security.egd=file:/dev/./urandom -XX:CompileThreshold=8000 -XX:ReservedCodeCacheSize=1024m -Doracle.jdbc.fanEnabled=false -Dcoherence.session.localstorage=false -Dcoherence.enable.sessioncontext=true -Dcoherence.cluster=mycoh -Dtangosol.coherence.cluster=mycoh -Dcoherence.wka=10.0.3.3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;스크립트 변경이 완료되었으면 웹로직 서버를 재기동해야 합니다. 아래와 같이 &lt;strong&gt;Control&lt;/strong&gt; 탭으로 이동하여 해당 서버만 재기동 합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image64.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image65.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;서버가 정상적으로 기동되고 나면 세션 테스트을 위핸 샘플 애플리케이션을 배포해야 합니다.&lt;/p&gt;

&lt;h1 id=&quot;애플리케이션-배포&quot;&gt;애플리케이션 배포&lt;/h1&gt;

&lt;p&gt;세션 테스트를 위햔 애플리케이션은 세션을 사용하는 어떤 애플리케이션을 이용하여도 무방합니다. 애플리케이션에서 Coherence*Web을 사용하게 하기 위해서는 &lt;strong&gt;weblogic.xml&lt;/strong&gt; 에 다음과 같은 설정만 추가해 주면 됩니다.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;wls:session-descriptor&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;wls:persistent-store-type&amp;gt;&lt;/span&gt;coherence-web&lt;span class=&quot;nt&quot;&gt;&amp;lt;/wls:persistent-store-type&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/wls:session-descriptor&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;여기에서는 간단한 샘플 애플리케이션(cohweb)을 이용할 것입니다.&lt;/p&gt;

&lt;p&gt;웹로직 콘솔의 &lt;strong&gt;Deployments&lt;/strong&gt; 메뉴에서 애플리케이션을 배포합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image66.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;로컬 환경에서 JCS Cloud 환경으로 애플리케이션을 &lt;strong&gt;Upload&lt;/strong&gt;해 줍니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image67.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image68.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image69.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image70.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;애플리케이션을 Cluster에 배포합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image71.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image72.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image73.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image74.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;애플리케이션이 배포되고 나서는 애플리케이션을 시작 시켜야 서비스를 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image75.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;애플리케이션이 서비스 가능 상태가 되었습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image76.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;AD2의 JCS도 위와 마찬가지로 설정해 줍니다. 동일하게 애플리케이션도 배포해 줍니다.&lt;/p&gt;

&lt;h1 id=&quot;load-balancer-생성&quot;&gt;Load Balancer 생성&lt;/h1&gt;

&lt;p&gt;마지막으로 Load Balancer를 생성해 줍니다. 이 Load Balancer는 web1, web2를 Round Robin으로 발란싱하게 구성합니다.
Load Balancer는 &lt;strong&gt;Sticky Session&lt;/strong&gt;을 지원하도록 설정할 수도 있지만, HA 태스트를 위해서 web1, web2로 Round Robin으로 돌리며 테스트를 진행할 예정이기 때문에 Sticky Session으로 설정하지 않습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image77.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image78.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;생성이 되고 나면 다음과 같이 보여집니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image79.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;test&quot;&gt;Test&lt;/h1&gt;

&lt;p&gt;이제 구성된 Load Balancer를 통해서 Application을 테스트 해 보겠습니다. Load Balancer의 Public IP로 접속합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;http://[Load-Balancer-Public-IP]/cohweb&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;다음과 같은 화면이 보일 것 입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image80.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;세션을 몇개 추가해 봅니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image81.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;브라우저의 Refresh 버튼을 클릭하여 request를 계속 보내 봅니다. 다른 JCS Server 접속된 것을 확인할 수 있고, 세션이 유지되는 것을 확인 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3tier/image82.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;아래는 3 Tier의 각 컴포넌트를을 차례로 Down 시키면서 세션이 유지되는지 테스트하는 과정입니다.
각 Layer의 컴포넌트를 하나씩 내려 보면서 세션이 계속 유지되는지 테스트 해보시면 HA 아키텍처를 이해하는데 더욱 도움이 될 것입니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;먼저 정상 상황에서 서로 다른 두 WebLogic Server간의 세션 공유가 됨을 확인 합니다.&lt;/li&gt;
  &lt;li&gt;Coherence (Http Serssion 서버) 노드를 하나 다운 시키고 나서 세션이 공유 됨을 확인합니다.&lt;/li&gt;
  &lt;li&gt;제일 앞단의 로드 발란서에서 웹서버 사이의 로그 발란싱 정책은 Round Robin 입니다. 세션에 상관없이 이 구간에서는 Round Robin으로 동작하지만 웹서버 WebLogic Server 구간은 Sticky Session이 적용됩니다. 따라서 현재 접속되어 있는 WebLogic Server 정보를 확인하고 해당 서버를 Down 시킴으로써, 요청이 다른 서버로 이동되게 합니다. 이 경우에도 정상적으로 세션이 유지됨을 확인 합니다.&lt;/li&gt;
  &lt;li&gt;마지막으로 웹서버를 다운 시켜서 로드 발란서에서 살아있는 웹서버로만 요청이 이루어짐을 확인 합니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;iframe width=&quot;710&quot; height=&quot;410&quot; src=&quot;https://www.youtube.com/embed/EiXjE82FuCI&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;이상으로 모든 구성이 완료되었습니다.&lt;/p&gt;</content><author><name></name></author><category term="Oracle Cloud" /><category term="Virtual Cloud Network" /><category term="IaaS" /><category term="3 Tier Architecture" /><category term="HA" /><category term="Java Cloud Service" /><summary type="html">이 문서에서는 다음과 같은 가장 일반적인 3-Tier 아키텍처 기반의 웹 시스템을 Oracle Cloud Infrastructure(IaaS)와 Java Cloud Service(PaaS)를 이용하여 구축하는 방법에 대해서 기술합니다.</summary></entry><entry><title type="html">Digital Assistant(챗봇)와 Content and Experience(CECS) 연동하기</title><link href="http://localhost:4000/chatbot/2019/chatbot_cecs/" rel="alternate" type="text/html" title="Digital Assistant(챗봇)와 Content and Experience(CECS) 연동하기" /><published>2019-02-19T00:00:00+09:00</published><updated>2019-02-19T00:00:00+09:00</updated><id>http://localhost:4000/chatbot/2019/chatbot_cecs</id><content type="html" xml:base="http://localhost:4000/chatbot/2019/chatbot_cecs/">&lt;p&gt;이 포스트에서는 오라클 챗봇인 &lt;strong&gt;Digital Assistant&lt;/strong&gt;와 &lt;strong&gt;Content and Experience Cloud (이후 CECS)&lt;/strong&gt;라는 Content 관리 솔루션과 연계하는 방법에 대해서 다룰 것입니다.&lt;/p&gt;

&lt;p&gt;챗봇을 통해서 CECS에 저장되어 있는 컨텐츠를 검색하고 검색된 결과 문서나 폴더의 &lt;strong&gt;Public Link&lt;/strong&gt;를 통해서 바로 해당 컨텐츠를 확인할 수 있는 예제를 설명할 것입니다.&lt;/p&gt;

&lt;p&gt;이를 위해서는 Chatbot의 커스텀 컴포넌트 작성이 필요한데, 커스텀 컴포넌트 작성과 관련하여서는 이전 기고에서 몇 차례 다루었기 때문에 여기에서는 CECS 연계 코드 부분만 설명하도록 하겠습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/chatbot/2019/chatbot_adw/&quot;&gt;챗봇 커스텀 컨포넌트 작성 및 Compute CS에서 커스텀 컴포넌트 구동하기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/chatbot/2019/챗봇-Embedded-Container/&quot;&gt;Embedded Container에 커스텀 컴포넌트 올리기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;사전-준비-사항&quot;&gt;사전 준비 사항&lt;/h2&gt;
&lt;p&gt;아래 서비스가 미리 생성되어 있어야 합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Oracle Digital Assistant (ODA)&lt;/li&gt;
  &lt;li&gt;Oracle Content and Experience Cloud (CECS)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;custom-component&quot;&gt;Custom Component&lt;/h2&gt;
&lt;p&gt;CECS 연동을 위해서는 CECS에서 제공하는 REST API를 사용할 것 입니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/en/cloud/paas/content-cloud/rest-api-documents/rest-endpoints.html&quot;&gt;CECS REST API 참고하기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 포스트에서는 컨텐츠 검색과 컨텐츠 접근을 위해서 Public Link를 얻어오는 기능을 사용하기 때문에 다음 두개의 REST API를 사용합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/en/cloud/paas/content-cloud/rest-api-documents/op-documents-api-1.2-folders-search-items-get.html&quot;&gt;Search Folders or Files&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/en/cloud/paas/content-cloud/rest-api-documents/api-publiclinks.html&quot;&gt;Publiclinks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;예제는 챗봇으로 부터 컨텐츠 검색을 위한 &lt;strong&gt;keyword&lt;/strong&gt;를 입력받고 keyword에 해당하는 컨텐츠를 검색한 후, 해당 컨텐츠의 publiclink 정보를 가저와서 챗봇에 보내준 후 챗봇의 url 버튼 기능을 이용하여 해당 컨텐츠로 이동하는 예제 입니다.&lt;/p&gt;

&lt;p&gt;작성된 커스텀 컴포넌트 Code Snippet은 다음과 같습니다.&lt;/p&gt;

&lt;h3 id=&quot;searchcecsjs&quot;&gt;searchcecs.js&lt;/h3&gt;
&lt;p&gt;cecs의 REST API를 호출하고 챗봇에 보여줄 메시지를 생성하는 Custom Component 로직입니다.
이 코드에서 &lt;strong&gt;publiclink&lt;/strong&gt;에 해당하는 부분을 각자 환경에 맞게 수정합니다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 생략&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;publink&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://[CECS DOMAIN]/documents/link/&quot;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;searchapi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/folders/search/items&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;publicfilelinkapi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/publiclinks/file/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;publicfolderlinkapi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/publiclinks/folder/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 생략&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mee-nam-lee/chatbot/blob/master/bot-start/components/searchcecs.js&quot;&gt;전체 searchcecs.js 코드&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;utiljs&quot;&gt;util.js&lt;/h3&gt;
&lt;p&gt;REST API를 실제로 호출하는 코드 입니다. &lt;strong&gt;baseForAPI&lt;/strong&gt;와 &lt;strong&gt;auth&lt;/strong&gt; 부분의 각자 환경에 맞게 수정합니다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 생략&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;baseForAPI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://[CECS CLOUD DOMAIN]/documents/api/1.2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;auth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Basic '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'[USERID]:[PASSWORD]'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'base64'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 생략&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mee-nam-lee/chatbot/blob/master/bot-start/components/utils/util.js&quot;&gt;전체 util.js 코드&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;bot에서-custom-컴포넌트-연결&quot;&gt;Bot에서 Custom 컴포넌트 연결&lt;/h2&gt;
&lt;p&gt;Custom 컴포넌트 연계 방법은 이전 포스트를 참고하시기 바랍니다. 컴포넌트가 연결되고 나면 아래와 같이 서비스가 보이게 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_cecs/cecs_service.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;bot-dialogue-flow&quot;&gt;Bot Dialogue Flow&lt;/h2&gt;
&lt;p&gt;Flow는 다음과 같이 구성합니다. &lt;strong&gt;keyword&lt;/strong&gt;를 입력 받아서 custom component의 &lt;strong&gt;properties&lt;/strong&gt;로 사용합니다.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;states&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;askKeyword&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;System.Text&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;prompt&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;검색하실&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;키워드를&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;입력해&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;주세요&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;variable&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;keyword&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;transitions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{}&lt;/span&gt;
    
  &lt;span class=&quot;na&quot;&gt;searchCECS&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;searchcecs&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; 
      &lt;span class=&quot;na&quot;&gt;keyword&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;${keyword}&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;transitions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;done&quot;&lt;/span&gt;   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;test&quot;&gt;Test&lt;/h2&gt;
&lt;p&gt;Web Chat 채널을 통해 테스트 하게 되면 다음처럼 보이게 됩니다. 검색된 결과의 &lt;strong&gt;링크 열기&lt;/strong&gt;를 클릭하면 해당 문서 보기로 이동하게 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_cecs/chatbot_cecs_result.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;챗봇의 내장 Test UI에서는 다음처럼 보여집니다. 
&lt;img src=&quot;/assets/images/chatbot_cecs/testui_result.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;모두 완료되었습니다.&lt;/p&gt;

&lt;h2 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/en/cloud/paas/content-cloud/rest-api-documents/rest-endpoints.html&quot;&gt;CECS REST API 참고하기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Oracle 챗봇 컴포넌트 작성을 위한 자세한 SDK 가이드는 다음을 참고하세요&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/oracle/bots-node-sdk/&quot;&gt;Oracle Bots Node.js SDK&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="chatbot" /><category term="오라클 챗봇" /><category term="CECS" /><summary type="html">이 포스트에서는 오라클 챗봇인 Digital Assistant와 Content and Experience Cloud (이후 CECS)라는 Content 관리 솔루션과 연계하는 방법에 대해서 다룰 것입니다.</summary></entry><entry><title type="html">챗봇 Embedded Container에 Custom Component 올리기</title><link href="http://localhost:4000/chatbot/2019/%EC%B1%97%EB%B4%87-Embedded-Container/" rel="alternate" type="text/html" title="챗봇 Embedded Container에 Custom Component 올리기" /><published>2019-02-15T00:00:00+09:00</published><updated>2019-02-15T00:00:00+09:00</updated><id>http://localhost:4000/chatbot/2019/%EC%B1%97%EB%B4%87%20Embedded%20Container</id><content type="html" xml:base="http://localhost:4000/chatbot/2019/%EC%B1%97%EB%B4%87-Embedded-Container/">&lt;p&gt;챗봇을 구현하다 보면 Dialogue Flow 만을 이용해서는 다양한 비즈니스 로직을 구현하기에 한계가 있을 수 있습니다. 이를 위해 Oracle Digital Assistant에서는 Custom Component를 개발하여 연동할 수 있게 되어있는데, 이 개발된 Custom Component는 다음 3가지 형태로 서비스될 수 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Embedded Container&lt;/li&gt;
  &lt;li&gt;Oracle Mobile Cloud&lt;/li&gt;
  &lt;li&gt;External&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Oracle Mobile Cloud와 External 옵션은 구축된 Custom Component가 Oracle Digital Assistant 외부에서 서비스되는 것을 연동하는 방식이고 Embedded Container는 Digital Assistant 내에 Container를 구동하게 하여 Custom Component 구현체가 서비스 될 수 있도록 해주는 옵션입니다.&lt;/p&gt;

&lt;p&gt;Custom Component의 작성 방법과 SDK 사용법은 이전 글들에서 소개가 되었으므로, 이 글에서는 이미 만들어진 Custom Component를 Embedded Container에 올리기 위해 Packaging 하는 방법만 다룰 것 입니다.&lt;/p&gt;

&lt;h2 id=&quot;packaging&quot;&gt;Packaging&lt;/h2&gt;
&lt;p&gt;Custom Component 디렉토리로 이동하여 &lt;strong&gt;npm pack&lt;/strong&gt; 명령어를 수행합니다. my-custom-component-1.0.0.tgz 파일이 생성될 것입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_embedded/npm_pack.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;digital-assistant에서-service-등록하기&quot;&gt;Digital Assistant에서 Service 등록하기&lt;/h2&gt;
&lt;p&gt;Digital Assistant 콘솔로 이동하여 Service를 등록합니다.&lt;br /&gt;
서비스 생성 옵션에서 &lt;strong&gt;Embedded Container&lt;/strong&gt; 옵션을 선택하고 이전 단계에서 생성한 .tgz 파일을 업로드 합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_embedded/create_service.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;업로드가 되고 나면 다음 처럼 보이게 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_embedded/upload_package.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;서비스 생성을 클릭하고 나면 새로운 서비스가 등록되어있을 것입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_embedded/service_created.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이 서비스를 사용하는 방법은 이전 글에서 설명한 방법과 동일 합니다.&lt;/p&gt;

&lt;h1 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h1&gt;

&lt;p&gt;Oracle 챗봇 컴포넌트 작성을 위한 자세한 SDK 가이드는 다음을 참고하세요&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/oracle/bots-node-sdk/&quot;&gt;Oracle Bots Node.js SDK&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="chatbot" /><category term="오라클 챗봇" /><category term="Custom Component" /><category term="Container" /><summary type="html">챗봇을 구현하다 보면 Dialogue Flow 만을 이용해서는 다양한 비즈니스 로직을 구현하기에 한계가 있을 수 있습니다. 이를 위해 Oracle Digital Assistant에서는 Custom Component를 개발하여 연동할 수 있게 되어있는데, 이 개발된 Custom Component는 다음 3가지 형태로 서비스될 수 있습니다.</summary></entry><entry><title type="html">다양한 챗봇 Layout 사용하기 (Built-in / Custom Component)</title><link href="http://localhost:4000/chatbot/2019/%EC%B1%97%EB%B4%87-Layout/" rel="alternate" type="text/html" title="다양한 챗봇 Layout 사용하기 (Built-in / Custom Component)" /><published>2019-02-13T02:50:00+09:00</published><updated>2019-02-13T02:50:00+09:00</updated><id>http://localhost:4000/chatbot/2019/%EC%B1%97%EB%B4%87%20Layout</id><content type="html" xml:base="http://localhost:4000/chatbot/2019/%EC%B1%97%EB%B4%87-Layout/">&lt;p&gt;챗봇을 구현할 때 Dialogue Flow에서 Text 형태 이외의 다양한 포맷을 이용한 Response를 생성해내야 하는 경우가 많습니다.
이를 위해서 오라클 챗봇은 &lt;strong&gt;System.Output&lt;/strong&gt; 이라는 text 기반 응답 외에 다양한 형태의 Response를 만들어 낼 수 있는 &lt;strong&gt;System.CommonResponse&lt;/strong&gt;라는 빌트인 컴포넌트를 제공하고 있습니다.&lt;/p&gt;

&lt;p&gt;이 컴포넌트를 사용하여 아래 예에서 보는 것 처럼 다양한 응답을 만들어 낼 수 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;text-메시지-systemoutput---text&quot;&gt;Text 메시지 (System.Output - Text)&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_layout/text1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;flow-yaml-code-systemoutput---text&quot;&gt;FLOW YAML CODE (System.Output - Text)&lt;/h3&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;na&quot;&gt;showText&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;System.Output&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Output&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;컴포넌트를&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;사용한&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;이용예제&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;transitions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;done&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;text-메시지-commmonresponse---text&quot;&gt;Text 메시지 (CommmonResponse - Text)&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_layout/text2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;flow-yaml-code-commmonresponse---text&quot;&gt;FLOW YAML CODE (CommmonResponse - Text)&lt;/h3&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;na&quot;&gt;textResponse&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;System.CommonResponse&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; 
        &lt;span class=&quot;na&quot;&gt;responseItems&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;         
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;text&quot;&lt;/span&gt;  
          &lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;CommonResponse&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;컴포넌트를&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;사용한&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;이용&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;예제&quot;&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;transitions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;done&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;list&quot;&gt;List&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_layout/list.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;flow-yaml-code-systemlist&quot;&gt;FLOW YAML CODE (System.List)&lt;/h3&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;na&quot;&gt;showList&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;System.List&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;텍스트,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;이미지,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;리스트,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Card,위치&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;prompt&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;보고&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;싶은&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;레이아웃을&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;선택하세요&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;variable&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;greeting&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;transitions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;텍스트&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;showText&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;image&quot;&gt;Image&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_layout/image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;flow-yaml-code&quot;&gt;FLOW YAML CODE&lt;/h3&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;na&quot;&gt;showImage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;System.CommonResponse&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;responseItems&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;attachment&quot;&lt;/span&gt; 
          &lt;span class=&quot;na&quot;&gt;attachmentType&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;image&quot;&lt;/span&gt; 
          &lt;span class=&quot;na&quot;&gt;attachmentUrl&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;https://cdn.pixabay.com/photo/2017/09/03/10/35/pizza-2709845__340.jpg&quot;&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;transitions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;done&quot;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;card-horizontal&quot;&gt;Card (horizontal)&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_layout/card1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;flow-yaml-code-1&quot;&gt;FLOW YAML CODE&lt;/h3&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;na&quot;&gt;showCard&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;System.CommonResponse&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;responseItems&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;cards&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;cardLayout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;horizontal&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;PizzaCards&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;cards&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;${pizzas.name}&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;${pizzas.description}&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;imageUrl&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;${pizzas.image}&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;PizzaCard&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;iteratorVariable&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;pizzas&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;rangeStart&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;지금&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;주문&quot;&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;postback&quot;&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;order&quot;&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Order&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;processUserMessage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;transitions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;done&quot;&lt;/span&gt;   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;quick-reply-포맷&quot;&gt;Quick Reply 포맷&lt;/h2&gt;
&lt;p&gt;Facebook Messager의 Quick Reply 같은 형태의 메시지&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_layout/quick_reply.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;flow-yaml-code-2&quot;&gt;FLOW YAML CODE&lt;/h3&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;na&quot;&gt;showQuick&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;System.CommonResponse&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;processUserMessage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;responseItems&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;text&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;globalActions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;label &lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;지금&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;바로&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;주문해&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;보세요&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;postback&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;keyword&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;quick1&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;pizzas &lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;quick1&quot;&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;label &lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;지금&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;바로&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;클릭해&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;보세요&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;postback&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;keyword&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;quick2&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;pizzas &lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;quick1&quot;&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;label &lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Quick&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Reply&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;예제&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;입니다.&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;postback&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;keyword&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;quick3&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;pizzas &lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;quick1&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;transitions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;done&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;custom-component-에서의-다양한-레이아웃-사용하기&quot;&gt;Custom Component 에서의 다양한 레이아웃 사용하기&lt;/h1&gt;
&lt;p&gt;Flow Yaml에서  &lt;strong&gt;System.CommonResponse&lt;/strong&gt; 컴포넌트를 사용하여 응답을 생성할 수 있지만, DB 연동이나 커스텀 비즈니스 로직을 통해 생성되는 응답은 Flow Yaml을 통해서만 생성해 내기에는 무리가 있습니다. 
따라서 이 경우에는 Custom Compomnent를 작성해야 하는데 여기에서도 다양한 응답 레이아웃으로 메시지를 생성해내야 할 필요가 있습니다. 
아래 예에서는 Text와 Card 레이아웃을 Custom Component에서 &lt;strong&gt;Conversation Message Model&lt;/strong&gt;를 이용하여 생성하는 방법에 대해 설명합니다.&lt;/p&gt;

&lt;p&gt;화면에서 보여지는 형태는 System.CommonResponse를 통해 만들어 진것과 동일 합니다.&lt;/p&gt;

&lt;h2 id=&quot;code-snippet&quot;&gt;Code Snippet&lt;/h2&gt;

&lt;h2 id=&quot;text-response&quot;&gt;Text Response&lt;/h2&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Common Message Model - Text 이용 예&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;messageModel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;conversation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MessageModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;textActions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;textResp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;messageModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;textConversationMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;텍스트 메시지 입니다.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;textActions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;conversation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;textResp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;card-response&quot;&gt;Card Response&lt;/h2&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Common Message Model - Card 이용 예 &lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pbActions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;postback&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;action&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;order&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pbAction1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;messageModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;postbackActionObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;지금 주문&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;postback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;pbActions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pbAction1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;card1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;messageModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cardObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;치즈피자&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                                    &lt;span class=&quot;s2&quot;&gt;&quot;모짜렐라 치즈와 이탈리안 소스를 토핑한 클래식 피자&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                                    &lt;span class=&quot;s2&quot;&gt;&quot;https://cdn.pixabay.com/photo/2017/09/03/10/35/pizza-2709845__340.jpg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pbActions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;card2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;messageModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cardObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;페파로니피자&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                                    &lt;span class=&quot;s2&quot;&gt;&quot;모짜렐라 치즈와 이탈리안 소스를 토핑한 클래식 피자고전 스타일의 페파로니와 클래식 마리나라 소스를 토핑한 피자&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                                    &lt;span class=&quot;s2&quot;&gt;&quot;https://cdn.pixabay.com/photo/2017/08/02/12/38/pepperoni-2571392__340.jpg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pbActions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;                                            
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cards&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;cards&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;card1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;cards&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;card2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cardResp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;messageModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cardConversationMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;horizontal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cards&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;conversation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cardResp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;전체-코드-참고&quot;&gt;전체 코드 참고&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/mee-nam-lee/chatbot/blob/master/bot-start/components/layout.js&quot;&gt;Conversation Message Model 예제&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h1&gt;

&lt;p&gt;Oracle 챗봇 컴포넌트 작성을 위한 자세한 SDK 가이드는 다음을 참고하세요&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/oracle/bots-node-sdk/&quot;&gt;Oracle Bots Node.js SDK&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="chatbot" /><category term="오라클 챗봇" /><category term="Custom Component" /><category term="Layout" /><summary type="html">챗봇을 구현할 때 Dialogue Flow에서 Text 형태 이외의 다양한 포맷을 이용한 Response를 생성해내야 하는 경우가 많습니다. 이를 위해서 오라클 챗봇은 System.Output 이라는 text 기반 응답 외에 다양한 형태의 Response를 만들어 낼 수 있는 System.CommonResponse라는 빌트인 컴포넌트를 제공하고 있습니다.</summary></entry><entry><title type="html">챗봇 Hands-on Lab (3) - 피자봇 만들기</title><link href="http://localhost:4000/chatbot/2019/%EC%B1%97%EB%B4%87-Hands-on-Lab_3/" rel="alternate" type="text/html" title="챗봇 Hands-on Lab (3) - 피자봇 만들기" /><published>2019-01-24T02:50:00+09:00</published><updated>2019-01-24T02:50:00+09:00</updated><id>http://localhost:4000/chatbot/2019/%EC%B1%97%EB%B4%87%20Hands-on%20Lab_3</id><content type="html" xml:base="http://localhost:4000/chatbot/2019/%EC%B1%97%EB%B4%87-Hands-on-Lab_3/">&lt;p&gt;이 Lab에서는 피자봇을 직접 만들어 볼 것입니다.&lt;/p&gt;

&lt;h2 id=&quot;학습-내용&quot;&gt;학습 내용&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Flow 구현&lt;/li&gt;
  &lt;li&gt;Intent / Dialog 테스트&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;구현에 들어가기 앞서서 피자봇이 어떤 기능을 가지고 있는지 먼저 살펴봅니다. 
제공되는 피자봇은 다음과 같이 4개의 &lt;strong&gt;Intent&lt;/strong&gt;를 가지고 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/pizzalab/01_pizza_intent.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Flow가 구현되어 있는 제공된 &lt;strong&gt;피자봇(PizzaBot)&lt;/strong&gt; 으로 먼저 4개의 Intent가 어떻게 동작하는지 확인한 후에 각 기능을 구현해 보도록 하겠습니다.&lt;/p&gt;

&lt;p&gt;## Test UI로 피자봇 테스트 하기&lt;/p&gt;
&lt;blockquote&gt;

  &lt;p&gt;공통으로 사용할 것이기 때문에 Flow나 Intent를 수정하지 않도록 조심하세요.&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;PizzaBot&lt;/strong&gt; 타이틀을 클릭하여 PizzaBot으로 들어갑니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/pizzalab/02_pizzabot.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;왼편 메뉴 하단의 &lt;strong&gt;▶&lt;/strong&gt; 버튼을 클릭하여 Test UI를 엽니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/pizzalab/03_pizza_test_ui.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;피자-주문하기&quot;&gt;피자 주문하기&lt;/h3&gt;

&lt;p&gt;다음 예시의 문장을 입력하여 테스트 합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;피자 주문해줘&lt;/li&gt;
  &lt;li&gt;피자 주문하고 싶어요&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/pizzalab/04_orderpizza_test1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;피자 더 보기&lt;/strong&gt;를 클릭하거나 이미지 왼쪽 / 오른쪽의 &amp;lt; / &amp;gt; 를 클릭하여 더 많은 피자를 볼 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/pizzalab/04_orderpizza_test2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;지금 주문&lt;/strong&gt;을 클릭합니다. 사이즈를 묻는 질문에 원하는 크기를 선택합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/pizzalab/04_orderpizza_test3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Send Location&lt;/strong&gt; 버튼을 클릭하면 사용자의 위치가 전송되고 주문이 완료됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/pizzalab/04_orderpizza_test4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;파스타-주문하기--주문-취소하기--메뉴-보기&quot;&gt;파스타 주문하기 / 주문 취소하기 / 메뉴 보기&lt;/h3&gt;

&lt;p&gt;Test UI 창 상단의 &lt;strong&gt;Reset&lt;/strong&gt; 버튼을 클릭하고 다른 기능도 테스트 해봅니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/pizzalab/05_showmenu.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;파스타 주문&lt;/strong&gt;과 &lt;strong&gt;주문 취소&lt;/strong&gt; Intent가 잘 인지되고 있는 것을 볼 수 있습니다. 이 Lab에서는 해당 기능은 구현하지 않을 것이기 때문에 다음과 같이 구현되지 않았다고 대답합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/pizzalab/06_pasta.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;피자봇-구현해-보기&quot;&gt;피자봇 구현해 보기&lt;/h2&gt;
&lt;p&gt;이제 본격적으로 피자봇의 기능을 구현해 보겠습니다.&lt;/p&gt;

&lt;p&gt;피자봇의 4개의 Intent와 Entity 그리고 약간의 기본 Flow를 담고 있는 초기 버전의 &lt;strong&gt;PizzaBot_Initial&lt;/strong&gt;이 등록되어 있습니다. 이 Bot을 복제하여 구현을 시작하도록 하겠습니다.
&lt;strong&gt;PizzaBot_Initial&lt;/strong&gt;의 &lt;strong&gt;Clone&lt;/strong&gt; 메뉴를 클릭하여 복제본을 만듭니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/pizzalab/10_PizzaBot_clone.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Display Name : 항목을 본인에게 부여된 SEQ를 suffix로 하여 &lt;strong&gt;PizzaBot_{SEQ}&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Name : &lt;strong&gt;PizzaBot_{SEQ}&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Version : 1.0&lt;/li&gt;
  &lt;li&gt;Description : 학생이름 = [본인이름]&lt;/li&gt;
  &lt;li&gt;Open cloned skill bot afterwards : check&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/pizzalab/11_pizzabot_clone_window.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;복제가 잘 되었는지 확인합니다. Intent 아이콘과 Flow 아이콘을 클릭해 봅니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/pizzalab/12_PizzaBot_intent.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/pizzalab/12_PizzaBot_Flow.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 Flow를 추가해 보도록 하겠습니다.&lt;/p&gt;

&lt;h2 id=&quot;파스타-주문하기&quot;&gt;파스타 주문하기&lt;/h2&gt;
&lt;p&gt;파스타 주문하기는 세부 Flow가 없이 바로 단답형으로 대답하는 가장 간단한 형태이므로 제일 먼저 추가해 보겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OrderPasta&lt;/strong&gt;에 매칭되는 &lt;strong&gt;Utterance&lt;/strong&gt;가 들어오면 &lt;strong&gt;OrderPasta&lt;/strong&gt; 단계를 호출할 수 있도록 &lt;strong&gt;Intent&lt;/strong&gt; 단계의 Action에 &lt;strong&gt;OrderPasta&lt;/strong&gt;를 부르도록 다음과 같이 추가 합니다.&lt;/p&gt;

&lt;h3 id=&quot;수정-전&quot;&gt;수정 전&lt;/h3&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;na&quot;&gt;Intent&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;System.Intent&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;variable&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;iresult&quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#      confidenceThreshold : 0.8&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;transitions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;unresolvedIntent&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Unresolved&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;CancelPizza &lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;CancelPizza&quot;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# OrderPasta 추가&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# OrderPizza 추가&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;OrderPasta &lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;OrderPasta&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;수정-후&quot;&gt;수정 후&lt;/h3&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;na&quot;&gt;Intent&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;System.Intent&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;variable&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;iresult&quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#      confidenceThreshold : 0.8&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;transitions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;unresolvedIntent&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Unresolved&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;CancelPizza &lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;CancelPizza&quot;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# OrderPasta 추가 &lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;OrderPasta &lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;OrderPasta&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 여기 한줄만 추가된 것임&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# OrderPizza 추가&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;호출되는 &lt;strong&gt;OrderPasta&lt;/strong&gt; 단계를 &lt;strong&gt;”####### OrderPasta 단계를 아래에 복사헤 주세요”&lt;/strong&gt; 주석 아래에 복사해 주세요.&lt;/p&gt;

&lt;h3 id=&quot;수정-전-1&quot;&gt;수정 전&lt;/h3&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;####### OrderPasta 단계를 아래에 복사헤 주세요&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;수정-후-1&quot;&gt;수정 후&lt;/h3&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;####### OrderPasta 단계를 아래에 복사헤 주세요&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;OrderPasta&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;System.CommonResponse&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;responseItems&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;text&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;죄송합니다.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;오늘은&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;파스타가&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;없네요.&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;pasta&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;processUserMessage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;transitions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;done&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Flow가 완성되었으면 우측 상단의 &lt;strong&gt;Validate&lt;/strong&gt;를 클릭하여 flow에 오류가 없는지 확인합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/pizzalab/07_OrderPasta_Flow.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;오류가 없다면 Test UI를 열어서 해당 flow가 잘 동작하는지 확인합니다.
왼쪽 하단의 &lt;strong&gt;▶&lt;/strong&gt; 버튼을 클릭하여 Test UI를 엽니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/pizzalab/08_OrderPasta_Test_1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/pizzalab/08_OrderPasta_Test.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;피자-주문하기-구현&quot;&gt;피자 주문하기 구현&lt;/h2&gt;
&lt;p&gt;이제 여러 단계의 flow를 가지는 피자주문 (OrderPizza) 로직을 추가하도록 하겠습니다.&lt;/p&gt;

&lt;p&gt;피자 주문하기는 다음과 같은 Flow를 가집니다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;순서&lt;/th&gt;
      &lt;th&gt;State 명&lt;/th&gt;
      &lt;th&gt;실행 내용&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;OrderPizza&lt;/td&gt;
      &lt;td&gt;Pizza 리스트 보여주기&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;AskPizzaSize&lt;/td&gt;
      &lt;td&gt;주문할 피자 크기 물어보기 (Small / Medium / Large)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;AskLocation&lt;/td&gt;
      &lt;td&gt;배달할 위치 물어보기 (Send Location)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;Confirmation&lt;/td&gt;
      &lt;td&gt;주문 확인&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;OrderPizza&lt;/strong&gt;에 매칭되는 &lt;strong&gt;Utterance&lt;/strong&gt;가 들어오면 &lt;strong&gt;OrderPizza&lt;/strong&gt; 단계를 호출할 수 있도록 &lt;strong&gt;Intent&lt;/strong&gt; 단계의 Action에 &lt;strong&gt;OrderPizza&lt;/strong&gt;를 부르도록 다음과 같이 추가 합니다.&lt;/p&gt;

&lt;h3 id=&quot;수정-전-2&quot;&gt;수정 전&lt;/h3&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;na&quot;&gt;Intent&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;System.Intent&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;variable&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;iresult&quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#      confidenceThreshold : 0.8&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;transitions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;unresolvedIntent&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Unresolved&quot;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# OrderPasta 추가&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;OrderPasta &lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;OrderPasta&quot;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# OrderPizza 추가     &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;수정-후-2&quot;&gt;수정 후&lt;/h3&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;na&quot;&gt;Intent&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;System.Intent&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;variable&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;iresult&quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#      confidenceThreshold : 0.8&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;transitions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;unresolvedIntent&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Unresolved&quot;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# OrderPasta 추가&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;OrderPasta &lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;OrderPasta&quot;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# OrderPizza 추가&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;OrderPizza &lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;OrderPizza&quot;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 여기 한줄만 변경됨     &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;불리어지는 &lt;strong&gt;OrderPizza&lt;/strong&gt; 단계를 &lt;strong&gt;”####### OrderPizza 단계를 아래에 복사헤 주세요”&lt;/strong&gt; 주석 아래에 있는 코드 부분을 &lt;strong&gt;전체 변경&lt;/strong&gt;해 줍니다 (수정전 –&amp;gt; 수정후) 
&lt;strong&gt;OrderPizza&lt;/strong&gt; 단계는 여러개의 피자를 Card layout으로 이미지와 함께 보여주는 로직 입니다.&lt;/p&gt;

&lt;h2 id=&quot;수정-전-3&quot;&gt;수정 전&lt;/h2&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;####### OrderPizza 단계를 아래에 복사헤 주세요&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;OrderPizza&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;System.CommonResponse&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;responseItems&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;text&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;오늘의&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;피자&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;입니다.&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;transitions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;transitions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;done&quot;&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;수정-후-3&quot;&gt;수정 후&lt;/h2&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;####### OrderPizza 단계를 아래에 복사헤 주세요&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;OrderPizza&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;System.CommonResponse&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;responseItems&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;text&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;오늘의&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;피자&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;입니다.&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;separateBubbles&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;visible&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;expression&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;lt;#if&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;cardsRangeStart?number&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0&amp;gt;true&amp;lt;#else&amp;gt;false&amp;lt;/#if&amp;gt;&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Our&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;pizzas&quot;&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;text&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;더&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;많은&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;피자들이&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;있습니다.&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;separateBubbles&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;visible&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;expression&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;lt;#if&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;cardsRangeStart?number&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0&amp;gt;true&amp;lt;#else&amp;gt;false&amp;lt;/#if&amp;gt;&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;More&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;pizzas&quot;&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;cards&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;cardLayout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;horizontal&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;PizzaCards&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;피자&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;더&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;보기&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;postback&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;visible&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;expression&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;lt;#if&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;cardsRangeStart?number+4&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;pizzas.value?size&amp;gt;true&amp;lt;#else&amp;gt;false&amp;lt;/#if&amp;gt;&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;more&quot;&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;cardsRangeStart&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;${cardsRangeStart?number+4}&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;More&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;cards&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;${pizzas.name}&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;${pizzas.description}&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;imageUrl&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;${pizzas.image}&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;PizzaCard&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;iteratorVariable&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;pizzas&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;rangeStart&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;${cardsRangeStart}&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;rangeSize&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;4&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;지금&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;주문&quot;&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;postback&quot;&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;order&quot;&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
                  &lt;span class=&quot;na&quot;&gt;orderedPizza&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;${pizzas.name}&quot;&lt;/span&gt;
                  &lt;span class=&quot;na&quot;&gt;orderedPizzaImage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;${pizzas.image}&quot;&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Order&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;channelCustomProperties&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;facebook&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;top_element_style&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;large&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;processUserMessage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;transitions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;AskPizzaSize&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;more&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;OrderPizza&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;textReceived&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Intent&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;OrderPizza&lt;/strong&gt; 단계에서 &lt;strong&gt;지금 주문&lt;/strong&gt;을 클릭하게 되면 피자 크기를 묻는 &lt;strong&gt;AskPizzaSize&lt;/strong&gt; 단계로 이동하게 됩니다.&lt;/p&gt;

&lt;p&gt;불리어지는 &lt;strong&gt;AskPizzaSize&lt;/strong&gt; 단계를 &lt;strong&gt;”####### AskPizzaSize 단계를 아래에 복사헤 주세요”&lt;/strong&gt; 주석 아래의 코드를 변경해 주세요 (수정전 –&amp;gt; 수정후)&lt;/p&gt;

&lt;h3 id=&quot;수정-전-4&quot;&gt;수정 전&lt;/h3&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;####### AskPizzaSize 단계를 아래에 복사헤 주세요&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;AskPizzaSize&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;System.CommonResponse&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;responseItems&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;text&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;AskPizzaSize&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;넣어야&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;할&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;곳이예요&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;transitions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;done&quot;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;수정-후-4&quot;&gt;수정 후&lt;/h3&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;####### AskPizzaSize 단계를 아래에 복사헤 주세요&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;AskPizzaSize&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;System.CommonResponse&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;variable&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;pizzaSize&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;nlpResultVariable&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;iresult&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;maxPrompts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;2&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;responseItems&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;text&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;lt;#if&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;system.invalidUserInput&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'true'&amp;gt;크기&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;선택이&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;잘못되었습니다.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;다시&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;선택해&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;주세요.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;            &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;lt;/#if&amp;gt;어떤&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;크기의&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;피자를&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;원하십니까?&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;What&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;size&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;separateBubbles&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;${enumValue}&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;postback&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;pizzaSize&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;${enumValue}&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;size&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;iteratorVariable&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;pizzaSize.type.enumValues&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;processUserMessage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;transitions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;cancel&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Intent&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;AskLocation&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;AskPizzaSize&lt;/strong&gt; 단계 후에는 배달 위치를 묻게 되고 사용자가 자신의 Location 정보를 보내는 단계인 &lt;strong&gt;AskLocation&lt;/strong&gt;를 수행하게 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;”####### AskLocation 단계를 아래에 복사헤 주세요”&lt;/strong&gt; 주석 아래에 다음을 추가해 주세요.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;####### AskLocation 단계를 아래에 복사헤 주세요&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;AskLocation&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;System.CommonResponse&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;variable&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;location&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;responseItems&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;어디로&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;배달해&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;드릴까요?&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;text&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;What&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;location&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;separateBubbles&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;globalActions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Send&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Location&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;location&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;SendLocation&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;processUserMessage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;transitions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;cancel&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Intent&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Confirmation&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;마지막 단계로 &lt;strong&gt;주문 확인&lt;/strong&gt;을 수행하는 &lt;strong&gt;Confirmation&lt;/strong&gt; 단계를 추가해 줍니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;”####### Confirmation 단계를 아래에 복사헤 주세요”&lt;/strong&gt; 주석 아래에 다음을 추가해 주세요.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;####### Confirmation 단계를 아래에 복사헤 주세요&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;Confirmation&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;System.CommonResponse&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;responseItems&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;주문해&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;주셔서&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;감사합니다.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;주문하신&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;${pizzaSize}&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;${orderedPizza}&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;피자가&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;30분&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;내로&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;배달될&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;예정입니다.&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;text&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;conf&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;separateBubbles&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;attachment&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;attachmentType&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;image&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;image&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;attachmentUrl&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;${orderedPizzaImage}&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;processUserMessage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;transitions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;done&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;피자 주문을 위한 flow가 모두 완료되었습니다. 우측 상단의 &lt;strong&gt;Validate&lt;/strong&gt;를 클릭하여 flow에 오류가 없는지 확인합니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;bot flow는 Yaml로 되어 있습니다. Yaml은 Indentation이 매우 중요합니다. 오류가 계속 발생한다면 들여쓰기가 잘 맞게 되어있는지 확인해보세요.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mee-nam-lee/chatbot_lecture/blob/master/labfiles/PizzaBot/OrderPizzaFlow.md&quot;&gt;완성된 OrderPizza flow 참고&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;오류가 없다면 Test UI를 열어서 추가된 로직이 잘 동작하는지 확인 합니다.
왼쪽 하단의 &lt;strong&gt;▶&lt;/strong&gt; 버튼을 클릭하여 Test UI를 엽니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Test UI는 위에서 테스트 했던 것처럼 Flow화면 우측이 아닌 새로운 페이지로 나타날 것입니다.
아래 이미지의 테스트 순서에 따라 테스트 하면 됩니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/pizzalab/09_OrderPizza_Test1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/pizzalab/09_OrderPizza_Test2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/pizzalab/09_OrderPizza_Test3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;피자봇 만들기 실습 과정이 완료되었습니다.&lt;/p&gt;

&lt;h1 id=&quot;chatbot-workshop-lab&quot;&gt;Chatbot-Workshop Lab&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Lab 개요 : &lt;a href=&quot;/chatbot/2019/챗봇-Hands-on-Lab_1/&quot;&gt;챗봇 Hands-on Lab (1) - Lab 개요&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Lab 100 : &lt;a href=&quot;/chatbot/2019/챗봇-Hands-on-Lab_2/&quot;&gt;챗봇 Hands-on Lab (2) - 금융봇을 이용하여 챗봇 기본 기능 익히기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Lab 200 : &lt;a href=&quot;/chatbot/2019/챗봇-Hands-on-Lab_3/&quot;&gt;챗봇 Hands-on Lab (3) - 피자봇 만들기 &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Lab 300 : &lt;a href=&quot;/chatbot/2019/챗봇-Hands-on-Lab_4/&quot;&gt;챗봇 Hands-on Lab (4) - [채널 연결] Web Chat 연결하기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="chatbot" /><category term="오라클 챗봇" /><category term="Hands-on-Lab" /><summary type="html">이 Lab에서는 피자봇을 직접 만들어 볼 것입니다.</summary></entry><entry><title type="html">챗봇 Hands-on Lab (4) - [채널 연결] Web Chat 연결하기</title><link href="http://localhost:4000/chatbot/2019/%EC%B1%97%EB%B4%87-Hands-on-Lab_4/" rel="alternate" type="text/html" title="챗봇 Hands-on Lab (4) - [채널 연결] Web Chat 연결하기" /><published>2019-01-24T02:50:00+09:00</published><updated>2019-01-24T02:50:00+09:00</updated><id>http://localhost:4000/chatbot/2019/%EC%B1%97%EB%B4%87%20Hands-on%20Lab_4</id><content type="html" xml:base="http://localhost:4000/chatbot/2019/%EC%B1%97%EB%B4%87-Hands-on-Lab_4/">&lt;p&gt;이 Lab에서는 지금까지 만든 피자봇을 웹 채팅 창을 통해서 연결해 보는 실습을 할 것입니다.&lt;/p&gt;

&lt;h2 id=&quot;웹-채널-생성&quot;&gt;웹 채널 생성&lt;/h2&gt;
&lt;p&gt;좌측 메인 메뉴의 &lt;strong&gt;Channels&lt;/strong&gt; 메뉴를 선택합니다.
&lt;img src=&quot;/assets/images/chatbot_lecture/channel/01_channel_settings.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;+ Channel&lt;/strong&gt; 버튼을 클릭하여 새로운 채널을 생성하도록 합니다.&lt;/p&gt;

&lt;p&gt;다음과 같이 입력하고 &lt;strong&gt;Create&lt;/strong&gt; 버튼을 클릭합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Name : PizzaBot_{SEQ}.web
    &lt;blockquote&gt;
      &lt;p&gt;본인이 생성한 PizzaBot과 동일 명으로 합니다&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Descrption : 학생이름 = [본인이름]&lt;/li&gt;
  &lt;li&gt;Channel Type : Web&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/channel/02_create_channel.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;다음과 같이 채널이 만들어 진 것을 확인 합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/channel/03_Channel_created.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;만든 채널을 각자의 PizzaBot과 연결하기 위해 &lt;strong&gt;Route To&lt;/strong&gt;를 클릭하여 본인의 Bot과 연결되게 합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/channel/03_Channel_route.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;아래와 같이 연결되었는지를 확인하고 &lt;strong&gt;Channel Enabled&lt;/strong&gt;를 활성화 시킵니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/channel/03_Channel_route_done.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;채널 생성은 완료되었습니다.&lt;/p&gt;

&lt;h2 id=&quot;웹-페이지에서-테스트-하기&quot;&gt;웹 페이지에서 테스트 하기&lt;/h2&gt;
&lt;p&gt;Oracle Digital Assistant는 웹채널을 태스트 하기 위한 chat-sample-web 코드를 제공하고 있습니다.&lt;/p&gt;

&lt;p&gt;이 코드가 구동되고 있는 환경 정보가 제공되었을 것입니다. 브라우저를 통해 제공된 URL에 접속합니다. 아래 화면의 왼쪽 브라우저와 같은 페이지가 보여질 것입니다.
Text Box에 자신의 PizzaBot에서 만든 &lt;strong&gt;Web&lt;/strong&gt; 채널의 &lt;strong&gt;App Id&lt;/strong&gt;를 복사해서 입력해 줍니다. &lt;strong&gt;Continue&lt;/strong&gt;를 누르면 해당 웹페이지의 채팅은 자신의 PizzaBot에 연결 될 것입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/channel/04_web_app_id.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;App Id 입력하는 Text Box가 첫 화면에서 보이지 않는다면 다음과 같이 설정 아이콘을 클릭하여 App ID를 입력해 줍니다.&lt;/p&gt;

  &lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/channel/04_web_app_id_setting.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

  &lt;p&gt;App Id를 자신의 채널 것으로 업데이트하고 Save 합니다.&lt;/p&gt;

  &lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/channel/04_web_app_id_setting_save.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Chat with your BOT&lt;/strong&gt; 버튼을 클릭하여 대화를 시작해 봅니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/channel/05_chat_with_your_bot.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;다음과 같이 채팅창이 열리게 됩니다. &lt;strong&gt;Type a message&lt;/strong&gt; 텍스트 박스에 대화를 입력합니다.
피자봇에서 구현했던 4개의 Intent들을 차례로 테스트 해보면 됩니다.
&lt;img src=&quot;/assets/images/chatbot_lecture/channel/06_chat.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;사용환경-정리&quot;&gt;사용환경 정리&lt;/h2&gt;
&lt;p&gt;생성한 PizzaBot_{SEQ}를 이전 lab에서 처럼 삭제합니다.&lt;/p&gt;

&lt;p&gt;과정을 완료하였습니다.&lt;/p&gt;

&lt;h1 id=&quot;chatbot-workshop-lab&quot;&gt;Chatbot-Workshop Lab&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Lab 개요 : &lt;a href=&quot;/chatbot/2019/챗봇-Hands-on-Lab_1/&quot;&gt;챗봇 Hands-on Lab (1) - Lab 개요&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Lab 100 : &lt;a href=&quot;/chatbot/2019/챗봇-Hands-on-Lab_2/&quot;&gt;챗봇 Hands-on Lab (2) - 금융봇을 이용하여 챗봇 기본 기능 익히기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Lab 200 : &lt;a href=&quot;/chatbot/2019/챗봇-Hands-on-Lab_3/&quot;&gt;챗봇 Hands-on Lab (3) - 피자봇 만들기 &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Lab 300 : &lt;a href=&quot;/chatbot/2019/챗봇-Hands-on-Lab_4/&quot;&gt;챗봇 Hands-on Lab (4) - [채널 연결] Web Chat 연결하기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="chatbot" /><category term="오라클 챗봇" /><category term="Hands-on-Lab" /><category term="Channel" /><summary type="html">이 Lab에서는 지금까지 만든 피자봇을 웹 채팅 창을 통해서 연결해 보는 실습을 할 것입니다.</summary></entry><entry><title type="html">챗봇 Hands-on Lab (2) - 금융봇을 이용하여 챗봇 기본 기능 익히기</title><link href="http://localhost:4000/chatbot/2019/%EC%B1%97%EB%B4%87-Hands-on-Lab_2/" rel="alternate" type="text/html" title="챗봇 Hands-on Lab (2) - 금융봇을 이용하여 챗봇 기본 기능 익히기" /><published>2019-01-23T02:50:00+09:00</published><updated>2019-01-23T02:50:00+09:00</updated><id>http://localhost:4000/chatbot/2019/%EC%B1%97%EB%B4%87%20Hands-on%20Lab_2</id><content type="html" xml:base="http://localhost:4000/chatbot/2019/%EC%B1%97%EB%B4%87-Hands-on-Lab_2/">&lt;p&gt;이 Lab에서는 MasterBot이라는 이름의 금융 업무를 수행하는 챗봇을 살펴볼 것입니다.&lt;/p&gt;

&lt;h2 id=&quot;학습-내용&quot;&gt;학습 내용&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;챗봇 둘러보기&lt;/li&gt;
  &lt;li&gt;Intent / Dialog 테스트&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;사전-준비-사항&quot;&gt;사전 준비 사항&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;이 실습 과정은 Chrome 브라우저를 이용하여 진행할 것입니다. Chrome이 설치되어있지 않다면 다음에서 다운로드 받아서 설치 후 진행하시기 바랍니다.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.google.com/intl/ko_ALL/chrome/&quot;&gt;크롬 다운로드&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;bot-console로-들어가기&quot;&gt;&lt;strong&gt;Bot console로 들어가기&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;제공되는 Oracle Digital Assistant의 접속 정보를 확인하여 콘솔에 접속합니다.
로그인 후에 다음과 같은 페이지가 나오면 왼편 상탄의 아이콘을 클릭하여 메뉴바를 펼칩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/00_after_login.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;아래와 같이 왼편 메뉴에서 &lt;strong&gt;Skills&lt;/strong&gt; 메뉴를 클릭합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/01_bot_first_page.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;masterbot-복제&quot;&gt;&lt;strong&gt;MasterBot 복제&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;제공되는 테스트용 MasterBot을 찾아 사용자 별로 복제한 후 테스트 할 것입니다.
다음과 같이 MasterBot이 보이는지 확인하세요.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/02_Masterbot.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;본인에게 할당된 SEQ 번호를 참고하여 복제한 MasterBot의 이름을 다음 처럼 바꿔줍니다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;이름이 중복될 경우 복제 시에 오류가 날수 있으니 주의하세요!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/03_masterbot_clone.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;다음과 같이 입력하고 Clone 합니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Display Name :  MasterBot_[제공된 SEQ]&lt;/li&gt;
  &lt;li&gt;Name :  MasterBot_[제공된 SEQ]&lt;/li&gt;
  &lt;li&gt;Version : 1.0&lt;/li&gt;
  &lt;li&gt;Description : 학생이름 = [본인 이름]&lt;/li&gt;
  &lt;li&gt;open cloned skill bot afterwards : check&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/04_masterbot_clone_window.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;복제가 성공되면 다음과 같이 새로운 BOT이 생성된 걸 볼 수 있습니다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;복제된 Skill 바로 열기(open cloned skill bot afterwards) 체크박스를 선택했다면, 아래 화면이 보이지 않고 Skill Edit 모드로 바로 들어갑니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/05_after_clone_master.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;복제된-masterbot에서-intent-사용자-의도-테스트-하기&quot;&gt;&lt;strong&gt;복제된 MasterBot에서 Intent (사용자 의도) 테스트 하기&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;방금 생성한 본인의 MasterBot의 이름을 클릭하거나 아래와 같이 &lt;strong&gt;Edit&lt;/strong&gt; 메뉴를 클릭하여 Bot의 편집 화면으로 이동합니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;복제된 Skill 바로 열기(open cloned skill bot afterwards) 체크박스를 선택했다면, 아래 화면이 보이지 않고 Skill Edit 모드로 바로 들어갑니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/06_Edit_MasterBot.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이 봇은 이미 플로우가 작성되어 있는 봇입니다. 이봇을 테스트 허기 위해서 이미 등록되어 있는 각 Intent의 샘플 Utterance를 Train 시켜야 합니다. 상단의 Train 버튼을 클릭하여 등록된 샘플 Utterance를 학습 시킵니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/07_Train.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Trainer Ht&lt;/strong&gt; 옵션이 선택되었음을 확인하고 &lt;strong&gt;Submit&lt;/strong&gt;을 클릭합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/08_Train_window.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Train이 완료되었으면 화면에 알림이 뜨고 다시 한번 상단의 &lt;strong&gt;Train&lt;/strong&gt; 버튼을 클릭해 보면 &lt;strong&gt;Trainer Ht&lt;/strong&gt;의 체크 아이콘이 &lt;strong&gt;초록색&lt;/strong&gt;으로 변경되어 있음을 볼 수 있습니다. 이는 학습이 완료되었다는 뜻 입니다.
Train 팝업창 상단의 &lt;strong&gt;X&lt;/strong&gt; 버튼을 클릭하여 Train 윈도우를 닫습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/09_after_train.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 Intent 테스트를 위한 Test 창을 열기 위해 상단의 &lt;strong&gt;Try It Out!&lt;/strong&gt; 링크를 클릭합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/10_play_button.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;챗봇을 테스트 해볼 수 있는 테스트 창이 나옵니다.
Intent를 먼저 테스트 해볼 것이기 때문에 Test 창에서 &lt;strong&gt;Intent&lt;/strong&gt; 탭을 선택합니다. 
&lt;img src=&quot;/assets/images/chatbot_lecture/11_test_ui_intent.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;테스트 창 왼편의 Examples로 등록되어 있는 문장들 몇 개를 &lt;strong&gt;Message&lt;/strong&gt; Text Box에 입력해 봅니다. 입력한 Utterance가 &lt;strong&gt;Balances&lt;/strong&gt;라는 &lt;strong&gt;Intent&lt;/strong&gt;에 매칭된 것을 확인할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/12_intent_test_1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;몇 개 샘플 Utterance를 더 테스트 해 봅니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/12_intent_test_2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 Intent를 변경하여 다시 테스트 해보겠습니다. &lt;strong&gt;Send Money&lt;/strong&gt; Intent를 선택하여 위와 같이 테스트 해봅니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/12_intent_test_3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;masterbot과-대화해-보기&quot;&gt;&lt;strong&gt;MasterBot과 대화해 보기&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;이제 Bot과 실제로 위에서 테스트한 Intent에 반응하는 대화를 해 볼 것입니다. 이 봇은 이미 다음 두 가지의 Intent를 위한 Flow가 작성되어 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Balances : 잔고 조회&lt;/li&gt;
  &lt;li&gt;Send Money : 계좌 이체&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위 두 Intent에 매칭이 될 수 있도록 &lt;strong&gt;Utterance&lt;/strong&gt;를 입력하여 대화를 시도해 봅니다. 
대화 테스트는 왼쪽 메뉴 하단의 &lt;strong&gt;▶&lt;/strong&gt; 메뉴를 클릭하여 테스트 창을 열어 수행합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/13_test_ui_dial.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;balances-잔고조회-intent&quot;&gt;Balances (잔고조회) Intent&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Message&lt;/strong&gt; Test Box에 다음과 같이 입력합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/14_Bal_1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;어떤 계좌의 잔고를 보고 싶은지 &lt;strong&gt;Bot&lt;/strong&gt;이 질문을 합니다. 어떤 것이나 선택해도 됩니다. 제공된 리스트 중 하나를 클릭하세요. 선택된 계좌의 잔고를 보여주고 대화가 종료됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/14_Bal_2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Test UI의 &lt;strong&gt;Reset&lt;/strong&gt; 버튼을 클릭하여 창을 clear 합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/15_reset.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;다음은 게좌 유형이 &lt;strong&gt;Utterance&lt;/strong&gt;에 포함된 대화를 테스트 해보겠습니다. 다음과 같이 질문을 하게 되면 Bot이 계좌 유형이 이미 제공되었기 때문에 게좌 유형을 묻는 질문을 하지 않고 바로 해당 계좌의 잔고를 보여주게 됩니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;내 저축 계좌의 잔고가 얼마야?&lt;/li&gt;
  &lt;li&gt;예금 계좌에 잔고가 얼마나 남아 있지?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/14_Bal_3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;send-money-계좌-이체-intent-테스트-하기&quot;&gt;Send Money (계좌 이체) Intent 테스트 하기&lt;/h3&gt;
&lt;p&gt;위 잔고 조회 예제와 같이 &lt;strong&gt;Send Money&lt;/strong&gt; 예제도 테스트 해봅니다. 송금을 수행하기 위한 샘플 Utterance를 입력하여 송금 업무가 수행되게 합니다. 
다음과 같이 대화가 진행되는 것을 볼 수 있습니다. 송금을 진행하기 위해서는 다음 3개의 Entity(정보가) 필요하고 이를 Bot이 계속 질문하게 됩니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;출금 계좌&lt;/li&gt;
  &lt;li&gt;송금 계좌&lt;/li&gt;
  &lt;li&gt;금액&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/Send%20Money%20Test.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;송금을 위한 3개의 Entity를 첫 사용자 Utterance에 포함하여 대화를 수행할 수 있습니다. 첫 문장에서 송금을 위한 모든 정보 (Entity)가 추출된다면 Bot은 추가적인 질문을 하지 않고 바로 송금을 시행합니다. 아래와 같이 입력하여 테스트 해
보세요&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;카드에서 출금해서 팀장님께 $50 보내줘&lt;/li&gt;
  &lt;li&gt;내 예금 계좌에서 $200불 엄마한테 보내줘&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/Send%20Money2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;사용환경-정리&quot;&gt;사용환경 정리&lt;/h2&gt;
&lt;p&gt;생성한 MasterBot_{SEQ}를 다음과 같이 삭제 합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/99_delete_bot.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;과정을 완료하였습니다.&lt;/p&gt;

&lt;h1 id=&quot;chatbot-workshop-lab&quot;&gt;Chatbot-Workshop Lab&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Lab 개요 : &lt;a href=&quot;/chatbot/2019/챗봇-Hands-on-Lab_1/&quot;&gt;챗봇 Hands-on Lab (1) - Lab 개요&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Lab 100 : &lt;a href=&quot;/chatbot/2019/챗봇-Hands-on-Lab_2/&quot;&gt;챗봇 Hands-on Lab (2) - 금융봇을 이용하여 챗봇 기본 기능 익히기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Lab 200 : &lt;a href=&quot;/chatbot/2019/챗봇-Hands-on-Lab_3/&quot;&gt;챗봇 Hands-on Lab (3) - 피자봇 만들기 &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Lab 300 : &lt;a href=&quot;/chatbot/2019/챗봇-Hands-on-Lab_4/&quot;&gt;챗봇 Hands-on Lab (4) - [채널 연결] Web Chat 연결하기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h2&gt;

&lt;p&gt;금융봇(MasterBot)이 등록되어 있지 않다면 아래 파일을 다운 받아 Import 하면 됩니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mee-nam-lee/chatbot_lecture/blob/master/labfiles/MasterBot_Korean/MasterBot_kor_wo_comp.zip&quot;&gt;MasterBot Import 파일&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="chatbot" /><category term="오라클 챗봇" /><category term="Hands-on-Lab" /><summary type="html">이 Lab에서는 MasterBot이라는 이름의 금융 업무를 수행하는 챗봇을 살펴볼 것입니다.</summary></entry><entry><title type="html">챗봇 Hands-on Lab (1) - Lab 개요</title><link href="http://localhost:4000/chatbot/2019/%EC%B1%97%EB%B4%87-Hands-on-Lab_1/" rel="alternate" type="text/html" title="챗봇 Hands-on Lab (1) - Lab 개요" /><published>2019-01-23T02:50:00+09:00</published><updated>2019-01-23T02:50:00+09:00</updated><id>http://localhost:4000/chatbot/2019/%EC%B1%97%EB%B4%87%20Hands-on%20Lab_1</id><content type="html" xml:base="http://localhost:4000/chatbot/2019/%EC%B1%97%EB%B4%87-Hands-on-Lab_1/">&lt;p&gt;Oracle Cloud를 이용하여 인간의 언어(Natural Language)를 이해하는 챗봇을 간단하게 만들어 보는 Hands on Workshop 입니다.&lt;/p&gt;

&lt;p&gt;Training 과정을 통해 더욱 정교한 대화가 가능한 챗봇으로 진화시키는 과정을 체험하고, 비즈니스 처리를 위한 로직을 쉽게 작성하여 챗봇을 통해 서비스하게 하는 경험을 하시게 될 것입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/mobile_overviw.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이 실습에서는 다음과 같은 두 개의 봇을 만들어 보게 될 것 입니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;금융봇 (MasterBot)&lt;/strong&gt; : 잔액 조회, 계좌이체, 지출 이력 조회 업무를 수행하는 봇&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;피자봇 (PizzaBot)&lt;/strong&gt; : 피자 주문, 주문 취소등의 업무를 수행하는 봇&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;prerequisite&quot;&gt;Prerequisite&lt;/h1&gt;
&lt;p&gt;이 핸즈온을 완료하려면 Oracle Digital Assistant 서비스에 접속해야 합니다. 
Oracle Cloud 계정을 이미 가지고 계시다면 Digital Assistant Cloud Service 인스턴스를 생성한 후 이 과정을 수행하시면 됩니다.&lt;/p&gt;

&lt;p&gt;Oracle Cloud 계정이 없다면 무료로 제공되는 Trial 계정을 신청하세요&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.oracloud.kr/post/oracle_cloud_trial_universal/&quot;&gt;Trial 계정 신청하기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;본 과정에서는 Oracle Digital Assitant의 접속 정보가 제공될 것입니다. 제공되는 정보를 이용하여 Digital Assitant Cloud에 연결하세요.&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;chatbot-workshop-lab&quot;&gt;Chatbot-Workshop Lab&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Lab 개요 : &lt;a href=&quot;/chatbot/2019/챗봇-Hands-on-Lab_1/&quot;&gt;챗봇 Hands-on Lab (1) - Lab 개요&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Lab 100 : &lt;a href=&quot;/chatbot/2019/챗봇-Hands-on-Lab_2/&quot;&gt;챗봇 Hands-on Lab (2) - 금융봇을 이용하여 챗봇 기본 기능 익히기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Lab 200 : &lt;a href=&quot;/chatbot/2019/챗봇-Hands-on-Lab_3/&quot;&gt;챗봇 Hands-on Lab (3) - 피자봇 만들기 &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Lab 300 : &lt;a href=&quot;/chatbot/2019/챗봇-Hands-on-Lab_4/&quot;&gt;챗봇 Hands-on Lab (4) - [채널 연결] Web Chat 연결하기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="chatbot" /><category term="오라클 챗봇" /><category term="Hands-on-Lab" /><summary type="html">Oracle Cloud를 이용하여 인간의 언어(Natural Language)를 이해하는 챗봇을 간단하게 만들어 보는 Hands on Workshop 입니다.</summary></entry><entry><title type="html">Digital Assistant(챗봇)과 Autonomous Data Warehouse(ADW) 연계하기</title><link href="http://localhost:4000/chatbot/2019/chatbot_adw/" rel="alternate" type="text/html" title="Digital Assistant(챗봇)과 Autonomous Data Warehouse(ADW) 연계하기" /><published>2019-01-22T02:50:00+09:00</published><updated>2019-01-22T02:50:00+09:00</updated><id>http://localhost:4000/chatbot/2019/chatbot_adw</id><content type="html" xml:base="http://localhost:4000/chatbot/2019/chatbot_adw/">&lt;p&gt;오라클 챗봇인 &lt;strong&gt;Digital Assistant&lt;/strong&gt;에서는 커스텀 비즈니스 코드를 작성을 지원하기 위해 &lt;strong&gt;Custom Component&lt;/strong&gt;라는 기능을 제공하고 있습니다.&lt;/p&gt;

&lt;p&gt;Custom Component는 오라클 &lt;strong&gt;모바일 클라우드&lt;/strong&gt;에서 서비스되도록 작성되거나 &lt;strong&gt;Stand Alone&lt;/strong&gt;으로 동작되도록 작성될 수도 있고, Oracle Digital Assistant가 제공하는 Custom Component를 위한 &lt;strong&gt;임베디드 컨테이너&lt;/strong&gt;에서 구동되도록 작성될 수도 있습니다.&lt;/p&gt;

&lt;p&gt;이 문서에서는 &lt;strong&gt;Oracle Autonomous Data Warehouse&lt;/strong&gt;와 연계하는 방법을 Stand Alone Custom Component를 구현을 통해서 설명할 예정입니다.&lt;/p&gt;

&lt;h2 id=&quot;아키텍쳐&quot;&gt;아키텍쳐&lt;/h2&gt;
&lt;p&gt;연계 아키텍쳐는 다음과 같습니다. Stand Alone Custom Component의 구동 환경은 Oracle Compute Cloud를 사용하였습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ODA_ADW/00.architecture.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;사전-준비-사항&quot;&gt;사전 준비 사항&lt;/h2&gt;
&lt;p&gt;아래 서비스가 미리 생성되어 있어야 합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Oracle Digital Assistant (ODA)&lt;/li&gt;
  &lt;li&gt;Oracle Autonomous Data Warehouse (ADW)&lt;/li&gt;
  &lt;li&gt;Oracle Compute Cloud&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;oracle-compute-cloud에-필요한-software-설치하기&quot;&gt;Oracle Compute Cloud에 필요한 Software 설치하기&lt;/h2&gt;
&lt;p&gt;Compute Cloud를 Digital Assistant의 Custom Component 구동용으로 사용할 것이기 때문에 Custom Component SDK와 Oracle Database 연결을 위한 소프트웨어를 설치해야 합니다.
필요 소프트웨어는 다음과 같습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Node.js&lt;/li&gt;
  &lt;li&gt;Oracle Instant Client&lt;/li&gt;
  &lt;li&gt;GIT Client 설치&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;compute-cloud-생성-및-ssh로-접속하기&quot;&gt;Compute Cloud 생성 및 SSH로 접속하기&lt;/h3&gt;
&lt;p&gt;Compute Cloud 생성은 다음을 참고합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.oracloud.kr/post/oci_workshop_5/&quot;&gt;Compute Cloud 생성&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;생성된 Compute 인스턴스에 Security Rule을 추가합니다. 여기서 추가하는 포트 3000은 향후 component 서버에서 사용할 포트입니다.
Security List 설정의 자세한 방법은 아래를 참고 하세요.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.oracloud.kr/post/oci_workshop_3/&quot;&gt;Security List 설정&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ODA_ADW/08.security_list.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;OS 자체의 firewall 서비스를 사용할 경우 해당 포트를 firewall에서도 open 시켜줘야 합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;생성된 Compute의 Public IP를 확인하고 SSH로 접속합니다.&lt;/p&gt;

&lt;h3 id=&quot;nodejs-설치하기&quot;&gt;Node.js 설치하기&lt;/h3&gt;
&lt;p&gt;Compute Cloud에 Node.js를 설치합니다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; sudo yum -y install nodejs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Node.js 설치 방법 및 바이너리 다운로드는 다음을 참고합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://nodejs.org/en/download/&quot;&gt;Nodejs.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;oracle-instant-client-설치하기&quot;&gt;Oracle Instant Client 설치하기&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.oracle.com/technetwork/database/database-technologies/instant-client/downloads/index.html&quot;&gt;Oracle Instant Client 다운로드&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/en/cloud/paas/autonomous-data-warehouse-cloud/user/connecting-nodejs.html#GUID-AB1E323A-65B9-47C4-840B-EC3453F3AD53&quot;&gt;Oracle Instant Client 설치 참고&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위 다운로드 사이트에서 아래 파일을 다운 받습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ODA_ADW/01.oracle_instant_client_download.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Compute Cloud로 upload 합니다. (SCP나 SFTP 이용)&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; scp -i privatekey instantclient-basic-linux.x64-18.3.0.0.0dbru.zip opc@{Compute Public IP}:/home/opc/.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/ODA_ADW/02.scp_oracle_instant_client.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;업로드된 instant client 파일의 압축을 풉니다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;unzip instantclient-basic-linux.x64-18.3.0.0.0dbru.zip 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;.bash_profile에 다음을 추가해 줍니다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export LD_LIBRARY_PATH=/home/opc/instantclient_18_3:$LD_LIBRARY_PATH 
export TNS_ADMIN=/home/opc/instantclient_18_3/network/admin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Instant Client에서 ADW 연결을 위해서는 ADW Client Wallet을 다운 받아야 합니다. ADW 콘솔에 접속하여 Client Wallet을 다운 받습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ODA_ADW/03.download_client_wallet.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/en/cloud/paas/autonomous-data-warehouse-cloud/user/connect-download-wallet.html#GUID-B06202D2-0597-41AA-9481-3B174F75D4B1&quot;&gt;다운로드 ADW Client Credential (Wallet) 참고&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;다운 받은 Wallet의 내용은 다음과 같습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ODA_ADW/04.wallet_content.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Wallet을 Compute Cloud의 Instant Client 설치 디렉토리로 복사하여 압축을 풀어 줍니다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; scp -i privatekey wallet.zip opc@{Compute Public IP}:/home/opc/instantclient_18_3/network/admin/.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;복사한 Wallet의 압축을 풀고 난 후의 admin 디렉토리 내용은 다음과 같습니다.
&lt;img src=&quot;/assets/images/ODA_ADW/05.admin_dir_content.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;tnsnames.ora 파일을 열어서 접속할 서비스명을 확인합니다. {DB명}_high, {DB명}_medium, {DB명}_low 중에서 선택하여 사용하면 됩니다.
&lt;img src=&quot;/assets/images/ODA_ADW/06.tnsnames_ora.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;custom-component-작성하기&quot;&gt;Custom Component 작성하기&lt;/h2&gt;
&lt;p&gt;ADW에 연결하기 위한 Custom Component 작성을 위한 준비가 완료 되었습니다.
소스를 Git에서 다운 받기 위해 Git Client가 필요합니다. 다음을 실행하여 git을 설치합니다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; sudo yum install git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 Sample로 작성된 ADW 연결용 Custom Component를 다운 받습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; git clone https://github.com/mee-nam-lee/chatbot.git
&amp;gt; cd chatbot_adw/bot-start
&amp;gt; npm install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;샘플 소스 코드에서 ADW 연결을 위한 정보를 수정해 줍니다.
&lt;strong&gt;chatbot_adw/bot-start/components/dbconfig.js&lt;/strong&gt; 파일을 열어서 &lt;strong&gt;user&lt;/strong&gt;, &lt;strong&gt;password&lt;/strong&gt;, &lt;strong&gt;connectString&lt;/strong&gt; 부분을 수정합니다.
tns_name은 &lt;strong&gt;tnsnames.ora&lt;/strong&gt;에서 참고하면 됩니다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;user&lt;/span&gt;          &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;NODE_ORACLEDB_USER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;your_username&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;password&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;NODE_ORACLEDB_PASSWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;your_userpassword&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;connectString&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;NODE_ORACLEDB_CONNECTIONSTRING&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;your_tns_name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

 &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;생략&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;소스-코드-잠깐-살펴-보기&quot;&gt;소스 코드 잠깐 살펴 보기&lt;/h3&gt;
&lt;p&gt;실제 SQL을 수행하여 Database에서 정보를 조회하는 부분은 &lt;strong&gt;chatbot_adw/bot-start/components/oracledb.js&lt;/strong&gt;에 들어있습니다.
getADW 함수내의 SQL 문장을 원하는 SQL로 변경하여 수행하면 됩니다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getADW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;생략&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// ADW Sample Sales History 조회 SQL&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sqlstring&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'SELECT channel_desc, TO_CHAR(SUM(amount_sold),&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;9,999,999,999&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;) SALES$, &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;
                              RANK() OVER (ORDER BY SUM(amount_sold)) AS default_rank, &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;
                              RANK() OVER (ORDER BY SUM(amount_sold) DESC NULLS LAST) AS custom_rank &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;
                       FROM sh.sales, sh.products, sh.customers, sh.times, sh.channels, sh.countries &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;
                       WHERE sales.prod_id=products.prod_id AND sales.cust_id=customers.cust_id &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;
                           AND customers.country_id = countries.country_id AND sales.time_id=times.time_id &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;
                           AND sales.channel_id=channels.channel_id &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;
                           AND times.calendar_month_desc IN (&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;2000-09&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;2000-10&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;) &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;
                           AND country_iso_code=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;US&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;
                       GROUP BY channel_desc'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;생략&lt;/span&gt; 

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;조회된 데이터를 챗봇에 보내줄때는 &lt;strong&gt;conversation.reply()&lt;/strong&gt;라는 chatbot SDK의 함수를 사용합니다. 해당 예제에서는 Text 형태로만 리턴하였기 때문에 conversation.reply에 text 만 사용하였으나. 채널 유형에 따라 다양한 형태의 json 메시지를 보낼 수 있습니다. 관련된 상세 정보는 Oracle Bot SDK를 참조하면 됩니다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nx&quot;&gt;getADW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;conversation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`매출 현황을 조회하였습니다. 채널 : &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; 판매금액 : &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; Rank : &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;커스텀-컴포넌트-구동&quot;&gt;커스텀 컴포넌트 구동&lt;/h3&gt;

&lt;p&gt;다음 명령어를 수행하여 컴포넌트를 구동해 봅니다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; node index.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;3000번 포트를 사용하여 서비스가 구동되었습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;백그라운드로 구동하려면 다음과 깉이 실행합니다.
nohup node index.js &amp;gt; nohup.out  2&amp;gt;&amp;amp;1 &amp;amp;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ODA_ADW/07.component_start.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;브라우저를 통해서 해당 컴포넌트가 잘 구동되었는지 확인합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ODA_ADW/09.component_browser_confirm.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;digital-assistant-chatbot에서-custom-component-연결하기&quot;&gt;Digital Assistant (Chatbot)에서 Custom Component 연결하기&lt;/h2&gt;
&lt;p&gt;작성된 Custom Component를 챗봇에서 사용하기 위해서는 컴포넌트를 사용할 Bot에 Service로 연결해 주어야 합니다. 
Bot 화면으로 이동하여 다음과 같이 서비스 등록 화면에서 서비스 추가 버튼을 클릭합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ODA_ADW/10.add_component.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이름과 Metadata URL(위 브라우저에서 테스트 했던 URL)을 입력하고 Username과 Password를 입력합니다.(이 샘플 컴포넌트 등록을 위해서는 test로 입력)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ODA_ADW/11.register_service.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;서비스가 잘 등록된 것을 확인할 수 있습니다. &lt;strong&gt;oracledb&lt;/strong&gt; 라는 컴포넌트를 Bot Flow에서 호출하여 사용할 것입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ODA_ADW/12.after_reg_service.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;bot-flow에서-사용하기&quot;&gt;Bot Flow에서 사용하기&lt;/h2&gt;
&lt;p&gt;Bot Flow에서 등록한 Custom Component는 다음과 같이 호출합니다.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;na&quot;&gt;printcountry&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;oracledb&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;human&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;meenam&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;transitions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;done&quot;&lt;/span&gt;    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;테스트&quot;&gt;테스트&lt;/h2&gt;
&lt;p&gt;연결이 잘 되고 호출이 정상적으로 이루어지는지 Test UI를 통해 테스트를 싱행합니다. 
정상적으로 수행되면 다음과 같이 ADW에서 Sales History를 조회해 올 것입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ODA_ADW/13.bot_test.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;모두 완료되었습니다.&lt;/p&gt;

&lt;h2 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.oracle.com/webfolder/technetwork/tutorials/obe/cloud/adwc/OBE_Loading%20Your%20Data/loading_your_data.html&quot;&gt;Autonomous Data Warehouse Toturial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Oracle 챗봇 컴포넌트 작성을 위한 자세한 SDK 가이드는 다음을 참고하세요&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/oracle/bots-node-sdk/&quot;&gt;Oracle Bots Node.js SDK&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Node.js용 Oracle DB Driver 상세와 샘플코드는 아래를 참고하세요.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/oracle/node-oracledb&quot;&gt;Node.js Oracle Driver&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="chatbot" /><category term="오라클 챗봇" /><category term="ADW" /><category term="Autonomous Data Warehouse" /><summary type="html">오라클 챗봇인 Digital Assistant에서는 커스텀 비즈니스 코드를 작성을 지원하기 위해 Custom Component라는 기능을 제공하고 있습니다.</summary></entry><entry><title type="html">Node.js Fabric SDK를 사용하여 오라클 블록체인 클라우드에 배포된 Fabcar 체인코드 호출</title><link href="http://localhost:4000/blockchain/2018/blockchain003/" rel="alternate" type="text/html" title="Node.js Fabric SDK를 사용하여 오라클 블록체인 클라우드에 배포된 Fabcar 체인코드 호출" /><published>2018-11-01T02:50:00+09:00</published><updated>2018-11-01T02:50:00+09:00</updated><id>http://localhost:4000/blockchain/2018/blockchain003</id><content type="html" xml:base="http://localhost:4000/blockchain/2018/blockchain003/">&lt;p&gt;지난 기고에서 &lt;strong&gt;Oracle Autonomous Blockchain Cloud Service&lt;/strong&gt;에 Hyperledger의 샘플체인 코드인 fabcar의 GO 버전과 Node.js 버전을 배포하고 REST API를 통해 배포된 체인코드를 호출하여 테스트 하는 과정에 대해 설명하였습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
이번 글에서는 이미 배포된 fabcar 체인코드를 &lt;strong&gt;node.js fabric client SDK&lt;/strong&gt;를 사용하여 호출하는 방법에 대해 설명하려고 합니다. 
Fabric Sample에는 Fabcar 체인코드와 Node.js로 작성된 client 코드를 모두 제공하고 있고, 이 코드를 사용하여 연결하는 방법에 대해 설명할 것입니다. &lt;br /&gt;
 &lt;strong&gt;Oracle Blockchain Cloud&lt;/strong&gt;는 보안성을 위하여 각 Peer와 Orderer간에 &lt;strong&gt;TLS(Transport Layer Security)&lt;/strong&gt; 통신을 하기 때문에, 제공된 샘플 Client를 그대로 사용하지 못하고, TLS 연결을 위한 코드를 몇줄 추가하여야 합니다.&lt;/p&gt;

&lt;h2 id=&quot;사전-준비-사항&quot;&gt;사전 준비 사항&lt;/h2&gt;
&lt;p&gt;이전 글에서 Fabric Sample 코드를 다운 받고, fabcar 체인 코드를 배포하는 과정에 대해 이미 다루었기 때문에 여기서는 이 글에서는 체인코드 배포 및 init 과정은 생략합니다. 체인코드가 이미 다음과 같은 환경으로 배포 되어있어야 합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;channel 명  : mychannel&lt;/li&gt;
  &lt;li&gt;chaincode 명 : fabcar&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;fabcar-client-준비하기&quot;&gt;Fabcar Client 준비하기&lt;/h2&gt;
&lt;p&gt;다운 받은 Fabcar Client가 위치하는 디렉토리로 이동합니다. fabric-samples의 fabcar 디렉토리에 다음과 같이 client 코드가 존재합니다.
&lt;img src=&quot;https://monosnap.com/image/swekMjcIDtA4wO2aObcxM1upeq6Lg3.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이 디렉토리 밑에 사용자 인증서와 Oracle Blockchain Cloud에 연결하기 위한 TLS certificate를 저장할 장소로 사용할  &lt;strong&gt;hfc-key-store&lt;/strong&gt;를 생성합니다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir  hfc-key-store
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이제 Oracle Blockchain Cloud 서비스의 콘솔 화면으로 이동하여 필요한 정보들을 다운 받을 것입니다.&lt;/p&gt;
&lt;h3 id=&quot;blockchain-instance-연결을-위한-파일-다운-받기&quot;&gt;Blockchain Instance 연결을 위한 파일 다운 받기&lt;/h3&gt;
&lt;p&gt;Blockchain Cloud 콘솔의 &lt;strong&gt;Developer Tools&lt;/strong&gt; 탭으로 이동하여 &lt;strong&gt;Download the developement package&lt;/strong&gt; 링크를 클릭합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/jQc2PHe4UteHUkWLF7Q9AC47iao9vw.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;detroitauto-instance-info.zip&lt;/strong&gt; 라는 이름의 파일이 다운로드 될 것 입니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;이 파일명은 [Organization Name]-instance-info.zip의 명명 규칙을 따르기 때문에 환경에 따라 다른 이름일 수 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;다운 받은 파일을 &lt;strong&gt;hfc-key-store&lt;/strong&gt; 디렉토리로 복사하여 압축을 풀어줍니다.
압축을 풀고 나서의 fabcar 디렉토리의 구조는 다음과 같아야 합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/D1vwR7q3lKmZuxdOswJyihUGAHIpn6.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;nodejs-sdk-설정을-위한-파일-다운-받기&quot;&gt;Node.js SDK 설정을 위한 파일 다운 받기&lt;/h3&gt;
&lt;p&gt;Fabric Client SDK를 설정을 위해 다시 Blockchain Cloud 콘솔의 &lt;strong&gt;Developer Tools&lt;/strong&gt; 탭으로 이동하여 설정을 위한 스크립트를 다운 받습니다. 사용하는 OS에 맞는 스크립트를 다운 받으면 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/v2iqS2HV2wVYnI9YJgCtC4kdeFA3jM.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;npm_bcs_client.sh&lt;/strong&gt; 파일이 다운로드 될 것입니다. 이 파일을 &lt;strong&gt;fabcar&lt;/strong&gt; 디렉토리로 복사하여 실행 시켜 줍니다.
스크립트에 실행 권한을 주고 실행합니다. 필요한 node module들이 다운로드 될 것입니다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;chmod +x npm_bcs_client.sh
./npm_bcs_client.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;node_modules 디렉토리가 잘 생성되었는지 확인 합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/tYFOiajKyeyl9WqM9CO6IYqxqDumbv.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 환경 구성은 완료 되었습니다.&lt;/p&gt;

&lt;h2 id=&quot;fabcar-client-코드-수정하기&quot;&gt;Fabcar Client 코드 수정하기&lt;/h2&gt;
&lt;p&gt;Fabcar Client에서 이 글에서 사용할 코드는 &lt;strong&gt;enrollAdmin.js, query,js, invoke.js&lt;/strong&gt; 이렇게 세가지 입니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;enrollAdmin.js : CA에 기 등록되어 있는 admin 사용자를 enroll하는 코드 입니다.&lt;/li&gt;
  &lt;li&gt;query.js : 체인코드의 query 메소드를 호출하는 코드 입니다.&lt;/li&gt;
  &lt;li&gt;invoke.js : 체인코드의 invoke 메소드를 호출하는 코드 입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;enrolladminjs-파일-수정&quot;&gt;enrollAdmin.js 파일 수정&lt;/h3&gt;
&lt;p&gt;먼저 사용자 enroll를 위해 enrollAdmin.js 파일을 수정하도록 합니다. &lt;strong&gt;기존 코드&lt;/strong&gt;를  &lt;strong&gt;Oracle Blockchian 연결을 위한 코드 (TLS 사용)&lt;/strong&gt;로 변경해 줍니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 기존 코드
fabric_ca_client = new Fabric_CA_Client('http://localhost:7054', tlsOptions , 'ca.example.com', crypto_suite);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Oracle Blockchian 연결을 위한 코드
var tlsPemFile = '/detroitauto-instance-info/artifacts/crypto/peerOrganizations/detroitauto/tlscacert/detroitauto-tlscacert.pem';
var caURL = 'YOUR CA URL';

let data = fs.readFileSync(path.join(store_path, tlsPemFile));
tlsOptions.trustedRoots.push(data);
tlsOptions.verify = true;

fabric_ca_client = new Fabric_CA_Client(caURL, tlsOptions , '', crypto_suite);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;CA URL은 Oracle Blockchain 콘솔의 Nodes 탭애서 다음과 같이 확인 합니다.
&lt;img src=&quot;https://monosnap.com/image/rqgNT7BqNRFvY2CmxoufB0cqSsWq1A.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;fabric_ca_client.enroll 함수의 &lt;strong&gt;enrollmentID, enrollmentSecret&lt;/strong&gt; 부분과 &lt;strong&gt;mspid&lt;/strong&gt; 부분을 다음과 같이 수정합니다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 기존 코드
    fabric_ca_client.enroll({
          enrollmentID: 'admin',
          enrollmentSecret: 'adminpw'
    }).then((enrollment) =&amp;gt; {
          console.log('Successfully enrolled admin user &quot;admin&quot;');
          return fabric_client.createUser(
              {username: 'admin',
                  mspid: 'Org1MSP',
                  cryptoContent: { privateKeyPEM: enrollment.key.toBytes(), signedCertPEM: enrollment.certificate }
              });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Oracle Blockchian 연결을 위한 코드
fabric_ca_client.enroll({
          enrollmentID: 'Oracle Cloud Account ID',
          enrollmentSecret: 'Oracle Cloud Account ID 패스워드'
        }).then((enrollment) =&amp;gt; {
          console.log('Successfully enrolled admin user &quot;admin&quot;');
          return fabric_client.createUser(
              {username: 'admin',
                  mspid: 'YOUR MSP ID',
                  cryptoContent: { privateKeyPEM: enrollment.key.toBytes(), signedCertPEM: enrollment.certificate }
              });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;enrollmentID는 Oracle Cloud에 접속하는 Account ID 입니다. &lt;br /&gt;
enrollmentSecret은 Oracle Cloud에 접속하는 Account 패스워드를 입력하면 됩니다. &lt;br /&gt;
mspid는 Blockchain MSP ID로 Blockchain Console에서 다음처럼 확인합니다.
&lt;img src=&quot;https://monosnap.com/image/p5X15n538wQYBRaAJL2IA8ZnrnN8aT.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;코드 수정이 완료되었으면 다음과 같이 enrollAdmin.js를 수행합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/0bPSvLXfefBiVC9BjrJzjRdyNHkLWc.png&quot; alt=&quot;Alt text&quot; /&gt;
admin 사용자의 certificate가 hfc-key-store에 잘 저장되었음을 확인 합니다.&lt;/p&gt;

&lt;h3 id=&quot;queryjs-파일-수정&quot;&gt;query.js 파일 수정&lt;/h3&gt;
&lt;p&gt;fabcar 체인코드의 ledger 조회를 위한 query.js 파일을 수정합니다.
이전 글에서 fabcar 체인코드를 배포하고 &lt;strong&gt;initLedger&lt;/strong&gt; 메소드를 수행 했었기 때문에 여기에서는 init 과정 없이 바로 query 부터 수행할 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 기존 코드
var peer = fabric_client.newPeer('grpc://localhost:7051');

// 중간 생략 ...

return fabric_client.getUserContext('user1', true);

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Oracle Blockchian 연결을 위한 코드
var tlsPemFile = '/detroitauto-instance-info/artifacts/crypto/peerOrganizations/detroitauto/tlscacert/detroitauto-tlscacert.pem';

let data = fs.readFileSync(path.join(store_path, tlsPemFile));
var peer = fabric_client.newPeer('YOUR PEER URL', {
		pem: Buffer.from(data).toString()
	});

// 중간 생략 ...

return fabric_client.getUserContext('admin', true);

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;이 예제에서는 &lt;strong&gt;admin&lt;/strong&gt; 이외의 다른 사용자를 추가하지 않았기 때문에 query.js에서 사용하는 user1을 admin으로 변경하여 실행합니다. &lt;br /&gt;
registerUser.js를 이용하여 user1을 등록하였다면 이 부분은 수정할 필요가 없습니다. &lt;br /&gt;
&lt;strong&gt;YOUR PEER URL&lt;/strong&gt;은 Blockchain 콘솔에서 다음과 같이 확인합니다.
&lt;img src=&quot;https://monosnap.com/image/KUKOe6qmmPOAd50YnEh4rAukbnaB6c.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;코드 수정이 완료되었으면 query.js 다음과 같이 실행 합니다. 기본 메소드 요청이 &lt;strong&gt;queryAllCars&lt;/strong&gt;로 되어있기 때문에 모든 ledger 정보가 리턴됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/HnTpAHNeesw9kIaYuxIwkQsRNiGp0a.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;invokejs-파일-수정&quot;&gt;invoke.js 파일 수정&lt;/h3&gt;
&lt;p&gt;fabcar 체인코드의 ledger 업데이트를 위해 invoke.js 파일을 수정합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 기존 코드
var peer = fabric_client.newPeer('grpc://localhost:7051');
channel.addPeer(peer);
var order = fabric_client.newOrderer('grpc://localhost:7050')
channel.addOrderer(order);

// 중간 생략 ...
return fabric_client.getUserContext('user1', true);

// 중간 생략 ...
	var request = {
		//targets: let default to the peer assigned to the client
		chaincodeId: 'fabcar',
		fcn: '',
		args: [''],
		chainId: 'mychannel',
		txId: tx_id
	};

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Oracle Blockchian 연결을 위한 코드
var tlsPemFile = '/detroitauto-instance-info/artifacts/crypto/peerOrganizations/detroitauto/tlscacert/detroitauto-tlscacert.pem';
var ordertlsPemFile = '/detroitauto-instance-info/artifacts/crypto/ordererOrganizations/detroitauto/tlscacert/detroitauto-tlscacert.pem';

let data = fs.readFileSync(path.join(store_path, tlsPemFile));
var peer = fabric_client.newPeer('YOUR PEER URL', {
		pem: Buffer.from(data).toString()
	});

channel.addPeer(peer);

let dataPem = fs.readFileSync(path.join(store_path, ordertlsPemFile));
var order = fabric_client.newOrderer('YOUR ORDERER URL', {
		pem: Buffer.from(dataPem).toString()
	});

channel.addOrderer(order);

// 중간 생략 ...

return fabric_client.getUserContext('admin', true);

// 중간 생략 ...
	var request = {
		//targets: let default to the peer assigned to the client
		chaincodeId: 'fabcar',
		fcn: 'changeCarOwner',
		args: ['CAR0', 'MNLEE'],
		chainId: 'mychannel',
		txId: tx_id
	};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;이 예제에서는 &lt;strong&gt;admin&lt;/strong&gt; 이외의 다른 사용자를 추가하지 않았기 때문에 invoke.js에서 사용하는 user1을 admin으로 변경하여 실행합니다. &lt;br /&gt;
registerUser.js를 이용하여 user1을 등록하였다면 이 부분은 수정할 필요가 없습니다. &lt;br /&gt;
&lt;strong&gt;YOUR PEER URL&lt;/strong&gt;은 query.js에서 사용한 URL을 이용합니다. &lt;br /&gt;
&lt;strong&gt;YOUR ORDERER URL&lt;/strong&gt;은 Blockchain 콘솔에서 다음과 같이 확인합니다.
&lt;img src=&quot;https://monosnap.com/image/eGUEk06N8v4L8dmfLiRMlTuxYlxK1H.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;코드 수정이 완료되었으면 invoke.js 다음과 같이 실행 합니다. 트랜잭션이 정상적으로 수행되었는지 확인 합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/HDfVcMgEVgsC1WIT3NBOLsrjtgGLma.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Car Owner가 잘 변경되었는지 확인하기 위해 query.js를 다시 한번 실행해 봅니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/image/rLnf3r1Xev9NwzuTaTetPvVJ3w32cc.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;request의 fcn, args를 변경해 가며 다른 메소드들도 수행해 보셔도 좋습니다.&lt;/p&gt;

&lt;p&gt;이상으로 node.js Fabric SDK를 사용하여 Oracle Blockchain Cloud에 연결하여 체인코들 호출하는 방법에 대해 살펴보았습니다. &lt;br /&gt;
더 자세한 사항은 아래 제품 자료를 참고하세요.&lt;/p&gt;

&lt;h2 id=&quot;관련글&quot;&gt;관련글&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;이전글 : &lt;a href=&quot;https://mee-nam-lee.github.io/docs/blockchain002/&quot;&gt;오라클 블록체인 클라우드에 Hyperledger Fabric 샘플 체인코드 Fabcar 배포하기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/en/cloud/paas/blockchain-cloud/index.html&quot;&gt;Oracle Blockchian Cloud&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/en/cloud/paas/blockchain-cloud/devapplicationtasks.html&quot;&gt;Oracle Blockchian Cloud - 애플리케이션 개발&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="Blockchain" /><category term="오라클 블럭체인" /><category term="Hyperledger Fabric" /><category term="Node.js" /><summary type="html">지난 기고에서 Oracle Autonomous Blockchain Cloud Service에 Hyperledger의 샘플체인 코드인 fabcar의 GO 버전과 Node.js 버전을 배포하고 REST API를 통해 배포된 체인코드를 호출하여 테스트 하는 과정에 대해 설명하였습니다.</summary></entry></feed>