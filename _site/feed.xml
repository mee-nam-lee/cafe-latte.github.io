<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-10-28T16:30:43+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">MN Lee’s IT Blog</title><subtitle>이 사이트의 Article들은 개인의 경험을 기술한 것으로 특정 제품의 공식 가이드가 아닙니다. 기술된 제품들의 버전에 따라 문서의 방법이 바르게 동작하지 않을 수 있습니다.</subtitle><entry><title type="html">Events와 Functions을 사용한 Thumb Nail Image 생성하기</title><link href="http://localhost:4000/cloud/2019/event-fn-resize/" rel="alternate" type="text/html" title="Events와 Functions을 사용한 Thumb Nail Image 생성하기" /><published>2019-10-28T00:00:00+09:00</published><updated>2019-10-28T00:00:00+09:00</updated><id>http://localhost:4000/cloud/2019/event-fn-resize</id><content type="html" xml:base="http://localhost:4000/cloud/2019/event-fn-resize/">&lt;p&gt;이 문서에서는 Object Storage에 저장되는 이미지를 OCI의 &lt;strong&gt;Events Service&lt;/strong&gt;와 Serverless 서비스인 &lt;strong&gt;Functions&lt;/strong&gt;을 사용하여 자동으로 Thumb Nail Image를 생성하는 방법에 대해서 설명할 것이다.
사용되는 서비스들과 서비스들 간의 호출 관계는 다음과 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/fn_resize/00_arch.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;prerequistes&quot;&gt;Prerequistes&lt;/h1&gt;
&lt;p&gt;이 예제에서 사용하는 서비스들은 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;OCI Events Service&lt;/li&gt;
  &lt;li&gt;OCI Notification Service&lt;/li&gt;
  &lt;li&gt;OCI Functions Service&lt;/li&gt;
  &lt;li&gt;OCI Object Storage Service&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;fn-app-생성&quot;&gt;Fn App 생성&lt;/h1&gt;

&lt;p&gt;제일 먼저 Function을 배포할 애플리케이션을 생성한다. 
&lt;strong&gt;Functions&lt;/strong&gt; 메뉴는 다음에서 찾으면 된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/fn_resize/01_fn_menu.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create Application&lt;/strong&gt; 버튼을 클릭하여 Fn를 배포할 애플리케이션을 생성한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/fn_resize/02_create_fn_app.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;애플리케이션 이름과 애플리케이션을 생성할 &lt;strong&gt;Virtual Cloud Network (VCN)&lt;/strong&gt;과  &lt;strong&gt;Subnet&lt;/strong&gt;을 선택하고, Fn의 Log 저장 옵션으로 &lt;strong&gt;Object Storage&lt;/strong&gt;를 선택한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/fn_resize/02_create_fn_app2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;다음과 같이 애플리케이션이 생성되어 있는 것을 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/fn_resize/03_fn_app_list.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;resize-function-deploy&quot;&gt;Resize Function Deploy&lt;/h1&gt;

&lt;p&gt;생성한 애플리케이션에 &lt;strong&gt;fn&lt;/strong&gt;을 배포해 볼 것이다. 로컬 환경에 Fn 구축을 위한 절차와, OCI Functions에 접속하는 절차는 다음을 참고한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.cloud.oracle.com/iaas/Content/Functions/Tasks/functionsconfiguringtenancies.htm&quot;&gt;Configuring Your Tenancy for Function Development&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Fn Project&lt;/strong&gt; CLI를 Client에 설치하고 OCI Functions 서비스와의 연결을 설정하고 나면 로컬 환경에서 &lt;strong&gt;fn&lt;/strong&gt; 커맨드를 통해서 다음과 같이 연결된 &lt;strong&gt;context&lt;/strong&gt;를 확인할 수 있다
Current Context가 OCI Functions를 사용하는 것으로 설정되어있는지 확인한다. ***** 표시가 되어있는 Context가 Current Context이다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/fn_resize/04_fn_contexts.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;여기에서 사용할 예제 fn은 Object Storage Bucket으로부터 image를 읽어와서 &lt;strong&gt;Sharp&lt;/strong&gt; 모듈로 이미지 사이즈를 조정한 후에 다시 Object Storage에 넣는 예제이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://sharp.pixelplumbing.com/en/stable/&quot;&gt;Sharp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;다음에서 필요한 소스를 받아온다.
Function Code는 func.js를 참고하면 된다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; git clone https://github.com/mee-nam-lee/NodeJS_Work.git
&amp;gt; cd myapp/resizefn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;resizefn 디렉토리로 이동하여 fn을 배포한다.
아래 커맨드를 수행하면 resizefn이 myapp 애플리케이션에 배포되게 된다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; fn -v deploy --app myapp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/fn_resize/05_fn_deploy.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;OCI 콘솔의 Functions Application으로 들어가면 방금 Deploy한 Function이 아래와 같이 보이는 것을 확인할 수 있을 것이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/fn_resize/06_fn_list.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;object-bucket-생성&quot;&gt;Object Bucket 생성&lt;/h1&gt;

&lt;p&gt;이제 이미지를 저장할 Object Storage Bucket을 다음과 같이 생성한다.
&lt;strong&gt;org_image&lt;/strong&gt;는 Original 이미지가 저장된 Bucket이고 &lt;strong&gt;small_image&lt;/strong&gt;는 Thumb Nail로 사이즈 조정된 이미지가 저장될 Bucket이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/fn_resize/07_object.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;notification-service-생성&quot;&gt;Notification Service 생성&lt;/h1&gt;

&lt;p&gt;Bucket에 Object가 생성되면 Object Create 이벤트가 발생하고 이 이벤트에 의해서 이메일 Notification을 해주기 위해서 Email 통지를 받는 Notification을 먼저 생성해 준다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/fn_resize/08_create_topic.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이메일 Notification을 받기 위하여 &lt;strong&gt;PROTOCOL&lt;/strong&gt; 항목을 &lt;strong&gt;Email&lt;/strong&gt;로 선택하고 메일 주소를 입력한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/fn_resize/09_subscription.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;event-serivce-생성&quot;&gt;Event Serivce 생성&lt;/h1&gt;

&lt;p&gt;이제 Bucket에 Object가 생성되면 resize fn를 호출하고 Email Notification을 호출할 Event 서비스를 만들어 보도록 하겠다.&lt;/p&gt;

&lt;p&gt;먼저 &lt;strong&gt;org_image&lt;/strong&gt;에 Original Image가 생성되면 resizefn을 호출하는 Event Rule를 생성해 준다.
다음과 같이 Event Condition과 Action 항목을 입력해 준다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/fn_resize/10_event_rule1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Thumb Nail Image가 만들어지고 &lt;strong&gt;small_image&lt;/strong&gt; Bucket에 이미지가 저장되면 Email 통지를 해주기 위한 Event Rule도 생성한다.
이 Event Condition에서 사용하는 BucketName 조건을 입력하고 Action 항목에 생성해 둔 Notification 서비스를 선택해 준다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/fn_resize/11_event_rule2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;다음과 같이 두개의 Rule이 생성된 것을 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/fn_resize/12_event_list.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;test&quot;&gt;Test&lt;/h1&gt;

&lt;p&gt;이제 준비는 다 되었다. Object Storage Console로 이동하여 원본 크기의 이미지를 &lt;strong&gt;org_image&lt;/strong&gt; Bucket에 Upload 해보자&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/fn_resize/13_upload.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이미지가 업로드 되었다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/fn_resize/14_uploaded.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Object가 생성되고 나서 Event가 정상적으로 발생하였는지 확인하기 위해서 Event의 Metrics 페이지를 확인해 본다. Event가 발생하였고 성공적으로 Function을 호출했음을 알 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/fn_resize/15_event_metric.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Functions Metrics에서도 해당 fn이 성공적으로 수행되었음을 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/fn_resize/16_fn_metric.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;small_image&lt;/strong&gt; Bucket에 가 보면 Thumb Nail이 생성되어 있는 것을 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/fn_resize/17_small_image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이미지가 잘 변환되었는지 다운 받아서 확인해 본다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/fn_resize/18_download.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/fn_resize/19_thumb.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이벤트 규칙에 의해서 Thumb Nail 이미지 생성 Event에 의해서 Email 통지 또한 수행 되었다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/fn_resize/20_email.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://fnproject.io/tutorials/node/intro/&quot;&gt;Introduction to Fn with Node.js&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.cloud.oracle.com/iaas/Content/Functions/Tasks/functionsconfiguringtenancies.htm&quot;&gt;Configuring Your Tenancy for Function Development&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="Oracle Cloud" /><category term="OCI" /><category term="Event" /><category term="Functions" /><category term="fn project" /><category term="Node.js" /><category term="Sharp" /><summary type="html">이 문서에서는 Object Storage에 저장되는 이미지를 OCI의 Events Service와 Serverless 서비스인 Functions을 사용하여 자동으로 Thumb Nail Image를 생성하는 방법에 대해서 설명할 것이다. 사용되는 서비스들과 서비스들 간의 호출 관계는 다음과 같다.</summary></entry><entry><title type="html">Private Load Balancer를 이용한 MySQL Read Replica 로드 발란싱 하기</title><link href="http://localhost:4000/cloud/2019/mysql-replica/" rel="alternate" type="text/html" title="Private Load Balancer를 이용한 MySQL Read Replica 로드 발란싱 하기" /><published>2019-10-01T00:00:00+09:00</published><updated>2019-10-01T00:00:00+09:00</updated><id>http://localhost:4000/cloud/2019/mysql-replica</id><content type="html" xml:base="http://localhost:4000/cloud/2019/mysql-replica/">&lt;p&gt;이 문서에서는 &lt;strong&gt;Private Subnet&lt;/strong&gt; 상에 MySQL Master와 2개의 Slave(&lt;strong&gt;Read Replica&lt;/strong&gt;)를 구성하고, Read Replica들 간의 로드발란싱을 위해 &lt;strong&gt;Private Load Balancer&lt;/strong&gt;를 통해 접속하는 방법에 대해 기술 할 것이다.&lt;/p&gt;

&lt;p&gt;여기에서는 MySQL의 Replication을 구성하는 내용에 대해서는 다루지 않을 것이다. 이 내용은 MySQL 공식 페이지를 참고하면 될 것이다.&lt;/p&gt;

&lt;p&gt;아래 그림과 같이 Private Subnet에 Master 노드와 두개의 Slave를 구성해 두었다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/mysql/replica/architecture.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;MySQL은 Community Edition을 이용하였다. 설치 관련은 다음을 참고한다.
&lt;img src=&quot;/assets/images/mysql/replica/01_install.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;구성된 MySQL 각 노드에 접속하여서 현재 상태를 살펴본다.
Replication 구성은 &lt;strong&gt;www&lt;/strong&gt; Database에 대해서 구성되어있다.&lt;/p&gt;

&lt;h2 id=&quot;master&quot;&gt;Master&lt;/h2&gt;

&lt;p&gt;Public Subnet에 존재하는 MySQL Client를 통해 Master 노드로 Remote로 접속한다.
Master Node의 Private IP는 10.0.2.2 이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;/assets/images/mysql/replica/master.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;slave1&quot;&gt;Slave1&lt;/h2&gt;

&lt;p&gt;Slave 노드에 Remote로 접속해 본다. Slave1의 Private IP는 10.0.2.3 이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;/assets/images/mysql/replica/slave1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;slave2&quot;&gt;Slave2&lt;/h2&gt;

&lt;p&gt;Slave 노드에 Remote로 접속해 본다. Slave2의 Private IP는 10.0.2.4 이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;/assets/images/mysql/replica/slave2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;private-load-balancer-생성&quot;&gt;Private Load Balancer 생성&lt;/h1&gt;

&lt;p&gt;Slave를 Private Load Balancer를 통해 접속 할 수 있도록 Private Subnet에 Private Load Balancer를 다음과 같이 구성한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;/assets/images/mysql/replica/private_lb.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Backend 서버 연결과 Health Check에 사용되는 포트를 3306으로 설정한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;/assets/images/mysql/replica/private_lb2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;MySQL Client에서 3306을 통해 로드발란서에 연결하기 위해서 Listener 포트도 3306으로 구성한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;/assets/images/mysql/replica/private_lb3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;로드발란서가 생성되었으면 다음과 같이 Load Balancer를 통해 Slave에 접속해 본다. Round Robin 정책을 사용했기 때문에 접속될 때 마다, Slave가 교대로 접속될 것이다.&lt;/p&gt;

&lt;p&gt;위에서 생성한 Private Load Balancer의 Private IP는 10.0.2.7 이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;/assets/images/mysql/replica/connect_via_lb.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이제 Replication이 잘 이루어지는지 Master에서 Data를 Insert 해보자&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;/assets/images/mysql/replica/master_insert.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;각 Slave에서 확인해보면 방금 Master에서 insert한 데이터가 보이는 것을 확인할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;slave1-1&quot;&gt;Slave1&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;/assets/images/mysql/replica/slave1_result.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;slave2-1&quot;&gt;Slave2&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;/assets/images/mysql/replica/slave2_result.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/replication.html&quot;&gt;MySQL Replication&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="Oracle Cloud" /><category term="OCI" /><category term="MySQL" /><category term="Read Replica" /><category term="Private Load Balancer" /><summary type="html">이 문서에서는 Private Subnet 상에 MySQL Master와 2개의 Slave(Read Replica)를 구성하고, Read Replica들 간의 로드발란싱을 위해 Private Load Balancer를 통해 접속하는 방법에 대해 기술 할 것이다.</summary></entry><entry><title type="html">Oracle Cloud Infrastructure - DNS - Traffic Management Steering Policy</title><link href="http://localhost:4000/cloud/2019/dns-traffic/" rel="alternate" type="text/html" title="Oracle Cloud Infrastructure - DNS - Traffic Management Steering Policy" /><published>2019-07-29T00:00:00+09:00</published><updated>2019-07-29T00:00:00+09:00</updated><id>http://localhost:4000/cloud/2019/dns-traffic</id><content type="html" xml:base="http://localhost:4000/cloud/2019/dns-traffic/">&lt;p&gt;&lt;strong&gt;Oracle Cloud Infrasture(OCI)&lt;/strong&gt;의 &lt;strong&gt;DNS&lt;/strong&gt;와 &lt;strong&gt;Traffic Management&lt;/strong&gt; 기능을 이용하여 Cloud Region 간 또는 Cloud와 On-Premise 간의 로드발란싱을 구성할 수가 있다.
Traffic Management는 여러가지 Steering Policy를 제공하는데, 이 문서에서는 &lt;strong&gt;LOAD BALANCER&lt;/strong&gt; Steering Policy에 대해서 알아 볼 것이다.&lt;/p&gt;

&lt;p&gt;사용자가 웹사이트에 접근하기 위해 DNS Lookup을 수행하면 DNS에 적용된 Traffic Management의 Steering Policy를 통해서 제공되는 Origin Server IP를 발란싱해서 전달해주고 사용자 요청이 여러 Region 간에 분배될 수 있게 해준다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/traffic/lb/dns_lb.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;prerequiste&quot;&gt;Prerequiste&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;도메인
    &lt;ul&gt;
      &lt;li&gt;설정에 사용할 도메인이 있어야 한다. 이 예제에서는 무료 도메인 발급 사이트에서 발급받은 &lt;strong&gt;mnlee.cf&lt;/strong&gt;를 사용했다.&lt;/li&gt;
      &lt;li&gt;도메인 등록 사이트에서 Name Server를 &lt;strong&gt;OCI DNS&lt;/strong&gt;의 Name Server로 연결되게 구성해 주어야 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/waf/00_nameserver.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;traffic-management-steering-policy-생성&quot;&gt;Traffic Management Steering Policy 생성&lt;/h1&gt;

&lt;p&gt;OCI 콘솔에 접속해서 &lt;strong&gt;Traffic Management Steering Policy&lt;/strong&gt;를 생성해 준다.
여러 Policy Type 중에서 &lt;strong&gt;LOAD BALANCER&lt;/strong&gt; 타입을 선택한다.
이름과 TTL을 적당한 값으로 입력하고 로드발란싱을 적용할 DNS Record를 추가해 준다.
이 예제에서 &lt;strong&gt;pho.mnlee.cf&lt;/strong&gt;는 &lt;strong&gt;Phoenix&lt;/strong&gt; 리전에서 서비스하고, &lt;strong&gt;ash.mnlee.cf&lt;/strong&gt;는 &lt;strong&gt;Ashburn&lt;/strong&gt; 리전에서 서비스 한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/traffic/lb/create_traffic_1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Region에서 서비스되고 있는 인스턴스나 서비스의 &lt;strong&gt;Health&lt;/strong&gt;를 체크하여 &lt;strong&gt;Healthy&lt;/strong&gt;한 서비스가 리턴 되도록 &lt;strong&gt;Health Check&lt;/strong&gt; 기능을 연결해도 되지만 이 예제에서는 간단한 테스를 위하여 이 기능은 Attach하지 않았다.
Policy를 Attach할 도메인을 선택하고 &lt;strong&gt;Create Policy&lt;/strong&gt;를 클릭한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/traffic/lb/create_traffic_2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Traffic Management Policy가 만들어지고 난 후의 화면이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/traffic/lb/after_traffic_1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/traffic/lb/after_traffic_2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;dns-설정&quot;&gt;DNS 설정&lt;/h1&gt;

&lt;p&gt;DNS Zone 관리 화면에서 로드발란싱을 수행할 두개의 CNAME Record를 다음과 같이 추가해 준다.
추가 후에는 &lt;strong&gt;Publish Changes&lt;/strong&gt;를 눌러줘야 변경사항이 반영된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/traffic/lb/dns_record.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;test&quot;&gt;Test&lt;/h1&gt;

&lt;p&gt;DNS Lookup 로드발란싱이 잘 수행되는지 &lt;strong&gt;dig&lt;/strong&gt; 커맨드를 통해서 테스트해 본다
첫번째 dig 명령어에서는 &lt;strong&gt;ash.mnlee.cf&lt;/strong&gt;가 리턴 되었다.
TTL을 60초로 설정해 두었기 때문에 TTL 내에서는 동일한 Answer가 보이게 될 것이다.&lt;/p&gt;

&lt;p&gt;TTL 경과 후 다시 DNS Lookup을 수행하면 &lt;strong&gt;pho.mnlee.cf&lt;/strong&gt;가 리턴되는 것을 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/traffic/lb/dig_ash_pho.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;브라우저에서 테스트 해보자.
두 Region 중 하나에서 응답을 받을 것이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/traffic/lb/browser_ash.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;브라우저에서는 DNS lookup 후 리턴되는 서버 IP를 캐싱하여 가지고 있기 때문에 TTL 후에도 계속 같은 Region에서 응답을 받게 될 것이다.&lt;/p&gt;

&lt;p&gt;사용하는 브라우저 별로 DNS 캐시 Clear하는 방법을 참고하여 Cache를 지운 후에 다시 테스트 해보자.
Chrome 브라우저에서는 다음과 같이 하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/traffic/lb/chrome_dns_clear.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;다시 테스트 해보면 다른 Region에서 응답을 받게 될 것이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/traffic/lb/browser_pho.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.cloud.oracle.com/iaas/Content/TrafficManagement/Concepts/overview.htm&quot;&gt;Overview of the Traffic Management Steering Policies Service&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="Oracle Cloud" /><category term="OCI" /><category term="Traffic Management" /><category term="DNS" /><category term="Steering Policy" /><summary type="html">Oracle Cloud Infrasture(OCI)의 DNS와 Traffic Management 기능을 이용하여 Cloud Region 간 또는 Cloud와 On-Premise 간의 로드발란싱을 구성할 수가 있다. Traffic Management는 여러가지 Steering Policy를 제공하는데, 이 문서에서는 LOAD BALANCER Steering Policy에 대해서 알아 볼 것이다.</summary></entry><entry><title type="html">Oracle Cloud Infrastructure - WAF 설정</title><link href="http://localhost:4000/cloud/2019/waf/" rel="alternate" type="text/html" title="Oracle Cloud Infrastructure - WAF 설정" /><published>2019-07-24T00:00:00+09:00</published><updated>2019-07-24T00:00:00+09:00</updated><id>http://localhost:4000/cloud/2019/waf</id><content type="html" xml:base="http://localhost:4000/cloud/2019/waf/">&lt;p&gt;&lt;strong&gt;Oracle Cloud Infrasture(OCI)&lt;/strong&gt;의 WAF Policy 생성하고 적용하는 방법에 대해 설명하는 문서 임.&lt;/p&gt;

&lt;h1 id=&quot;prerequiste&quot;&gt;Prerequiste&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;도메인
    &lt;ul&gt;
      &lt;li&gt;설정에 사용할 도메인이 있어야 한다. 이 예제에서는 무료 도메인 발급 사이트에서 발급받은 &lt;strong&gt;mnlee.cf&lt;/strong&gt;를 사용했다.&lt;/li&gt;
      &lt;li&gt;도메인 등록 사이트에서 Name Server를 &lt;strong&gt;OCI DNS&lt;/strong&gt;의 Name Server로 연결되게 구성해 주어야 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/waf/00_nameserver.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;waf-policy-생성&quot;&gt;WAF Policy 생성&lt;/h1&gt;

&lt;p&gt;OCI 콘솔에 접속해서 WAF Policy를 다음과 같이 생성한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/waf/00_create_waf.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;적용할 도메인과 WAF를 적용할 Origin 정보를 입력한다. 여기에서는 &lt;strong&gt;Load Balancer&lt;/strong&gt;를 바라보도록 설정하였다.
로드발란서 뒤의 Backend 서버에서 80 포트로 서비스가 구동 중이다.&lt;/p&gt;

&lt;p&gt;Edge Location으로 WAF가 Provision 되고, 과정이 완료되면 다음 그림처럼 DNS에 설정할 WAF의 &lt;strong&gt;CNAME Target&lt;/strong&gt;이 보여진다.
이 정보를 복사해 둔다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/waf/01_create_waf.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DNS Zone Management&lt;/strong&gt;로 이동하여 WAF의 CNAME Target을 다음과 같이 등록해 준다.
&lt;strong&gt;Add Record&lt;/strong&gt;의 &lt;strong&gt;CNAME&lt;/strong&gt; Type을 선택해서 레코드를 등록하고 등록된 후에는 &lt;strong&gt;Publish Changes&lt;/strong&gt;를 눌러줘야 변경 사항이 반영된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/waf/02_dns_setting.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;잘 반영되었는지 해당 DNS의 Name Server 정보를 확인하는 커맨드를 실행해 본다.
WAF의 CNAME Target으로 Server IP를 찾아오는 것을 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/waf/03_dig.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;브라우저에서 도메인을 입력하고 테스트를 실행해 보면 다음과 같다.
브라우저 개발자 툴에서 응답 헤더를 살펴보면 WAF에 의해 추가된 응답헤더들을 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/waf/04_browser.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WAF Policies&lt;/strong&gt;로 돌아가서 적용하고자 하는 Rule을 선택한 후 요청을 &lt;strong&gt;Block&lt;/strong&gt;할 것인지 &lt;strong&gt;Detect&lt;/strong&gt;만 할 것인지 선택 적용할 수 있다.
Filter 조건으로 원하는 Rule를 검색해 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/waf/05_rules.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;WAF를 통해 요청된 내역들은 &lt;strong&gt;Log&lt;/strong&gt; 메뉴에서 확인할 수 있다 &lt;strong&gt;Access&lt;/strong&gt; Type으로 Log가 기록되어 있는 것을 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/waf/06_log.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.cloud.oracle.com/iaas/Content/WAF/Concepts/overview.htm&quot;&gt;Overview of the Web Application Firewall Service&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="Oracle Cloud" /><category term="OCI" /><category term="WAF" /><category term="DNS" /><summary type="html">Oracle Cloud Infrasture(OCI)의 WAF Policy 생성하고 적용하는 방법에 대해 설명하는 문서 임.</summary></entry><entry><title type="html">Oracle JET 샘플 - Chatbot 실습 용</title><link href="http://localhost:4000/jet/2019/jet/" rel="alternate" type="text/html" title="Oracle JET 샘플 - Chatbot 실습 용" /><published>2019-07-18T00:00:00+09:00</published><updated>2019-07-18T00:00:00+09:00</updated><id>http://localhost:4000/jet/2019/jet</id><content type="html" xml:base="http://localhost:4000/jet/2019/jet/">&lt;p&gt;&lt;strong&gt;Oracle JET&lt;/strong&gt;를 이용하여 간단하게 웹 애플리케이션을 생성하는 예제로 Oracle JET에서 제공하는 &lt;strong&gt;Nav Bar Starter&lt;/strong&gt; 탬플릿을 이용하여 웹애플리케이션 프로젝트를 구성하고, Chatbot Hands On Lab에 필요한 교육생들의 환경 정보 관리 및 실습에서 사용하는 Web Channel과 WebView를 연결해 둔 샘플이다.&lt;/p&gt;

&lt;h1 id=&quot;환경-구성&quot;&gt;환경 구성&lt;/h1&gt;
&lt;p&gt;이 애플리케이션을 구동하기 위해서는 Oracle JET과 JET을 구동하기위해 필요한 패키지들이 사전에 설치되어 있어야 한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/en/middleware/developer-tools/jet/7/develop/choose-development-environment-oracle-jet.html#GUID-8A2D524A-3822-4D5D-8E87-1E1B39283999&quot;&gt;JET 설치 문서&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;애플리케이션-다운로드-및-구동&quot;&gt;애플리케이션 다운로드 및 구동&lt;/h1&gt;

&lt;p&gt;소스를 Git으로 다운 받아 다음과 같이 ojet 커맨드로 구동하면 샘플 애플리케이션이 구동된다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;기본 포트는 8000으로 동작&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/mee-nam-lee/jet.git
cd jet/training
ojet serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;training/src/bot-client-sdk-js는 Chatbot에서 제공하는 SDK 파일들이다. Oracle Download Site에서 해당 SDK를 받아서 구동할 환경에 맞게 configure 명령어를 수행 후 생성된 소스들을 이 디렉토리에 두면 된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/jet/chatbot_env/01_login.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;로그인을 수행하고 Environment 페이지로 Routing이 되면 Chatting 창이 열리게 된다.
채팅창이 그림과 깉이 보이지 않을 경우에는 &lt;strong&gt;App ID 설정&lt;/strong&gt; 버튼을 클릭하여 유효한 App ID를 입력하게 되면 채팅 아이콘이 보일 것이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/jet/chatbot_env/02_env.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;채팅 버튼을 클릭하여 채팅을 수행한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/jet/chatbot_env/03_chat.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Chatbot Hands on Lab에서 사용하는 &lt;strong&gt;WebView&lt;/strong&gt;도 여기에서 서비스 되는데
이 서비스는 REST API도 함께 구동되어 있어야 하기 때문에 &lt;strong&gt;ojet serve&lt;/strong&gt;로 구동된 Embedded Web Container에서는 테스트해 볼 수 없고
별도의 Express Http Server를 구동 시켜줘야 한다.&lt;/p&gt;

&lt;p&gt;기존의 &lt;strong&gt;ojet serve&lt;/strong&gt;로 구동된 프로세스를 종료하고 다음과 같이 수행한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd training/web
npm install
node server.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위에서 본 것과 동일한 환경이 별도의 HTTP Container에서 구동되는 환경이다. 
동일하게 8000 포트에서 동작하므로 Browser에서 &lt;a href=&quot;http://localhost:8000&quot;&gt;http://localhost:8000&lt;/a&gt; 으로 접속하면 된다.
로그인 후 WebView URL 링크를 클릭하면 WebView 샘플을 확인해 볼 수 있다.
챗봇에서의 연결은 WebView Hands On Lab을 그대로 따라 하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/jet/chatbot_env/04_webview.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;노트북 이미지는 danawa 사이트에서 참고한 것으로 직접 저장된 이미지는 없고 링크로만 연결되어 있음&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.oracle.com/webfolder/technetwork/jet/jetCookbook.html&quot;&gt;Oracle JET Cookbook&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.oracle.com/downloads/cloud/amce-downloads.html&quot;&gt;Oracle Chatbot Javascript SDK&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="chatbot" /><category term="WebView" /><category term="Channel" /><category term="JET" /><category term="JavaScript" /><summary type="html">Oracle JET를 이용하여 간단하게 웹 애플리케이션을 생성하는 예제로 Oracle JET에서 제공하는 Nav Bar Starter 탬플릿을 이용하여 웹애플리케이션 프로젝트를 구성하고, Chatbot Hands On Lab에 필요한 교육생들의 환경 정보 관리 및 실습에서 사용하는 Web Channel과 WebView를 연결해 둔 샘플이다.</summary></entry><entry><title type="html">챗봇 Hands-on Lab (9) - WebView 구현 및 챗봇 연계</title><link href="http://localhost:4000/chatbot/2019/%EC%B1%97%EB%B4%87-Hands-on-Lab_9/" rel="alternate" type="text/html" title="챗봇 Hands-on Lab (9) - WebView 구현 및 챗봇 연계" /><published>2019-06-19T00:00:00+09:00</published><updated>2019-06-19T00:00:00+09:00</updated><id>http://localhost:4000/chatbot/2019/%EC%B1%97%EB%B4%87%20Hands-on%20Lab_9</id><content type="html" xml:base="http://localhost:4000/chatbot/2019/%EC%B1%97%EB%B4%87-Hands-on-Lab_9/">&lt;p&gt;챗봇에서 text 기반으로 대화를 주고 받다가, 다수의 정보의 입력이 필요하거나 다양한 포맷의 응답을 제공해 줄 필요가 있을때는 웹 애플리케이션에서 익숙하게 사용하는 Form 형태의 인터페이스가 필요할 경우가 있고, 이를 위해서 이전 Lab에서 &lt;strong&gt;Instant App&lt;/strong&gt;에 대해서 살펴보았습니다. 이번 Lab에서는 비슷한 역할을 수행하기도 하면서, &lt;strong&gt;기존 웹 시스템과의 연계&lt;/strong&gt; 기능으로도 사용할 수 있는 &lt;strong&gt;WebView&lt;/strong&gt; 컴포넌트 기능에 대해 실습해 보겠습니다.&lt;/p&gt;

&lt;h1 id=&quot;webview-연계-아키텍쳐&quot;&gt;WebView 연계 아키텍쳐&lt;/h1&gt;
&lt;p&gt;WebView는 Chatbot에서 Web Url을 호출하는 것입니다. 단순 호출이라면 URL Link와 다를 것이 없겠지만, &lt;strong&gt;Chatbot과 Input, Output을 주고 받을 수 있다는 것&lt;/strong&gt;이 차이라고 할 수 있겠습니다.&lt;/p&gt;

&lt;p&gt;호출 관계는 다음과 같습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/webview/00_call_flow.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(1)번 POST 요청을 받은 서비스 (Intermediary Service)는 실제로 브라우저에서 서비스될 서비스의 URL을 생성하여 아래와 같은 포맷으로 리턴합니다.
Response를 받은 Bot이 제공된 &lt;strong&gt;webview.url&lt;/strong&gt;로 요청을 GET으로 보내게 됩니다.&lt;/p&gt;

&lt;h2 id=&quot;post-요청의-response-예시&quot;&gt;POST 요청의 Response 예시&lt;/h2&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;webview.url&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;http://&amp;lt;webview-url&amp;gt;/webview/booking?callbackUrl=http://&amp;lt;bot-url&amp;gt;/connectors/v1/callback?state=cb5443 . .. 2c&amp;amp;param1=samsung&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;호출될-웹-애플리케이션-준비---옵션-1-직접-빌드&quot;&gt;호출될 웹 애플리케이션 준비 - 옵션 (1) 직접 빌드&lt;/h1&gt;

&lt;p&gt;챗봇을 통해서 호출될 웹 애플리케이션이 필요합니다. 여기에서는 Laptop을 검색하여 리스트를 보여주는 간단한 애플리케이션을 가지고 연습합니다.&lt;/p&gt;

&lt;p&gt;웹 애플리케이션은 챗봇으로 부터 검색조건(제조사)을 전달받고 해당 조건에 맞는 리스트를 조회하여 보여줍니다. 
해당 리스트로 부터 Laptop 항목을 선택하면 선택 내용이 챗봇으로 전달되어 채팅창에 보여지는 간단한 애플리케이션 입니다.&lt;/p&gt;

&lt;p&gt;WebView 애플리케이션 소스를 다음에서 다운 받습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/mee-nam-lee/chatbot.git
cd bot_webview 
npm install
node index.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;기본 포트는 3000으로 동작합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;테스트 URL : http://localhost:3000/webview/booking?callbackUrl=a&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;아래와 같은 페이지가 보여질 것입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/webview/04_webview_test.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;Laptop 정보는 danawa 사이트의 정보를 사용한 것으로 이미지와 상세 보기의 링크는 danawa 사이트를 참조하게 되어있습니다.&lt;/p&gt;

&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;챗봇에서 Local PC 환경에서 동작하는 웹 애플리케이션을 호출하기 위해서는 ngrok 설정이 필요합니다.
ngrok 설정 후 챗봇 flow에서 WebView를 호출하기 위한 URL을 ngrok url로 변경해 줘야 합니다.
여기에서는 이 과정은 설명하지 않습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;호출될-웹-애플리케이션-준비---옵션-2-미리-준비된-웹-애플리케이션에-연결하기&quot;&gt;호출될 웹 애플리케이션 준비 - 옵션 (2) 미리 준비된 웹 애플리케이션에 연결하기&lt;/h1&gt;

&lt;p&gt;실습을 위해서 위에서 제공한 웹 애플리케이션 소스가 서비스되고 있는 환경의 URL을 제공할 것입니다. 해당 URL이 동작하는지 테스트 후에 &lt;strong&gt;챗봇 flow에서 WebView를 호출하기 위한 URL만 수정&lt;/strong&gt;해 주면 됩니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;테스트 URL : http://[제공된 서비스 IP]/webview/booking?callbackUrl=a&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;챗봇-flow&quot;&gt;챗봇 FLOW&lt;/h1&gt;

&lt;p&gt;WebView를 호출하는 Flow는 다음과 같습니다.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;platformVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1.0&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;webview&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;param1&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;string&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;selectedlaptops&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;string&quot;&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;states&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; 
  &lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;System.Text&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;prompt&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;검색하고&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;싶은&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;브랜드를&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;입력하세요&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;(예&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;LG,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;삼성,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;HP,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ASUS&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;etc)&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;variable&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;param1&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;maxPrompts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;3&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;transitions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{}&lt;/span&gt;           
      
  &lt;span class=&quot;na&quot;&gt;callWebview&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;System.Webview&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;sourceVariableList&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;param1&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;variable&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;selectedlaptops&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;prompt&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;검색&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;결과&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;확인을&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;위해&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'검색&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;결과창&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;열기'를&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;클릭하세요.&quot;&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;### 웹 애플리케이션이 서비스되고 있는 실제 URL로 변경해 주세요 ###&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;webAppUrl&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;http://ea36cf28.ngrok.io/webview&quot;&lt;/span&gt; 
      &lt;span class=&quot;na&quot;&gt;linkLabel&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;검색&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;결과창&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;열기&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;cancelLabel&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Cancel&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;transitions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{}&lt;/span&gt;  
    
  &lt;span class=&quot;na&quot;&gt;showMore&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;System.CommonResponse&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;responseItems&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;text&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;선택된&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;결과&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;입니다.&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;separateBubbles&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Selected&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Results&quot;&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;cards&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;cardLayout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;horizontal&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Laptops&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;cards&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;${selectedlaptops.value.maker}&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;${selectedlaptops.value.model}&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;${selectedlaptops.value.spec}&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;${selectedlaptops.value.weight}&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;${selectedlaptops.value.price}&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;imageUrl&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;${selectedlaptops.value.image}&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;LaptopsCard&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;상세&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;보기&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;페이지&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;이동&quot;&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;url&quot;&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
                  &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;${selectedlaptops.value.link}&quot;&lt;/span&gt;                
      &lt;span class=&quot;na&quot;&gt;processUserMessage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;transitions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;done&quot;&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;테스트&quot;&gt;테스트&lt;/h1&gt;

&lt;p&gt;챗봇 Test UI를 열어 다음과 깉이 테스트 합니다. 
&lt;strong&gt;검색 결과창 열기&lt;/strong&gt;를 클릭하면 새로운 브라우저 창에서 WebView 애플리케이션이 열리게 됩니다.
항목을 하나 선택하고 다시 챗봇 창으로 돌아옵니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/webview/01_bot_testui.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;검색 결과창 열기&lt;/strong&gt;를 클릭했을 때 보이는 웹 애플리케이션은 다음처럼 보이게 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/webview/02_webview.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;연결 관계는 다음과 같습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/chatbot_lecture/webview/03_test.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이상으로 WebView 구현 과정을 완료하였습니다.&lt;/p&gt;

&lt;h1 id=&quot;chatbot-workshop-lab&quot;&gt;Chatbot-Workshop Lab&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/chatbot/2019/챗봇-Hands-on-Lab_1/&quot;&gt;챗봇 Hands-on Lab (1) - Lab 개요&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/chatbot/2019/챗봇-Hands-on-Lab_2/&quot;&gt;챗봇 Hands-on Lab (2) - 금융봇을 이용하여 챗봇 기본 기능 익히기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/chatbot/2019/챗봇-Hands-on-Lab_3/&quot;&gt;챗봇 Hands-on Lab (3) - 피자봇 만들기 &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/chatbot/2019/챗봇-Hands-on-Lab_4/&quot;&gt;챗봇 Hands-on Lab (4) - [채널 연결] Web Chat 연결하기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/chatbot/2019/챗봇-Hands-on-Lab_5/&quot;&gt;챗봇 Hands-on Lab (5) - [채널 연결] Mobile 앱 연결하기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/chatbot/2019/챗봇-Hands-on-Lab_6/&quot;&gt;챗봇 Hands-on Lab (6) - Insights(분석) 기능 사용하기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/chatbot/2019/챗봇-Hands-on-Lab_7/&quot;&gt;챗봇 Hands-on Lab (7) - Custom Component 구현하기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/chatbot/2019/챗봇-Hands-on-Lab_8/&quot;&gt;챗봇 Hands-on Lab (8) - Instant App 구현 및 챗봇 연계&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/chatbot/2019/챗봇-Hands-on-Lab_9/&quot;&gt;챗봇 Hands-on Lab (9) - WebView 구현 및 챗봇 연계&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="chatbot" /><category term="오라클 챗봇" /><category term="Hands-on-Lab" /><category term="WebView" /><category term="웹 시스템 연계" /><summary type="html">챗봇에서 text 기반으로 대화를 주고 받다가, 다수의 정보의 입력이 필요하거나 다양한 포맷의 응답을 제공해 줄 필요가 있을때는 웹 애플리케이션에서 익숙하게 사용하는 Form 형태의 인터페이스가 필요할 경우가 있고, 이를 위해서 이전 Lab에서 Instant App에 대해서 살펴보았습니다. 이번 Lab에서는 비슷한 역할을 수행하기도 하면서, 기존 웹 시스템과의 연계 기능으로도 사용할 수 있는 WebView 컴포넌트 기능에 대해 실습해 보겠습니다.</summary></entry><entry><title type="html">WebLogic에서 JDBC를 이용하여 Autonomous Database 연결하기</title><link href="http://localhost:4000/weblogic/2019/weblogic_atp/" rel="alternate" type="text/html" title="WebLogic에서 JDBC를 이용하여 Autonomous Database 연결하기" /><published>2019-06-10T00:00:00+09:00</published><updated>2019-06-10T00:00:00+09:00</updated><id>http://localhost:4000/weblogic/2019/weblogic_atp</id><content type="html" xml:base="http://localhost:4000/weblogic/2019/weblogic_atp/">&lt;p&gt;Oracle &lt;strong&gt;Autonomous Database (ADW, ATP)&lt;/strong&gt;를 연결하기 위해서는 &lt;strong&gt;Wallet&lt;/strong&gt;이라는 인증 정보를 담고 있는 지갑이 필요하다. WebLogic Server에서 Database 연결을 위해서는 JDBC를 이용하는데, 아래에서는 Autonomous Database를 연결하기 위한 JDBC 설정 방법에 대해 설명 할 것이다.&lt;/p&gt;

&lt;h1 id=&quot;사용-환경&quot;&gt;사용 환경&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;WebLogic Server 12.2.1.3.0&lt;/li&gt;
  &lt;li&gt;JDK 1.8.0_192&lt;/li&gt;
  &lt;li&gt;Autonomous Database : Autonomous Transaction Processiong (ATP)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;사전-준비-사항&quot;&gt;사전 준비 사항&lt;/h1&gt;

&lt;h3 id=&quot;jdbc-driver-upgrade&quot;&gt;JDBC Driver Upgrade&lt;/h3&gt;

&lt;p&gt;아래 문서에서 보듯이 WebLogic Server 12.2.1.3에서 Autonomous Database 연결을 위해서는 JDBC Driver Upgrade가 필요하다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.oracle.com/technetwork/database/application-development/jdbc/documentation/atp-5073445.html#prereq&quot;&gt;Java Connectivity with Autonomous Database (ATP or ADW) using 19c and 18.3 JDBC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;JDBC Driver 18.3 버전을 다운 받아서 아래와 같이 WebLogic 디렉토리에 복사한다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.oracle.com/technetwork/database/application-development/jdbc/downloads/jdbc-ucp-183-5013470.html&quot;&gt;JDBC Driver Download&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/atp/05_jdbc.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;wallet-download&quot;&gt;Wallet Download&lt;/h3&gt;
&lt;p&gt;Autonomous Database 연결을 위한 Wallet을 다운 받는다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/atp/06_wallet_down.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;wallet&lt;/strong&gt;을 담고 있는 &lt;strong&gt;zip&lt;/strong&gt; 파일이 다운로드 될 것이다. 이 파일을 원하는 위치에 복사하고 압축을 풀어준다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/atp/04_wallet_loc.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;다운받은 zip 내에는 &lt;strong&gt;tnsnames.ora&lt;/strong&gt; 파일이 들어있다. 
tnsnames.ora 파일은 다음과 같은 모습일 것이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/atp/03_tnsnames.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이 서비스 중에서 원하는 작업 유형에 따라 서비스 명을 선택해서 접속하면 된다.
아래 예제에서는 &lt;strong&gt;tp&lt;/strong&gt; suffix 서비스 명을 사용할 것이다. 사전 정의된 서비스 명의 사용 유형은 아래를 참고하면 된다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/en/cloud/paas/atp-cloud/atpug/connect-predefined.html#GUID-9747539B-FD46-44F1-8FF8-F5AC650F15BE&quot;&gt;Predefined Database Service Names for Autonomous Transaction Processing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;jdbc-connection-생성&quot;&gt;JDBC Connection 생성&lt;/h1&gt;

&lt;p&gt;WebLogic Server Console에 접속해서 DataSouce를 생성해 줄 차례이다. WebLogic에서는 여러 타입의 DataSource를 제공하는데 여기에서는 &lt;strong&gt;Generic&lt;/strong&gt; DataSource와 &lt;strong&gt;UCP&lt;/strong&gt; DataSource를 사용할 것이다.&lt;/p&gt;

&lt;h2 id=&quot;generic-datasource&quot;&gt;Generic DataSource&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Generic DataSource&lt;/strong&gt; 타입을 선택한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/atp/01_generic1.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;원하는 DataSource Name과 JNDI Name을 입력한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/atp/01_generic2.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;JDBC Driver 유형을 선택한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/atp/01_generic3.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;트랜잭션 옵션을 선택한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/atp/01_generic4.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Database Name과 Host Name 란에 아무 값이나 입력한다. 이 값은 다음 페이지에서 변경해 줄 것이기 때문에 이 화면에서의 입력값은 의미 없다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/atp/01_generic5.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이전 화면에서 입력한 정보를 바탕으로 Connection URL이 생성되었을 것이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/atp/01_generic6.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이 URL을 다음과 같은 형태로 변경해 줘야 한다.
TNS_ADMIN에는 Wallet이 위치한 Location을 적어준다.&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Pattern&lt;/td&gt;
      &lt;td&gt;jdbc:oracle:thin:@dbname_tp?TNS_ADMIN=/users/test/wallet_dbname/&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;에제&lt;/td&gt;
      &lt;td&gt;jdbc:oracle:thin:@demo_tp?TNS_ADMIN=/u01/oracle/wallet&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;변경 후에 &lt;strong&gt;Test Configuration&lt;/strong&gt; 버튼을 클릭하여 연결이 잘 되는지 확인해 본다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/atp/01_generic7.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;DataSource 배포할 WebLogic Instance를 선택한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/atp/01_generic8.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;DataSource가 배포되고 Connection이 연결되어 있는 상태를 모니터링 할 수 있을 것이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/atp/01_generic9.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;ucp-datasource&quot;&gt;UCP DataSource&lt;/h2&gt;

&lt;p&gt;이번에는 UCP 타입의 DataSource를 만들어 볼 것이다. 설정 화면이 Generic DataSource와 약간 다른 것을 볼 수 있을 것이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UCP DataSource&lt;/strong&gt; 타입을 선택한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/atp/02_ucp1.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;원하는 DataSource Name과 JNDI Name을 입력하고 JDBC Driver 유형을 선택한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/atp/02_ucp2.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;URL 부분에 위 예제에서 사용했던 Connection URL String을 입력한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/atp/02_ucp3.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;UCP 관련 옵션을 설정한다. 이 예제에서는 Pool Size 만 설정하였다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/atp/02_ucp4.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Test Configuration&lt;/strong&gt; 버튼을 클릭하여 연결이 잘 되는지 확인해 본다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/atp/02_ucp5.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;테스트에 성공하였다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/atp/02_ucp6.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;모니터링에서도 Connection이 잘 만들어진 것을 확인해 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/atp/02_ucp7.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.oracle.com/technetwork/database/application-development/jdbc/documentation/atp-5073445.html#prereq&quot;&gt;Java Connectivity with Autonomous Database (ATP or ADW) using 19c and 18.3 JDBC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="WebLogic" /><category term="Autonomous Database" /><category term="ATP" /><category term="JDBC" /><category term="Wallet" /><summary type="html">Oracle Autonomous Database (ADW, ATP)를 연결하기 위해서는 Wallet이라는 인증 정보를 담고 있는 지갑이 필요하다. WebLogic Server에서 Database 연결을 위해서는 JDBC를 이용하는데, 아래에서는 Autonomous Database를 연결하기 위한 JDBC 설정 방법에 대해 설명 할 것이다.</summary></entry><entry><title type="html">Low Code Development 솔루션 - Oracle Visual Builder Cloud</title><link href="http://localhost:4000/cloud/2019/vbcs/" rel="alternate" type="text/html" title="Low Code Development 솔루션 - Oracle Visual Builder Cloud" /><published>2019-05-30T00:00:00+09:00</published><updated>2019-05-30T00:00:00+09:00</updated><id>http://localhost:4000/cloud/2019/vbcs</id><content type="html" xml:base="http://localhost:4000/cloud/2019/vbcs/">&lt;p&gt;Oracle PaaS 중에 Visual Builder라는 &lt;strong&gt;Low Code Development&lt;/strong&gt; 솔루션 Cloud Service가 있다. &lt;strong&gt;웹&lt;/strong&gt;과 &lt;strong&gt;모바일&lt;/strong&gt;을 애플리케이션을 Drag &amp;amp; Drop 만으로 개발할 수 있고, 데이터베이스도 내장하고 있어서 별도의 저장 공간을 준비하지 않아도 이 솔루션 만으로 간단히 애플리케이션을 개발해 낼 수가 있다.&lt;/p&gt;

&lt;p&gt;이전 버전은 Page Navigation Flow 등의 가시성 부분은 제공되지 않았었는데, 현재의 버전에서는 Page Navigation Flow 뿐만 아니라 Action에 대한 Flow도 가시적으로 보여주기 때문에 직관적 Flow UI를 통해 애플리케이션을 쉽게 개발 할 수 있다.&lt;/p&gt;

&lt;p&gt;Cloud Console에 접속하여 애플리케이션을 생성하면 다음과 같은 작업을 수행할 수 있다.
Web 또는 Mobile 애플리케이션을 생성하거나, 데이터를 담을 Business Object를 생성하거나, 기존의 REST 서비스를 연결하거나 Process Cloud 서비스와의 연동을 수행 할 수 있다.&lt;/p&gt;

&lt;p&gt;생성된 Business Object나 Service Integration은 Web, Mobile 앱에서 공통으로 사용할 수 있다.&lt;/p&gt;

&lt;h1 id=&quot;start-building-your-application&quot;&gt;Start Building Your Application&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/vbcs/01_newapps.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;business-object&quot;&gt;Business Object&lt;/h1&gt;

&lt;p&gt;Business Object를 생성하고 Object간의 Relation을 생성하고 나면 다음과 같은 Object 간의 relation을 보여주는 &lt;strong&gt;Diagram&lt;/strong&gt;을 보여준다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/vbcs/02_diagram.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Business Object는 REST API를 통해 참조되기 때문에 Object 생성 시 &lt;strong&gt;REST API&lt;/strong&gt;도 자동으로 생성해 준다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/vbcs/03_endpoints.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이 Business Object를 Component의 Data Source로 사용하면 자동으로 &lt;strong&gt;CRUD&lt;/strong&gt;를 하는 Page를 만들어 주게 된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/vbcs/04_employee_page.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;event&quot;&gt;Event&lt;/h1&gt;

&lt;p&gt;이벤트 발생 시 수행하는 Action을 다음처럼 일련의 Chain으로 연결한 Flow를 작성할 수 있다. 이 Action에서 다른 Page로 Navigation을 하거나 사진을 찍는 Native Feature를 사용할 수도 있고, 커스텀 JavaScript 모듈도 호출할 수가 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/vbcs/05_action_chain.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;page-flow&quot;&gt;Page Flow&lt;/h1&gt;

&lt;p&gt;Page들이 생성되고 Navigation 관계가 연결되면 Page들 간의 Flow를 시각적으로 보여준다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/vbcs/06_flow.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;view-mode&quot;&gt;View Mode&lt;/h1&gt;

&lt;p&gt;View Mode를 &lt;strong&gt;Live / Design / Code&lt;/strong&gt;로 변경해 가며 개발 및 테스트 할 수 있다. Live Mode에서는 Test Data를 가지고 실제로 동작되는 모습을 확인해가면서 개발할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;live-mode&quot;&gt;Live Mode&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/vbcs/07_live.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;code-mode&quot;&gt;Code Mode&lt;/h2&gt;

&lt;p&gt;자동으로 생성된 Page Code를 확인하고 직접 코드를 작성해서 넣을 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/vbcs/08_code.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;function--custom-logic&quot;&gt;Function / Custom Logic&lt;/h1&gt;

&lt;p&gt;커스텀 로직을 &lt;strong&gt;JavaScript&lt;/strong&gt; Fuction으로 작성할 수도 있다. Function Scope에 따라 필요한 곳에서 &lt;strong&gt;JS&lt;/strong&gt; 메뉴를 클릭하여 Function을 작성해 넣으면 된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/vbcs/20_js.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;cicd&quot;&gt;CI/CD&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Source View&lt;/strong&gt; 메뉴에서 보면 자동으로 생성된 개발 산출물 소스들을 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/vbcs/09_source_view.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이 코드들을 DevOps 툴인 &lt;strong&gt;Oracle Developer Cloud&lt;/strong&gt;와 연계하여 CI/CD 구성도 가능하다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/vbcs/09_devcs.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Git Push를 수행하면 연결된 Developer Cloud의 Git Repository로 Push 되고, 자동으로 빌드되도록 구성할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/vbcs/10_push.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Developer Cloud에 소스가 들어가 있는걸 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/vbcs/11_devcs.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;screen&quot;&gt;Screen&lt;/h1&gt;

&lt;p&gt;디바이스 및 Screen에 따라 변경되는 &lt;strong&gt;Responsive Web&lt;/strong&gt; 디자인을 따르고 있기 때문에, 보기 유형을 바꿔가며 확인 할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;phone-portrait&quot;&gt;Phone Portrait&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/vbcs/12_screen.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;tablet-portrait&quot;&gt;Tablet Portrait&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/vbcs/13_tablet.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;component&quot;&gt;Component&lt;/h1&gt;

&lt;p&gt;Visual Develeper에서는 &lt;strong&gt;Oracle JET&lt;/strong&gt; 컴포넌트를 사용한다. 이미 설치된 Component는 아래처럼 확인해 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/vbcs/21_component.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;추가적인 Component가 필요하다면, Oracle JET 페이지를 참고하여 가져올 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/vbcs/22_jet.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.oracle.com/webfolder/technetwork/jet/jetCookbook.html&quot;&gt;Oracle JET Cookbook 바로가기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;publish&quot;&gt;Publish&lt;/h1&gt;

&lt;p&gt;개발이 완료되었으면 &lt;strong&gt;Publish&lt;/strong&gt; 메뉴를 통해 Publish한다. Publish된 애플리케이션은 &lt;strong&gt;Live&lt;/strong&gt; 상태가 되며 Read-only로면 Open 할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/vbcs/23_publish.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Publish 전에도 언제든지 &lt;strong&gt;Run&lt;/strong&gt; 버튼을 클릭하여 서비스되는 모습을 확인하며 테스트 해 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/vbcs/23_test.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.oracle.com/en_US/visual-builder&quot;&gt;Oracle Visual Builder Cloud&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="Low Code Development" /><category term="Visual Builder" /><category term="PaaS" /><summary type="html">Oracle PaaS 중에 Visual Builder라는 Low Code Development 솔루션 Cloud Service가 있다. 웹과 모바일을 애플리케이션을 Drag &amp;amp; Drop 만으로 개발할 수 있고, 데이터베이스도 내장하고 있어서 별도의 저장 공간을 준비하지 않아도 이 솔루션 만으로 간단히 애플리케이션을 개발해 낼 수가 있다.</summary></entry><entry><title type="html">Docker Compose를 사용한 WebLogic, MySQL 개발 환경</title><link href="http://localhost:4000/weblogic/2019/weblogic-mysql/" rel="alternate" type="text/html" title="Docker Compose를 사용한 WebLogic, MySQL 개발 환경" /><published>2019-05-22T00:00:00+09:00</published><updated>2019-05-22T00:00:00+09:00</updated><id>http://localhost:4000/weblogic/2019/weblogic-mysql</id><content type="html" xml:base="http://localhost:4000/weblogic/2019/weblogic-mysql/">&lt;p&gt;Local PC 환경에서 WebLogic을 데이터베이스와 함께 테스트하는 환경을 구축할 필요가 있을 때, 내 PC에 각종 소프트웨어들을 다 설치할 필요 없이 표준 이미지로 제공되는 Docker Image 이용하여 구동만 하면 매우 편리할 때가 많다.&lt;/p&gt;

&lt;p&gt;여기에서는 MySQL을 DB로 사용하는 WebLogic 환경을 구축하는 간단한 방법을 설명할 것이다.&lt;/p&gt;

&lt;h1 id=&quot;docker-compose파일-생성&quot;&gt;Docker-Compose 파일 생성&lt;/h1&gt;

&lt;p&gt;Docker Compose 구성 파일에서 사용하는 필요한 내용들을 미리 준비해 둔다.&lt;/p&gt;

&lt;h2 id=&quot;필요-파일&quot;&gt;필요 파일&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Docker Images : MySQL과 WebLogic Image는 &lt;a href=&quot;http://dockerhub.com&quot;&gt;Docker Hub&lt;/a&gt;에서 받을 수 있다.&lt;/li&gt;
  &lt;li&gt;MySQL JDBC Driver : &lt;a href=&quot;https://dev.mysql.com/downloads/connector/j/&quot;&gt;Download Connector/J&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;다운 받은 jar 파일을 작업 디렉토리에 복사한다.&lt;/li&gt;
      &lt;li&gt;작업 디렉토리는 WebLogic Container에 Volume으로 Attach 할 것이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;domain.properties 파일 : 도메인 계정 정보를 담는 파일이다. 아래 내용을 참고해서 작업 디렉토리 내에 생성해 둔다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;domainproperties&quot;&gt;domain.properties&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;username=weblogic
password=welcome1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;docker-composeyml&quot;&gt;docker-compose.yml&lt;/h3&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3'&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mysql&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name &lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;some-mysql&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;welcome1&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;MYSQL_DATABASE&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mysql&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./mysqldata:/var/lib/mysql&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;.:/mnt/tmp&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3306:3306&quot;&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;33060:33060&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;hostname&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mysql&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;--default-authentication-plugin=mysql_native_password&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;weblogic&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;store/oracle/weblogic:12.2.1.3-dev&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;myweblogic&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;PRE_CLASSPATH&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/u01/oracle/properties/mysql-connector-java-8.0.16.jar:${PRE_CLASSPATH}&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;depends_on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mysql&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;.:/u01/oracle/properties&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;7001:7001&quot;&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;9002:9002&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;stdin_open&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;tty&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;파일이 완료되었으면 컨테이너를 구동한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;mysql-user-생성&quot;&gt;MySQL User 생성&lt;/h1&gt;
&lt;p&gt;애플리케이션에서 사용할 DB User를 생성한다. 이 User는 WebLogic에서 DataSource를 생성할 때 사용할 것이다.
현 작업 디렉토리가 MySQL Container에 Volume으로 연결되어 있으므로 사용자를 생성할 &lt;strong&gt;createuser.sql&lt;/strong&gt; 파일을 현 디렉토리 내에 다음 내용으로 생성한다. 별도의 필요한 DDL/DML이 있다면 여기에 추가하면 좋을 것이다.&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'user1'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDENTIFIED&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'welcome1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;GRANT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ALL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PRIVILEGES&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TO&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'user1'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'%'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음 command를 실행하면 사용자가 추가 될 것이다. 새롭게 생성되는 사용자는 &lt;strong&gt;mysql_native_password&lt;/strong&gt; plugin을 기본하도록 설정되어 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; docker exec -it some-mysql sh -c &quot;mysql -uroot -pwelcome1 mysql &amp;lt; /mnt/tmp/createuser.sql&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/mysql/01_mysql_user.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;datasource-생성&quot;&gt;DataSource 생성&lt;/h1&gt;

&lt;p&gt;WebLogic Console에 접속해서 DataSource를 생성한다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://localhost:9002/console&quot;&gt;https://localhost:9002/console&lt;/a&gt;로 접속한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/mysql/02_ds1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;적당한 드라이버를 선택한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/mysql/02_ds2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;사용자 생성 시 사용했던 Password를 입력한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/mysql/02_ds3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Connection을 Test 해본다. 입력이 잘 되었다면 성공할 것이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/mysql/02_ds4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Finish&lt;/strong&gt;를 클릭하면 DataSource가 생성된다.&lt;/p&gt;

&lt;p&gt;이제 애플리케이션에서 Connection을 얻어다 사용하기만 하면 된다.&lt;/p&gt;</content><author><name></name></author><category term="WebLogic" /><category term="MySQL" /><category term="Docker" /><category term="Docker Compose" /><summary type="html">Local PC 환경에서 WebLogic을 데이터베이스와 함께 테스트하는 환경을 구축할 필요가 있을 때, 내 PC에 각종 소프트웨어들을 다 설치할 필요 없이 표준 이미지로 제공되는 Docker Image 이용하여 구동만 하면 매우 편리할 때가 많다.</summary></entry><entry><title type="html">Oracle Storage Classic의 Object 지우기 - Bulk Delete REST API 이용</title><link href="http://localhost:4000/cloud/2019/storage-classic-bulk-delete/" rel="alternate" type="text/html" title="Oracle Storage Classic의 Object 지우기 - Bulk Delete REST API 이용" /><published>2019-05-09T00:00:00+09:00</published><updated>2019-05-09T00:00:00+09:00</updated><id>http://localhost:4000/cloud/2019/storage-classic-bulk-delete</id><content type="html" xml:base="http://localhost:4000/cloud/2019/storage-classic-bulk-delete/">&lt;p&gt;Object Storage에서 Container를 지우고 싶을 경우, Container 내에 Object들이 존재한다면 &lt;strong&gt;먼저 Object들을 다 지우고 Container를 지워야 한다.&lt;/strong&gt;
오라클 Cloud에서는 이 작업을 Cloud Console을 통해서 수행할 수 있지만, Object가 수천개가 넘어 간다면 이를 일일이 수동으로 삭제하는 것이 거의 불가능하다.&lt;/p&gt;

&lt;p&gt;따라서 이 경우 REST API를 이용하여서 Object를 지워줘야 하는데, 이를 위해서 &lt;strong&gt;Bulk Delete&lt;/strong&gt;하는 REST API를 제공한다.
이를 통해서 금방 다 지울 수 있을 것 같지만 지우려고 하는 Object가 수천개라면 수천 개 List를 Bulk Delete API에 한방에 보내서 처리할 수가 없다.
테스트 해 본 결과 안정적으로 처리 후 응답을 받을 수 있는 Object 갯수는 70개 내외였다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;bulk-delete의 input object 수를 상황에 따라 적절히 조절하면서 스크립트를 수행한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Object List를 70개 내외로 잘라내서 매번 REST API를 돌려주는 것도 상당히 번거로운 일이기 때문에, 다음과 같이 정해진 수의 Input을 받아서 Bulk Delete API를 호출하는 스크립트를 만들어 주면 작업은 훨씬 간편해 진다.&lt;/p&gt;

&lt;h1 id=&quot;bulk-deletesh&quot;&gt;bulk-delete.sh&lt;/h1&gt;

&lt;p&gt;스크립트의 내용은 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Connection Info&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ContainerName&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;iddomain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Identity Domain Name&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;User Name&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Password&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# get AuthToken&lt;/span&gt;
curl &lt;span class=&quot;nt&quot;&gt;-I&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; GET &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;X-Storage-User: Storage-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;iddomain&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;X-Storage-Pass: &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
      https://&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;iddomain&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;.us.storage.oraclecloud.com/auth/v1.0 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; output.txt 

&lt;span class=&quot;nv&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;AUTH output.txt | &lt;span class=&quot;nb&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n1&lt;/span&gt; |  &lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{print $2}'&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;## Looping Count는 원하는 대로&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; c&amp;lt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;5&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; c++ &lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;do
&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;========= &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; =======================&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cp&lt;/span&gt; /dev/null object1.txt
&lt;span class=&quot;nb&quot;&gt;cp&lt;/span&gt; /dev/null object2.txt

&lt;span class=&quot;c&quot;&gt;# Get Object List&lt;/span&gt;
curl &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;X-Auth-Token: &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; https://&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;iddomain&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;.us.storage.oraclecloud.com/v1/Storage-&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;iddomain&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; object1.txt

&lt;span class=&quot;c&quot;&gt;# Python 코드 사용 시&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#python3 ./object.py ${container}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Container 이름 추가 부분 Script로 변경&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 한 번에 delete할 Object의 수는 &quot;-nObject수&quot;로 조정&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;object1.txt | &lt;span class=&quot;nb&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n30&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$container&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{print var &quot;/&quot; $1}'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; object2.txt

&lt;span class=&quot;c&quot;&gt;# Bulk Delete&lt;/span&gt;
curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; DELETE &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;X-Auth-Token: &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Content-Type: text/plain&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;-T&lt;/span&gt; object2.txt &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     &lt;span class=&quot;s2&quot;&gt;&quot;https://&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;iddomain&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.us.storage.oraclecloud.com/v1/Storage-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;iddomain&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/?bulk-delete&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;objectpy&quot;&gt;object.py&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Python 코드 사용 부분을 Script로 대체하였기 때문에 이 코드는 이제 필요 없다.
참고 용으로 지우지 않고 그대로 둠&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;스크립트 내부에서 &lt;strong&gt;Python&lt;/strong&gt; 파일을 수행하는데, 이것이 하는 역할은 Object 이름 앞에 Container의 이름을 달아 주는 것이다.
여기서 bulk delete에 사용할 input 값의 크기를 조정하면 된다. 예제에서는 70으로 설정하였다.&lt;/p&gt;

&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;glob&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;object1.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'r'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'utf8'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;fw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;object2.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;linenum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;linenum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linenum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; 
    &lt;span class=&quot;s&quot;&gt;''' print(&quot;line&quot;, line) '''&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linenum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;70&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;사용법&quot;&gt;사용법&lt;/h1&gt;

&lt;p&gt;bulk-delete.sh의 Connection 관련 정보와 Container 명을 수정한 후 스크립트만 돌려주면 된다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; bulk-delete.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;루핑을 돌면서 잘 지워지고 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/storage/01_result.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Object가 다 지워지고 나면 Container는 콘솔에서 삭제하면 된다.&lt;/p&gt;

&lt;h1 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/en/cloud/iaas/storage-cloud/cssto/deleting-multiple-objects-single-operation.html&quot;&gt;Deleting Multiple Objects in a Single Operation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="Oracle Cloud" /><category term="Object Storage" /><category term="REST API" /><category term="Python" /><summary type="html">Object Storage에서 Container를 지우고 싶을 경우, Container 내에 Object들이 존재한다면 먼저 Object들을 다 지우고 Container를 지워야 한다. 오라클 Cloud에서는 이 작업을 Cloud Console을 통해서 수행할 수 있지만, Object가 수천개가 넘어 간다면 이를 일일이 수동으로 삭제하는 것이 거의 불가능하다.</summary></entry></feed>